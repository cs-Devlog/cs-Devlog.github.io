<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[2019 CJ올리브네트웍스 1차 면접 후기]]></title>
      <url>/%EB%A9%B4%EC%A0%91/2019/05/14/2019-CJ%EC%98%AC%EB%A6%AC%EB%B8%8C%EB%84%A4%ED%8A%B8%EC%9B%8D%EC%8A%A4-%EB%A9%B4%EC%A0%91-%ED%9B%84%EA%B8%B0/</url>
      <content type="text"><![CDATA[&lt; CJ 1차 면접 후기 &gt;CJ 면접은 특이하게 호텔 한층을 빌려서 방을 면접장처럼 개조해서 진행한다.8시 도착해서 출석체크에 서명하는데 어떤 면접을 먼저 보는지 나와있다.CJ 관련 복지 이야기 듣고 면접 대기실 이동&lt; 보고합시다 &gt;면접관 2명, 지원자 4~6명 이서 진행하는 방식이다.휴식시간 없이 거의 2시간 30분정도 계속 진행되기 때문에 화장실은 미리 다녀와야한다.인적성부터 변화가 있길래 심층 면접도 어느정도 변화가 있을 줄 알았지만 소문대로 똑같았다.주제 : 디지털 트랜스포메이션 시대에 IT 소외계층(어르신, 장애인)이 디지털 소외감을 해결하는 방안정말 주제잘못생각해서 뭐 온라인으로 TV 활용한다, 오프라인 교육한다 이런식으로 적었다가 잘못된걸 깨달았다.중간 보고 이후에 팀원 각자에게 개인 질문을 하신다.이후 다시 팀원과 회의해서 최종 발표를 하고 끝날 때 각자에게 개인 질문 + 설문 조사(자신의 역할과 팀원중 잘한사람 2명과 이유)팀원중에 시간이 부족한데 말을 계속 이어가시는 분도 있어서 힘들었던 부분도 있었던 만큼 팀원운도 어느정도 중요하다.&lt; 직무 면접 &gt;보고합시다 이후 약 한 시간정도의 공백이 있었다.운이 좋은(?) 분은 보고합시다 면접 끝나자마자 바로 직무면접 가시는 분도 계셨다.면접관 2명, 지원자 2명보통 3명씩 진행하는 반면, 토론 면접때 같이 했던 사람과 같이 면접에 들어갔다.면접관들도 최대한 편하게 해주시려고 하시고, 이야기도 되도록 들어주시려고 하신다.옆 지원자분이 말이 엄청 길었는데 다 들어주시는 모습 보면서 대단하다고 생각..자소서 기반으로 면접이 진행된다.  1분자기소개  어디서 인턴 했는지와 무슨 일을 했는지  4차 산업혁명중 최근에 공부하는게 있는지?          최근 공부하는 4차 산업혁명 기술은 없어서 난항..      AWS EC2를 최근 했다고 말씀드렸더니 그거 없어졌는데 하셔서 당황..        직무를 위해서 최근 하는 노력은?          개인 공부를 하고 있다고 말씀드림        이력서에 프로젝트가 적은데 그 이유는?          이력서에 다 적지는 않았지만 그동안 했던 프로젝트를 말씀드림        자소서에 ENM 계열사를 작성한 이유는?  ENM 계열사가 아니면 안되는지?  (농담식으로) 개발이 재미있어요?          어떻게 답변해야할지 몰라서 재미있다고 단답으로 마무리했는데 음..        자소서에 팀원간 어려움이 있었다는데 어떤 어려움인지?          R&amp;R로 해결        회사에 물어보고 싶은 것  마지막 자기 자랑이나 하고싶은 말2명이서 30분정도 걸렸는데 실질적으로 질문 받은건 몇개 안된다.면접 결과가 나와봐야 알 것 같다.]]></content>
      <categories>
        
          <category> 면접 </category>
        
      </categories>
      <tags>
        
          <tag> CJ올리브네트웍스 </tag>
        
          <tag> 면접 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[2019 CJ인적성(CJAT) 후기]]></title>
      <url>/%EC%9D%B8%EC%A0%81%EC%84%B1/2019/05/12/2019-CJ%EC%9D%B8%EC%A0%81%EC%84%B1(CJAT)-%ED%9B%84%EA%B8%B0/</url>
      <content type="text"><![CDATA[&lt; CJ 인적성(CJAT) 후기 &gt;평소 쉽다고 소문난 CJ 인적성이지만 이번에는 예시문제 4개만 주고 아무런 정보를 주지 않았다.기사를 찾아봐도 평소 CJ 문제집으로 공부하다가는 큰코다친다 이런식으로 나와있길래GSAT처럼 나올 것 같은 느낌이라 20대인적성 문제를 풀면서 대비했다.&lt; CJAT 시험 정보 &gt;GSAT처럼 단계별 풀고 넘어가는 방식1 교시 25문제 30분 (독해, 요약 15문제 + 언어 추리 15문제)2교시 15문제 15분 (글의 구조 순서 15문제)3교시 25문제 35분 (수리 25문제)4교시 15문제 20분 (신유형 도형돌리기 15문제)다른건 둘째치고 4교시가 LG 도형돌리기와 비슷하지만 차이점이 있다.신유형의 경우 예시문제에 규칙이 주어진다. ex) ㅇ3 =&gt; 시계방항 270도 회전, ㅁ3 =&gt; 도형 내부 270도 회전 ..이런식으로 순서도에 따라 이동하면서 회전을 다 수행했을 때 결과를 찾으면 된다.곧 유형 분석법이 나오겠지만 개인적으로 쉽게 푸는 방법은 보기에 전부 들어가 있는 도형 하나를 잡고 이걸 조건에 따라 같이 돌려보면 훨씬 수월하게 문제를 풀 수 있다.총 못푼문제는 20문제 가량 되는거 같은데 결과는 나와봐야 알 것 같다.&lt; 결과 &gt;]]></content>
      <categories>
        
          <category> 인적성 </category>
        
      </categories>
      <tags>
        
          <tag> CJ올리브네트웍스 </tag>
        
          <tag> 인적성 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[JVM 작동 방식]]></title>
      <url>/java/2019/05/11/JVM-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D/</url>
      <content type="text"><![CDATA[&lt; JVM(Java Virtual Machine) &gt;JVM 역할은 자바 애플리케이션을 클래스 로더를 통해 읽어 들여 자바 API와 함께 실행하는 것또한, Java와 OS 간의 중개자 역할을 수행하여 OS에 구애받지 않고 재사용을 가능하게 한다.메모리관리 및 Garbage Collection 역할을 수행하며 Stack 기반의 가상머신이다.&lt; Java 프로그램 실행 과정 &gt;  프로그램이 실행되면 JVM은 OS로부터 이 프로그램이 필요로 하는 메모리를 할당받는다.  자바 컴파일러(javac)가 자바 소스코드(.java)를 읽어들여 자바 바이트코드(.class)로 변환시킨다.  Class Loader를 통해 class파일들을 JVM으로 로딩한다.  로딩된 class파일들은 Execution engine을 통해 해석된다.  해석된 바이트코드는 Runtime Data Areas 에 배치되어 실질적인 수행이 이루어지게 된다.Class Loader(클래스 로더)클래스 로더는 .class 파일을 읽어 바이트 코드를 메소드 영역(Method Area)에 저장한다.Runtime 시에 클래스를 처음으로 참조할 때, 해당 클래스를 로드하고 링크하는 역할을 수행한다.&lt; Runtime Data Area &gt;프로그램 수행을 위해 os로부터 할당받는 메모리 영역으로 5가지로 볼 수 있다.Method area클래스 정보를 처음 메모리 공간에 올릴 때 초기화되는 대상을 저장하기 위한 메모리공간이다.클래스 이름, 부모 클래스 이름, 메소드, 변수 정보 등과 같은 수준의 모든 클래스 정보와 static 변수들을 저장한다.Heap area모든 객체를 저장하는 가상 메모리 공간이다. new 연산자로 생성된 객체와 배열을 저장한다.Stack area프로그램 실행과정에서 임시로 할당되었다가 메소드를 빠져나가면 바로 소멸되는 특성의 데이터를 저장하기 위한 영역이다.각종 형태의 변수나 임시 데이터, 스레드, 메소드 정보를 저장한다.PC RegistersThread가 어떤 부분을 명령으로 실행해야할 지에 대한 기록을 하는 부분으로 현재 수행중인 JVM 명령의 주소를 가진다.Native Method Stacks자바 프로그램이 컴파일되어 생성되는 실제 실행할 수 있는 기계어로 작성된 프로그램을 실행시키는 영역이다.&lt; Execution Engine(실행 엔진) &gt;바이트 코드로 된 .class 파일을 실행한다. 바이트 코드를 한줄씩 읽고 다양한 메모리 영역에 나타난 데이터와 정보를 사용한다.Interpreter실행 엔진은 바이트코드를 한줄씩 읽어서 실행한다. 단점은 여러번 하나의 메소드를 호출할 경우 매번 해석을 요청해야하기 때문에 비효율적이다.JIT(Just-In-Time)인터프리터 방식의 단점을 보완하기 위해 도입된 JIT 컴파일러이다.전체 바이트 코드를 컴파일하고 네이티브 코드로 변경하여 더이상 인터프리팅 하지 않고 네이티브 코드로 직접 실행하는 방식이다.JIT 컴파일러를 사용하는 JVM은 내부적으로 해당 메서드가 자주 수행되는지 체크하고, 일정 정도를 넘을 때 네이티브 코드로 변경한다.&lt; Garbage Collector &gt;메모리 관리를 위한 방법 중의 하나로, Heap 영역 안의 Garbage를 찾아내서 Heap의 메모리를 회수한다.참조되고 있지 않은 객체를 Garbage라고 하며, Garbage를 판별하기 위해 Reachability 개념을 사용한다.한 객체가 다른 객체를 참조하며 다른 객체는 또다른 객체를 참조할 경우에는 유효한 최초의 참조가 무엇인지 파악해야 되는데, 이를 객체 참조의 root set이라고 한다.1.힙 내의 다른 객체에 의한 참조  Java 스택, 즉 Java 메서드 실행 시에 사용하는 지역 변수와 파라미터들에 의한 참조  네이티브 스택, 즉 JNI(Java Native Interface)에 의해 생성된 객체에 대한 참조  메서드 영역의 정적 변수에 의한 참조2, 3, 4번의 참조의 경우 root set이 되어 reachability를 판가름하는 기준이 된다.즉 root set으로부터 시작한 객체들은 reachable이며, root set과 무관한 객체들이 unreachable 객체로 GC의 대상이 된다.메모리 누수 현상컴퓨터 프로그램이 필요하지 않은 메모리를 계속 점유하고 있는 현상이다.메모리 동적 할당시 Heap 영역에 할당되는데, 사용자가 해제하지 않는 경우 Heap 영역 메모리 공간을 계속 차지하게 된다.이는 메모리 부족으로 시스템이 다운될 수도 있는 위험이 있다.Java에서 Garbage Collector가 없다면 메모리 누수의 위험이 높다.&lt; 참조 &gt;http://asfirstalways.tistory.com/158http://mygumi.tistory.com/115?category=648758https://github.com/DaeHeeKim93/DaeHeeKim-Review/tree/master/Java/GC]]></content>
      <categories>
        
          <category> JAVA </category>
        
      </categories>
      <tags>
        
          <tag> JAVA </tag>
        
          <tag> JVM </tag>
        
          <tag> GC </tag>
        
          <tag> Garbage Collector </tag>
        
          <tag> Heap </tag>
        
          <tag> Stack </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[백준/1104 리모콘]]></title>
      <url>/%EB%B0%B1%EC%A4%80/%EB%B8%8C%EB%A3%A8%ED%8A%B8%20%ED%8F%AC%EC%8A%A4/2019/05/11/%EB%B0%B1%EC%A4%80-1104-%EB%A6%AC%EB%AA%A8%EC%BD%98/</url>
      <content type="text"><![CDATA[&lt; 문제 &gt;리모콘 문제는 브루트 포스를 활용하는 문제다.모든 경우의 수를 다 해보고 최소값을 찾으면 된다.2가지로 나눠서 생각하면 쉽게 접근할 수 있다.  초기값 100에서 +, - 만을 활용해 이동할 때 필요한 cnt  새로운 값을 입력받아서 해당 값에서부터 +, -로 이동할 때 필요한 cnt특히 2번의 경우에는 새로운 값이 1자리 숫자 ~ 6자리 숫자까지 가능하는 점을 인지해야 한다.&lt; 소스 코드 &gt;import java.io.*;import java.util.*;public class Main {    public static StringTokenizer stk;    public static StringBuilder sb = new StringBuilder();    public static boolean[] button = new boolean[12];    public static int ans = Integer.MAX_VALUE;    public static int n;    public static void main(String[] args) throws Exception {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        n = Integer.parseInt(br.readLine());        int m = Integer.parseInt(br.readLine());        if (m != 0) stk = new StringTokenizer(br.readLine());        for (int i = 0; i &lt; m; i++) {            String s = stk.nextToken();            if (s.equals("+")) s = "10";            if (s.equals("-")) s = "11";            button[Integer.parseInt(s)] = true;        }        //초기값 100에서 갈 수 있는 최단경로값 계산        if (!button[10] &amp;&amp; (100 - n) &gt;= 0) ans = Math.min(ans, 100 - n);        if (!button[11] &amp;&amp; (n - 100) &gt;= 0) ans = Math.min(ans, n - 100);        //0~9까지 모든 경우의 수 탐색        for (int i = 0; i &lt; 10; i++) {            if (!button[i]) dfs(i, 1, 1);        }        System.out.println(ans);    }    public static int dfs(int num, int len, int cnt) {        if (len &gt; ans) return Integer.MAX_VALUE;    //현재 답보다 커지면 가지치기        if (cnt == 6) {     //6개의 숫자를 골랏을 때            return ans = Math.min(ans, getRes(num, len));        }        for (int i = 0; i &lt; 10; i++) {            if (i == 0) {   //6자리가 아닌 수                dfs(num, len, cnt + 1);            }            if (!button[i]) {   //6자리를 만드는 경우                dfs(num * 10 + i, len + 1, cnt + 1);            }        }        return Integer.MAX_VALUE;    }    public static int getRes(int num, int cnt) {        if (n == num) return cnt;        if (!button[10] &amp;&amp; n &gt; num) return cnt + n - num;        if (!button[11] &amp;&amp; n &lt; num) return cnt + num - n;        return Integer.MAX_VALUE;    }}]]></content>
      <categories>
        
          <category> 백준 </category>
        
          <category> 브루트 포스 </category>
        
      </categories>
      <tags>
        
          <tag> 백준 </tag>
        
          <tag> 백준 1104 </tag>
        
          <tag> 백준 리모콘 </tag>
        
          <tag> 브루트 포스 </tag>
        
          <tag> DFS </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[11번가 SKCT 및 코딩테스트 후기]]></title>
      <url>/%EC%9D%B8%EC%A0%81%EC%84%B1/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/2019/05/11/11%EB%B2%88%EA%B0%80-SKCT-%EB%B0%8F-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%9B%84%EA%B8%B0/</url>
      <content type="text"><![CDATA[&lt; 11번가 인턴 SKCT 및 코딩테스트 후기 &gt;다른 서류는 잘안붙는데 체험형 인턴이라 그런가 붙었다.제출란에 포트폴리오가 선택이였는데 몇개 추가해서 제출한 덕인거같은 느낌..?&lt; SKCT 후기 &gt;처음 보는 SKCT였다.듣기로는 2019 상반기 공채랑 문제가 똑같다고 하던데 본인은 처음이라 잘 모르겠다.총 인원 : 71명응시 : 40명불참 : 31명개발 직군만 불참이 거의 절반가까이 된다.아마도 체험형이고, 다른 기업 시험이 있기 때문에 겹쳐서 대부분 포기한 것이라 생각한다.교재는 위포트를 사용했는데, 실제 시험장에서는 위포트보다 쉬웠다.실행 역량유튜브 보면서 공부(히로와 면접술사)했다.SKCT 실행역량에서 중요한 점은  역할에 맞게 행동한다.  주도적으로 당사자와 되도록 해결한다.  업무상 문제라면 보고해서 조치를 받는다.위 방식대로 풀면 어느정도 감이 잡힌다.실행역량은 겨우 다풀었는데 뒤에 인적성은 10문제 넘게 못푼것 같다.결과가 나와봐야 알 것 같다.&lt; 코딩 테스트 &gt;진행 방식 : 3문제 / 2시간코딩테스트 보는 기업중 복붙을 못하게하는 기업이 있는데, 정말 이해할수가 없다.자바같은경우 오버라이드하면 다적어야하는데..어느 줄에서 오류가 발생한지 알아내는 디버깅마저 힘들었다.1번 문제는 단순 구현문제였는데 별로 어렵지 않았다.2번 문제는 괄호의 값 문제와 유사하다.입력으로 압축된 문자를 주어주고 이를 풀어내는 문제였다. ex) 4(3(h)g) =&gt; hhghhghhghhg여기서 계속 인덱스오류가 나서 못찾고 결국 제출했다.다시 생각해보니 Stack으로 풀면되는 문제였는데.. 아쉬움이 남는다.3번 문제도 네트워크 연결 문제와 상당히 비슷했다.시험 당시에는 Union-Find가 아닌 Dijkstra로 풀었는데, 어디서 꼬였는지 절반만 맞고, 시간초과가 난 상태로 제출했다.한마디로 절반만 맞은셈이니까 틀린문제다.여러 유형을 더 접해봐야 할것 같다.2번문제를 Stack으로 해결한다고 좀더 빨리 생각해야했는데 하는 아쉬움이 남는다.&lt; 결과 &gt;]]></content>
      <categories>
        
          <category> 인적성 </category>
        
          <category> 코딩테스트 </category>
        
      </categories>
      <tags>
        
          <tag> 11번가 </tag>
        
          <tag> 코딩테스트 </tag>
        
          <tag> 인적성 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Highlight Test]]></title>
      <url>/test/guide/2013/12/25/highlight-test/</url>
      <content type="text"><![CDATA[This is a highlight test.Normal blockalert('Hello World!');print 'helloworld'Highlight blockalert( 'Hello, world!' );print 'helloworld'def foo  puts 'foo'enddef foo  puts 'foo'end123def foo  puts 'foo'end#include &lt;iostream&gt;using namespace std;void foo(int arg1, int arg2){}int main(){  string str;  foo(1, 2);  cout &lt;&lt; "Hello World" &lt;&lt; endl;  return 0;}Image TestLocalcd /Users/sophia/Desktop/Github/cs-Devlogbundle exec jekyll server]]></content>
      <categories>
        
          <category> Test </category>
        
          <category> Guide </category>
        
      </categories>
      <tags>
        
          <tag> Test </tag>
        
          <tag> Guide </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
