<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-06-02T16:51:54+09:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Devlog</title><author><name>ChanSu Kim</name></author><entry><title type="html">백준/2138 전구와 스위치</title><link href="http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/30/%EB%B0%B1%EC%A4%80-2138-%EC%A0%84%EA%B5%AC%EC%99%80-%EC%8A%A4%EC%9C%84%EC%B9%98/" rel="alternate" type="text/html" title="백준/2138 전구와 스위치" /><published>2019-05-30T11:11:00+09:00</published><updated>2019-05-30T11:11:00+09:00</updated><id>http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/30/%EB%B0%B1%EC%A4%80%202138%20%EC%A0%84%EA%B5%AC%EC%99%80%20%EC%8A%A4%EC%9C%84%EC%B9%98</id><content type="html" xml:base="http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/30/%EB%B0%B1%EC%A4%80-2138-%EC%A0%84%EA%B5%AC%EC%99%80-%EC%8A%A4%EC%9C%84%EC%B9%98/">&lt;h2 id=&quot;-문제-분석-및-풀이-방법-&quot;&gt;&amp;lt; 문제 분석 및 풀이 방법 &amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2138&quot;&gt;Backjoon :: 전구와 스위치&lt;/a&gt; 문제는 비트마스크 연산으로 구현한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Backtracking으로 앞에서부터 비교하며 모든 경우를 확인한다.&lt;/li&gt;
  &lt;li&gt;스위치를 누르는 과정을 XOR 연산을 활용하면 스위치를 켜고 끄는 구현을 편하게 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;첫 번째 스위치를 누르고 시작하는 경우 / 누르지 않고 시작하는 경우 로 나눠 시작한다.&lt;/li&gt;
  &lt;li&gt;두 번째 스위치부터 n-1 번째 스위치 값과 비교한다.
    &lt;ol&gt;
      &lt;li&gt;input[n-1] == target[n-1] 이라면 스위치를 누르지 않는다.&lt;/li&gt;
      &lt;li&gt;input[n-1] != target[n-1] 이라면 스위치를 누른다.&lt;/li&gt;
      &lt;li&gt;(총 길이 - 1) 번째 까지 반복한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;(총 길이 - 1) 에 접근 시 스위치를 누를 때 / 누르지 않을 때를 비교한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-소스-코드-&quot;&gt;&amp;lt; 소스 코드 &amp;gt;&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Backtracking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Backtracking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Backtracking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// n-1번째 스위치를 누르지 않아도 같은 경우&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// n-1번째 스위치를 누르면 같아지는 경우&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//idx-1번째 스위치가 같으면 스위치를 누를 필요 없다.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Backtracking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//idx번째 스위치 누른 경우&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Backtracking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ChanSu Kim</name></author><category term="백준" /><category term="백준 2138" /><category term="백준 전구와 스위치" /><category term="비트마스크" /><summary type="html">&amp;lt; 문제 분석 및 풀이 방법 &amp;gt; Backjoon :: 전구와 스위치 문제는 비트마스크 연산으로 구현한다. Backtracking으로 앞에서부터 비교하며 모든 경우를 확인한다. 스위치를 누르는 과정을 XOR 연산을 활용하면 스위치를 켜고 끄는 구현을 편하게 할 수 있다. 첫 번째 스위치를 누르고 시작하는 경우 / 누르지 않고 시작하는 경우 로 나눠 시작한다. 두 번째 스위치부터 n-1 번째 스위치 값과 비교한다. input[n-1] == target[n-1] 이라면 스위치를 누르지 않는다. input[n-1] != target[n-1] 이라면 스위치를 누른다. (총 길이 - 1) 번째 까지 반복한다. (총 길이 - 1) 에 접근 시 스위치를 누를 때 / 누르지 않을 때를 비교한다. &amp;lt; 소스 코드 &amp;gt; import java.io.*; import java.util.*; public class Main { public static StringTokenizer stk; public static StringBuilder sb = new StringBuilder(); public static char[] input, target; public static int ans = Integer.MAX_VALUE; public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int n = Integer.parseInt(br.readLine()); input = br.readLine().toCharArray(); target = br.readLine().toCharArray(); Backtracking(1, 0); input[0] ^= 1; input[1] ^= 1; Backtracking(1, 1); System.out.println(ans == Integer.MAX_VALUE ? -1 : ans); } public static void Backtracking(int idx, int cnt) { if (idx == input.length - 1) { // n-1번째 스위치를 누르지 않아도 같은 경우 if (input[idx] == target[idx] &amp;amp;&amp;amp; input[idx - 1] == target[idx - 1]) { ans = Math.min(ans, cnt); return; } // n-1번째 스위치를 누르면 같아지는 경우 if ((input[idx] ^ 1) == target[idx] &amp;amp;&amp;amp; (input[idx - 1] ^ 1) == target[idx - 1]) { ans = Math.min(ans, cnt + 1); return; } else return; } if (input[idx - 1] == target[idx - 1]) //idx-1번째 스위치가 같으면 스위치를 누를 필요 없다. Backtracking(idx + 1, cnt); else { //idx번째 스위치 누른 경우 input[idx] ^= 1; input[idx - 1] ^= 1; input[idx + 1] ^= 1; Backtracking(idx + 1, cnt + 1); input[idx] ^= 1; input[idx - 1] ^= 1; input[idx + 1] ^= 1; } return; } }</summary></entry><entry><title type="html">TCP/IP</title><link href="http://localhost:4000/network/2019/05/29/TCP%EC%99%80-IP/" rel="alternate" type="text/html" title="TCP/IP" /><published>2019-05-29T13:01:00+09:00</published><updated>2019-05-29T13:01:00+09:00</updated><id>http://localhost:4000/network/2019/05/29/TCP%EC%99%80%20IP</id><content type="html" xml:base="http://localhost:4000/network/2019/05/29/TCP%EC%99%80-IP/">&lt;h1 id=&quot;네트워크-용어&quot;&gt;네트워크 용어&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;네트워크 : 컴퓨터끼리 정보를 주고 받을 수 있는 상태를 말한다.&lt;/li&gt;
  &lt;li&gt;프로토콜 : 국가끼리 문제없이 교류할 수 있도록 정해진 규칙&lt;/li&gt;
  &lt;li&gt;TCP/IP : 네트워크 상 송수신을 원할하게 수행하기 위한 규칙으로 데이터 송수신에 관한 일련의 작업을 하나로 모은 것&lt;/li&gt;
  &lt;li&gt;패킷    : 데이터 전송시 데이터를 일정 크기로 잘라서 보내는 방식으로, 보통 1 패킷 = 1024 비트이다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cs-devlog.github.io/network/2019/05/22/OSI-7-Layer/&quot;&gt;&lt;strong&gt;cf) OSI 7 계층&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;tcpip-작동-방식&quot;&gt;TCP/IP 작동 방식&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;[송신자 A] 애플리케이션 층 (HTTP, SMTP, POP3, FTP)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;애플리케이션간 데이터를 주고받기 위해 필요한 정보를 작성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[송신자 A] 트랜스포트 층 (TCP / UDP)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;데이터를 패킷으로 나누고 애플리케이션을 나타내는 번호와 데이터 조합하기 위한 정보를 작성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[송신자 A] 네트워크 층 ( IP )&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;송수신할 컴퓨터 주소와 불명인 경우 데이터를 파기하는 표시 등을 작성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[송신자 A] 데이터링크 층 (Ethernet)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;네트워크 종류에 맞춘 형식으로 수신지 정보 등을 작성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[송신자 A] 물리 층&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;비트열을 신호로 변환해 전송한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[수신자 B] 물리 층&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;신호를 비트열로 변환한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[수신자 B] 데이터링크 층 (Ethernet)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;헤더에 적힌 정보를 확인하고 지정된 프로토콜에게 전달한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[수신자 B] 네트워크 층 ( IP )&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;헤더에 적힌 수신처가 맞는지 확인하고 지정된 프로토콜에게 전달한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[수신자 B] 트랜스포트 층 (TCP / UDP)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;헤더를 확인하고 데이터를 순서대로 나열해 조합한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[수신자 B] 애플리케이션 층 (HTTP, SMTP, POP3, FTP)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;조합된 데이터를 확인한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;tcpip-4-계층---인터넷-모델&quot;&gt;TCP/IP 4 계층 - 인터넷 모델&lt;/h1&gt;
&lt;h2 id=&quot;-응용-계층-&quot;&gt;&amp;lt; 응용 계층 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;컴퓨터끼리의 주고받기를 사용자가 이용할 수 있는 ‘통신 서비스’ 형태로 만드는 것(서버/클라이언트)&lt;/li&gt;
  &lt;li&gt;애플리케이션 헤더 : 요청과 응답에 관한 정보가 들어있는 헤더&lt;/li&gt;
  &lt;li&gt;HTTP 프로토콜 : 하나의 요청에 하나의 응답을 반환하고 연결을 해제하는 방법&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cs-devlog.github.io/network/2019/05/21/HTTP와-REST-API/&quot;&gt;&lt;strong&gt;cf) HTTP 프로토콜과 Cookie/Session&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-전송-계층-&quot;&gt;&amp;lt; 전송 계층 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;애플리케이션 층과 네트워크 층의 중개 역할을 수행&lt;/li&gt;
  &lt;li&gt;TCP 프로토콜과 UDP 프로토콜이 존재한다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cs-devlog.github.io/network/2019/05/22/TCP와-UDP/&quot;&gt;&lt;strong&gt;cf) TCP/UDP 프로토콜 차이점&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-인터넷-계층-&quot;&gt;&amp;lt; 인터넷 계층 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;누가 누구에게 전달할 지를 결정하는 주요 역할, 적절한 루트를 사용해 전달하는 역할(Router)&lt;/li&gt;
  &lt;li&gt;IP 주소 : 인터넷 상의 컴퓨터들을 식별하기 위해 인터넷에 연결된 컴퓨터에 주어지는 숫자&lt;/li&gt;
  &lt;li&gt;IP 프로토콜 : 비커넥션형 프로토콜로 UDP와 동일하다. 신뢰성 있는 IP를 지원하기 위해 ICMP 프로토콜이 있다.&lt;/li&gt;
  &lt;li&gt;ICMP 프로토콜 : 수신인에게 전달되지 않는 등 문제 발생 시 송신자에게 그 사실을 알려주는 메세지를 전송한다.&lt;/li&gt;
  &lt;li&gt;IP 데이터그램 : 트랜스포트 층으로부터 데이터를 받아 IP 헤더를 붙인 것&lt;/li&gt;
  &lt;li&gt;Best Effort 방식 -&amp;gt; 노력은 하지만 결과는 보장하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-네트워크-인터페이스-계층-&quot;&gt;&amp;lt; 네트워크 인터페이스 계층 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 링크 안에서 데이터를 어떻게 주고받을지 결정하는 역할&lt;/li&gt;
  &lt;li&gt;NIC(Network Interface Card)을 통해 비트열 &amp;lt;-&amp;gt; 신호 변환&lt;/li&gt;
  &lt;li&gt;NIC에는 MAC 주소라는 고유 번호가 할당되어 있어 MAC 주소가 일치하는 경우에만 수신자 NIC에서 데이터를 받는다.&lt;/li&gt;
  &lt;li&gt;수신인의 IP 주소만 알고 MAC 주소를 모르는 경우 ARP(Address Resolution Protocol) 프로토콜을 활용한다.
    &lt;ol&gt;
      &lt;li&gt;MAC 주소를 알고싶은 컴퓨터의 IP 주소를 ARP 패킷에 적고 브로드캐스트 MAC 주소 앞으로 보낸다.&lt;/li&gt;
      &lt;li&gt;자신의 IP 주소가 아니라면 파기하고, 자신의 IP 주소라면 MAC 주소를 적은 ARP 패킷을 송신자에게 보낸다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-csma-프로토콜-&quot;&gt;&amp;lt; CSMA 프로토콜 &amp;gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;동시에 네트워크를 사용하고자 할 때 상호충돌을 방지하고자 전송 Bus에 흐르는 신호를 감지하는 프로토콜&lt;/li&gt;
  &lt;li&gt;노드 A에서 네트워크를 전송하기 전에 현재 채널을 사용 여부를 확인해 다중 접근을 방지하는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-csmacd-&quot;&gt;&amp;lt; CSMA/CD &amp;gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;송신 전에 전송매체가 비어 있는지 확인하고(Carrier Sense), 비어 있으면 신호를 전송하고(Multiple Access), 전송 후에 충돌이 있는지 확인(Collision Detection) 하는 방식&lt;/li&gt;
  &lt;li&gt;데이터 프레임 간의 충돌이 발생하는 것을 보완하기 위해 CSMA 방식에 충돌 검증 + 재전송 기능 추가&lt;/li&gt;
  &lt;li&gt;모든 노드가 순서와 규칙 없이 경쟁하여 선로를 점유하는 방식으로 토큰 버스, 토큰 링은 각 노드에 차례로 점유할 기회를 주는 순차적 할당 방식&lt;/li&gt;
  &lt;li&gt;전송량이 적을 때 효율적이고 버스형 LAN에 가장 일반적으로 이용&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;송신하기 전에 송신중인 다른 노드가 없는지 조사한다.&lt;/li&gt;
  &lt;li&gt;MAC 주소 b 앞으로 데이터를 전송한다.&lt;/li&gt;
  &lt;li&gt;자기 앞으로 온 데이터일 경우 회수, 아닐 경우 파기한다.&lt;/li&gt;
  &lt;li&gt;충돌을 감지했을 때는 잠시 후 다시 전송한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;csmaca-&quot;&gt;&amp;lt;CSMA/CA &amp;gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;CSMA 방식 기반에 RTS와 CTS를 사전에 주고 받음으로써 전송할 시간을 미리 예약하여 충돌을 미연에 방지하는 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;</content><author><name>ChanSu Kim</name></author><category term="Network" /><category term="TCP" /><category term="IP" /><category term="프로토콜" /><summary type="html">네트워크 용어 네트워크 : 컴퓨터끼리 정보를 주고 받을 수 있는 상태를 말한다. 프로토콜 : 국가끼리 문제없이 교류할 수 있도록 정해진 규칙 TCP/IP : 네트워크 상 송수신을 원할하게 수행하기 위한 규칙으로 데이터 송수신에 관한 일련의 작업을 하나로 모은 것 패킷 : 데이터 전송시 데이터를 일정 크기로 잘라서 보내는 방식으로, 보통 1 패킷 = 1024 비트이다. cf) OSI 7 계층 TCP/IP 작동 방식 [송신자 A] 애플리케이션 층 (HTTP, SMTP, POP3, FTP) 애플리케이션간 데이터를 주고받기 위해 필요한 정보를 작성한다. [송신자 A] 트랜스포트 층 (TCP / UDP) 데이터를 패킷으로 나누고 애플리케이션을 나타내는 번호와 데이터 조합하기 위한 정보를 작성한다. [송신자 A] 네트워크 층 ( IP ) 송수신할 컴퓨터 주소와 불명인 경우 데이터를 파기하는 표시 등을 작성한다. [송신자 A] 데이터링크 층 (Ethernet) 네트워크 종류에 맞춘 형식으로 수신지 정보 등을 작성한다. [송신자 A] 물리 층 비트열을 신호로 변환해 전송한다. [수신자 B] 물리 층 신호를 비트열로 변환한다. [수신자 B] 데이터링크 층 (Ethernet) 헤더에 적힌 정보를 확인하고 지정된 프로토콜에게 전달한다. [수신자 B] 네트워크 층 ( IP ) 헤더에 적힌 수신처가 맞는지 확인하고 지정된 프로토콜에게 전달한다. [수신자 B] 트랜스포트 층 (TCP / UDP) 헤더를 확인하고 데이터를 순서대로 나열해 조합한다. [수신자 B] 애플리케이션 층 (HTTP, SMTP, POP3, FTP) 조합된 데이터를 확인한다. TCP/IP 4 계층 - 인터넷 모델 &amp;lt; 응용 계층 &amp;gt; 컴퓨터끼리의 주고받기를 사용자가 이용할 수 있는 ‘통신 서비스’ 형태로 만드는 것(서버/클라이언트) 애플리케이션 헤더 : 요청과 응답에 관한 정보가 들어있는 헤더 HTTP 프로토콜 : 하나의 요청에 하나의 응답을 반환하고 연결을 해제하는 방법 cf) HTTP 프로토콜과 Cookie/Session &amp;lt; 전송 계층 &amp;gt; 애플리케이션 층과 네트워크 층의 중개 역할을 수행 TCP 프로토콜과 UDP 프로토콜이 존재한다. cf) TCP/UDP 프로토콜 차이점 &amp;lt; 인터넷 계층 &amp;gt; 누가 누구에게 전달할 지를 결정하는 주요 역할, 적절한 루트를 사용해 전달하는 역할(Router) IP 주소 : 인터넷 상의 컴퓨터들을 식별하기 위해 인터넷에 연결된 컴퓨터에 주어지는 숫자 IP 프로토콜 : 비커넥션형 프로토콜로 UDP와 동일하다. 신뢰성 있는 IP를 지원하기 위해 ICMP 프로토콜이 있다. ICMP 프로토콜 : 수신인에게 전달되지 않는 등 문제 발생 시 송신자에게 그 사실을 알려주는 메세지를 전송한다. IP 데이터그램 : 트랜스포트 층으로부터 데이터를 받아 IP 헤더를 붙인 것 Best Effort 방식 -&amp;gt; 노력은 하지만 결과는 보장하지 않는다. &amp;lt; 네트워크 인터페이스 계층 &amp;gt; 데이터 링크 안에서 데이터를 어떻게 주고받을지 결정하는 역할 NIC(Network Interface Card)을 통해 비트열 &amp;lt;-&amp;gt; 신호 변환 NIC에는 MAC 주소라는 고유 번호가 할당되어 있어 MAC 주소가 일치하는 경우에만 수신자 NIC에서 데이터를 받는다. 수신인의 IP 주소만 알고 MAC 주소를 모르는 경우 ARP(Address Resolution Protocol) 프로토콜을 활용한다. MAC 주소를 알고싶은 컴퓨터의 IP 주소를 ARP 패킷에 적고 브로드캐스트 MAC 주소 앞으로 보낸다. 자신의 IP 주소가 아니라면 파기하고, 자신의 IP 주소라면 MAC 주소를 적은 ARP 패킷을 송신자에게 보낸다. &amp;lt; CSMA 프로토콜 &amp;gt; 동시에 네트워크를 사용하고자 할 때 상호충돌을 방지하고자 전송 Bus에 흐르는 신호를 감지하는 프로토콜 노드 A에서 네트워크를 전송하기 전에 현재 채널을 사용 여부를 확인해 다중 접근을 방지하는 방법 &amp;lt; CSMA/CD &amp;gt; 송신 전에 전송매체가 비어 있는지 확인하고(Carrier Sense), 비어 있으면 신호를 전송하고(Multiple Access), 전송 후에 충돌이 있는지 확인(Collision Detection) 하는 방식 데이터 프레임 간의 충돌이 발생하는 것을 보완하기 위해 CSMA 방식에 충돌 검증 + 재전송 기능 추가 모든 노드가 순서와 규칙 없이 경쟁하여 선로를 점유하는 방식으로 토큰 버스, 토큰 링은 각 노드에 차례로 점유할 기회를 주는 순차적 할당 방식 전송량이 적을 때 효율적이고 버스형 LAN에 가장 일반적으로 이용 송신하기 전에 송신중인 다른 노드가 없는지 조사한다. MAC 주소 b 앞으로 데이터를 전송한다. 자기 앞으로 온 데이터일 경우 회수, 아닐 경우 파기한다. 충돌을 감지했을 때는 잠시 후 다시 전송한다. &amp;lt;CSMA/CA &amp;gt; CSMA 방식 기반에 RTS와 CTS를 사전에 주고 받음으로써 전송할 시간을 미리 예약하여 충돌을 미연에 방지하는 방식</summary></entry><entry><title type="html">백준/10779 쇠막대기</title><link href="http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/29/%EB%B0%B1%EC%A4%80-10779-%EC%87%A0%EB%A7%89%EB%8C%80%EA%B8%B0/" rel="alternate" type="text/html" title="백준/10779 쇠막대기" /><published>2019-05-29T11:11:00+09:00</published><updated>2019-05-29T11:11:00+09:00</updated><id>http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/29/%EB%B0%B1%EC%A4%80%2010779%20%EC%87%A0%EB%A7%89%EB%8C%80%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/29/%EB%B0%B1%EC%A4%80-10779-%EC%87%A0%EB%A7%89%EB%8C%80%EA%B8%B0/">&lt;h2 id=&quot;-문제-분석-및-풀이-방법-&quot;&gt;&amp;lt; 문제 분석 및 풀이 방법 &amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/10799&quot;&gt;Backjoon :: 쇠막대기&lt;/a&gt; 문제는 Stack 자료구조를 활용해 풀 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;입력 받은 문자열을 하나씩 탐색하면서 ‘(‘ 일때와 ‘)’로 나누어 생각한다.&lt;/li&gt;
  &lt;li&gt;’(‘ 문자라면 Stack에 추가한다.&lt;/li&gt;
  &lt;li&gt;’)’ 문자라면 바로 앞에 ‘(‘ 문자가 오는지 확인한다. (레이저인지 여부를 확인하기 위해)
    &lt;ul&gt;
      &lt;li&gt;만약 레이저라면 Stack 크기만큼 더해준다. (레이저로 나누면 Stack 크기만큼 레이저 왼쪽에 막대기가 생기기 때문!)&lt;/li&gt;
      &lt;li&gt;만약 막대기 끝이라면 막대기 갯수인 1개를 더해준다.    (끝부분 막대기를 더해준다)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-소스-코드-&quot;&gt;&amp;lt; 소스 코드 &amp;gt;&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;//')' 문자 제거&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//만약 레이저라면&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//레이저 왼쪽 막대 갯수를 더한다&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;//막대의 끝이라면&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;//자기 자신 막대를 더한다&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ChanSu Kim</name></author><category term="백준" /><category term="백준 10779" /><category term="백준 쇠막대기" /><category term="Stack" /><category term="스텍" /><summary type="html">&amp;lt; 문제 분석 및 풀이 방법 &amp;gt; Backjoon :: 쇠막대기 문제는 Stack 자료구조를 활용해 풀 수 있다. 입력 받은 문자열을 하나씩 탐색하면서 ‘(‘ 일때와 ‘)’로 나누어 생각한다. ’(‘ 문자라면 Stack에 추가한다. ’)’ 문자라면 바로 앞에 ‘(‘ 문자가 오는지 확인한다. (레이저인지 여부를 확인하기 위해) 만약 레이저라면 Stack 크기만큼 더해준다. (레이저로 나누면 Stack 크기만큼 레이저 왼쪽에 막대기가 생기기 때문!) 만약 막대기 끝이라면 막대기 갯수인 1개를 더해준다. (끝부분 막대기를 더해준다) &amp;lt; 소스 코드 &amp;gt; import java.io.*; import java.util.*; public class Main { public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); char[] target = br.readLine().toCharArray(); Stack&amp;lt;Character&amp;gt; stack = new Stack&amp;lt;&amp;gt;(); int ans = 0; for (int i = 0; i &amp;lt; target.length; i++) { char ch = target[i]; if (ch == '(') { stack.push(target[i]); continue; } stack.pop(); //')' 문자 제거 if (target[i - 1] == '(') { //만약 레이저라면 ans += stack.size(); //레이저 왼쪽 막대 갯수를 더한다 } else { //막대의 끝이라면 ans += 1; //자기 자신 막대를 더한다 } } System.out.println(ans); } }</summary></entry><entry><title type="html">정렬 알고리즘</title><link href="http://localhost:4000/algorithm/2019/05/29/%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/" rel="alternate" type="text/html" title="정렬 알고리즘" /><published>2019-05-29T00:01:11+09:00</published><updated>2019-05-29T00:01:11+09:00</updated><id>http://localhost:4000/algorithm/2019/05/29/%EC%A0%95%EB%A0%AC%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98</id><content type="html" xml:base="http://localhost:4000/algorithm/2019/05/29/%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">&lt;h1 id=&quot;버블-정렬bubble-sort&quot;&gt;버블 정렬(Bubble Sort)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/BubbleSort1.png&quot; alt=&quot;BubbleSort&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인접한 두 숫자를 비교해서 변경하는 방법&lt;/li&gt;
  &lt;li&gt;오른쪽부터 최대값/최소값을 정렬해 나가는 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BubbleSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;선택-정렬selection-sort&quot;&gt;선택 정렬(Selection Sort)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/SelectionSort.png&quot; alt=&quot;SelectionSort&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;자신보다 뒤에있는 숫자들 중 가장 작은 숫자를 발견해서 맨 앞에서부터 채우는 정렬&lt;/li&gt;
  &lt;li&gt;왼쪽부터 최대값/최소값을 정렬해 나가는 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SelectionSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;삽입-정렬insertion-sort&quot;&gt;삽입 정렬(Insertion Sort)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/InsertionSort.png&quot; alt=&quot;InsertionSort&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;i번째 배열 값부터 앞으로 탐색하며 자신보다 작다면 swap하는 정렬&lt;/li&gt;
  &lt;li&gt;n번째 수행시 n번째 까지 정렬되는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InsertioinSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;퀵-정렬quick-sort&quot;&gt;퀵 정렬(Quick Sort)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;pivot을 정하고 pivot 좌/우를 정렬하면서 전체 배열을 정렬&lt;/li&gt;
  &lt;li&gt;자바에서 Arrays.sort를 사용하변 내부는 Quick Sort로 구현되어있다.&lt;/li&gt;
  &lt;li&gt;평균 O(nlogn) 이지만 최악에 O(n^2) 이므로 데이터가 많은 경우 조심해야 한다.&lt;/li&gt;
  &lt;li&gt;최악의 경우란 아이러니하게도 정렬된 경우를 의미한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-작동-방식-&quot;&gt;&amp;lt; 작동 방식 &amp;gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/QuickSort_1.png&quot; alt=&quot;web_process&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;pivot을 가운데 값으로 설정하고 Left, Right 를 각 끝의 idx를 지정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/QuickSort_2.png&quot; alt=&quot;web_process&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;num[left] &amp;gt; pivot, num[right] &amp;lt; pivot 조건을 만족할 때까지 left, right를 움직인다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/QuickSort_3.png&quot; alt=&quot;web_process&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;둘의 위치를 바꾼다. 이렇게 되면 pivot 왼쪽에는 pivot보다 작은 값, 오른쪽에는 큰값이 정렬된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-소스-코드-&quot;&gt;&amp;lt; 소스 코드 &amp;gt;&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;QuickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QuickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QuickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;합병-정렬merge-sort&quot;&gt;합병 정렬(Merge Sort)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;합병 정렬은 O(nlogn) 의 시간복잡도를 보장한다.&lt;/li&gt;
  &lt;li&gt;단점은 임시 배열 공간이 추가로 필요하다는 점이다.&lt;/li&gt;
  &lt;li&gt;분할 정복으로 구현하는데 배열을 최대한 나누고, 합병하면서 값을 비교해 정렬하는 방식이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-작동-방식--1&quot;&gt;&amp;lt; 작동 방식 &amp;gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/MergeSort_1.png&quot; alt=&quot;web_process&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;left = start, right = mid+1로 설정하고 서로 비교해 작은 값을 data에 덮어씌운다.
&lt;img src=&quot;/assets/images/MergeSort_2.png&quot; alt=&quot;web_process&quot; width=&quot;300&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;left를 한칸 이동하고 작은 값을 data에 덮어씌운다.
&lt;img src=&quot;/assets/images/MergeSort_3.png&quot; alt=&quot;web_process&quot; width=&quot;300&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;right를 한칸 이동하고 작은 값을 data에 덮어씌운다.
&lt;img src=&quot;/assets/images/MergeSort_4.png&quot; alt=&quot;web_process&quot; width=&quot;300&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;right가 배열의 끝에 도달했기 때문에 남은 left를 data에 덮어씌운다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;-소스-코드--1&quot;&gt;&amp;lt; 소스 코드 &amp;gt;&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//tmp 배열에 값을 옮긴다.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//num 배열에 비교하면서 저장&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//어느 한쪽에 남은 tmp 배열을 num 배열에 저장&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ChanSu Kim</name></author><category term="Algorithm" /><category term="Sort" /><category term="Bubble Sort" /><category term="Selection Sort" /><category term="Insertion Sort" /><category term="Quick Sort" /><category term="Merge Sort" /><summary type="html">버블 정렬(Bubble Sort) 인접한 두 숫자를 비교해서 변경하는 방법 오른쪽부터 최대값/최소값을 정렬해 나가는 방식 public void BubbleSort(int[] num) { for (int i = 0; i &amp;lt; num.length; i++) { for (int j = 1; j &amp;lt; num.length - i; j++) { if (num[j] &amp;lt; num[j - 1]) swap(j - 1, j, num); } } } 선택 정렬(Selection Sort) 자신보다 뒤에있는 숫자들 중 가장 작은 숫자를 발견해서 맨 앞에서부터 채우는 정렬 왼쪽부터 최대값/최소값을 정렬해 나가는 방식 public void SelectionSort(int[] num) { for (int i = 0; i &amp;lt; num.length; i++) { int min = i; for (int j = i + 1; j &amp;lt; num.length; j++) { if (num[min] &amp;gt; num[j]) min = j; } if (num[min] &amp;lt; num[i]) swap(min, i, num); } } 삽입 정렬(Insertion Sort) i번째 배열 값부터 앞으로 탐색하며 자신보다 작다면 swap하는 정렬 n번째 수행시 n번째 까지 정렬되는 방법 public void InsertioinSort(int[] num) { for (int i = 1; i &amp;lt; num.length; i++) { int tmp = num[i]; for (int j = i - 1; j &amp;gt;= 0; j--) { if (tmp &amp;lt; num[j]) { num[j + 1] = num[j]; num[j] = tmp; } } } } 퀵 정렬(Quick Sort) pivot을 정하고 pivot 좌/우를 정렬하면서 전체 배열을 정렬 자바에서 Arrays.sort를 사용하변 내부는 Quick Sort로 구현되어있다. 평균 O(nlogn) 이지만 최악에 O(n^2) 이므로 데이터가 많은 경우 조심해야 한다. 최악의 경우란 아이러니하게도 정렬된 경우를 의미한다. &amp;lt; 작동 방식 &amp;gt; pivot을 가운데 값으로 설정하고 Left, Right 를 각 끝의 idx를 지정한다. num[left] &amp;gt; pivot, num[right] &amp;lt; pivot 조건을 만족할 때까지 left, right를 움직인다. 둘의 위치를 바꾼다. 이렇게 되면 pivot 왼쪽에는 pivot보다 작은 값, 오른쪽에는 큰값이 정렬된다. &amp;lt; 소스 코드 &amp;gt; public int partition(int left, int right, int[] num) { int pivot = num[(left + right) / 2]; while (left &amp;lt;= right) { while (num[left] &amp;lt; pivot) left++; while (num[right] &amp;gt; pivot) right--; if (left &amp;lt;= right) { swap(left, right, num); left++; right--; } } return left; } public void QuickSort(int left, int right, int[] num) { if (left &amp;lt; right) { int pivot = partition(left, right, num); if (left &amp;lt; pivot - 1) QuickSort(left, pivot - 1, num); if (right &amp;gt; pivot) QuickSort(pivot, right, num); } } 합병 정렬(Merge Sort) 합병 정렬은 O(nlogn) 의 시간복잡도를 보장한다. 단점은 임시 배열 공간이 추가로 필요하다는 점이다. 분할 정복으로 구현하는데 배열을 최대한 나누고, 합병하면서 값을 비교해 정렬하는 방식이다. &amp;lt; 작동 방식 &amp;gt; left = start, right = mid+1로 설정하고 서로 비교해 작은 값을 data에 덮어씌운다. left를 한칸 이동하고 작은 값을 data에 덮어씌운다. right를 한칸 이동하고 작은 값을 data에 덮어씌운다. right가 배열의 끝에 도달했기 때문에 남은 left를 data에 덮어씌운다. &amp;lt; 소스 코드 &amp;gt; public void mergeSort(int start, int end) { if (start &amp;lt; end) { int mid = (start + end) / 2; mergeSort(start, mid); mergeSort(mid + 1, end); merge(start, mid, end); } } public void merge(int start, int mid, int end) { for (int i = start; i &amp;lt;= end; i++) { tmp[i] = num[i]; //tmp 배열에 값을 옮긴다. } int left = start; int right = mid + 1; int idx = start; while (left &amp;lt;= mid &amp;amp;&amp;amp; right &amp;lt;= end) { //num 배열에 비교하면서 저장 if (tmp[left] &amp;gt;= tmp[right]) { num[idx++] = tmp[right++]; } else { num[idx++] = tmp[left++]; } } //어느 한쪽에 남은 tmp 배열을 num 배열에 저장 while (left &amp;lt;= mid) num[idx++] = tmp[left++]; while (right &amp;lt;= end) num[idx++] = tmp[right++]; }</summary></entry><entry><title type="html">데이터베이스 고급 기능</title><link href="http://localhost:4000/database/2019/05/29/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EA%B3%A0%EA%B8%89-%EA%B8%B0%EB%8A%A5/" rel="alternate" type="text/html" title="데이터베이스 고급 기능" /><published>2019-05-29T00:01:00+09:00</published><updated>2019-05-29T00:01:00+09:00</updated><id>http://localhost:4000/database/2019/05/29/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%20%EA%B3%A0%EA%B8%89%20%EA%B8%B0%EB%8A%A5</id><content type="html" xml:base="http://localhost:4000/database/2019/05/29/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EA%B3%A0%EA%B8%89-%EA%B8%B0%EB%8A%A5/">&lt;h1 id=&quot;트랜잭션&quot;&gt;트랜잭션&lt;/h1&gt;
&lt;h2 id=&quot;-트랜잭션-정의-&quot;&gt;&amp;lt; 트랜잭션 정의 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;한꺼번에 모두 수행되어야 할 일련의 연산들&lt;/li&gt;
  &lt;li&gt;병행 제어 및 회복 작업시 처리되는 작업의 논리적 단위&lt;/li&gt;
  &lt;li&gt;하나의 트랜잭션은 Commit / RollBack된다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-트랜잭션-특징acid-&quot;&gt;&amp;lt; 트랜잭션 특징(ACID) &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;원자성(Automicity)    : Do or Nothing, 트랜잭션 내의 모든 명령은 완벽히 수행되거나 전부가 취소되어야 한다.&lt;/li&gt;
  &lt;li&gt;일관성(Consistency)   : 트랜잭션 실행이 성공적으로 완료되면 일관성 있는 데이터베이스의 상태는 일관되어야 한다.&lt;/li&gt;
  &lt;li&gt;독립성(Isolation)     : 어느 하나의 트랜잭션 실행중에 다른 트랜잭션 연산이 끼어들 수 없다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;지속성(Durability)    : 완료된 트랜잭션은 시스템의 고장나도 영구적으로 반영되어야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Commit 연산 : 한개의 트랜잭션에 대한 작업이 성공적으로 끝났고, 데이터베이스가 일관된 상태에 있을 때 이 트랜잭션이 수행한 연산이 완료됨을 알려주는 연산&lt;/li&gt;
  &lt;li&gt;Rollback 연산 : 하나의 트랜잭션 처리가 비정상적으로 종료되어 데이터베이스의 일관성을 깨뜨렸을 때, 트랜잭션의 원자성을 구현하기 위해 이 트랜잭션이 수행한 모든 연산을 Undo하는 연산이다.
    &lt;ul&gt;
      &lt;li&gt;Redo : 고장 발생 전, 트랜잭션이 완료 명령을 수행했다면 로그를 이용해 복원하고 Check Point 이후부터 다시 수행하는 방식&lt;/li&gt;
      &lt;li&gt;Undo : 고장 발생 전, 트랜잭션이 완료 명령을 수행하지 못했다면 DB에 반영된 갱신 사항을 처음까지 취소&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;병행제어-기법&quot;&gt;병행제어 기법&lt;/h1&gt;
&lt;h2 id=&quot;-병행제어의-목적-&quot;&gt;&amp;lt; 병행제어의 목적 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스 공유를 최대화한다.&lt;/li&gt;
  &lt;li&gt;시스템 활용도를 최대화한다.&lt;/li&gt;
  &lt;li&gt;데이터베이스 일관성을 유지한다.&lt;/li&gt;
  &lt;li&gt;사용자 응답 시간을 최소화한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-로킹locking-기법-&quot;&gt;&amp;lt; 로킹(Locking) 기법 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션들이 어떤 로킹 단위를 액세스하기 전에 Lock을 요청해서 Lock이 허락되야 그 로킹 단위를 액세스 하는 기법&lt;/li&gt;
  &lt;li&gt;로킹 단위 : 병행제어에서 한꺼번에 로킹할 수 있는 객체의 크기를 의미하며 로킹의 단위가 크면 로크 수가 작아 관리하기 쉽지만 병행성 수준이 낮아진다.
    &lt;ul&gt;
      &lt;li&gt;로킹 단위가 크면 lock 개수가 적어 관리하기 쉽지만 병행성 수준이 낮아진다.&lt;/li&gt;
      &lt;li&gt;로킹 단위가 작으면 lock 개수가 많아 관리하기는 복잡하지만 병행성 수준이 높아진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터를 갱신할 때 잠금(Lock) → 실행(Execute) → 해제(Unlock)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;교착상태(Deadlock)&lt;/strong&gt; : Lock상태가 오래 유지되어 다른 Transaction들이 더이상 진행하지 못하고 무한정 대기상태를 뜻한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;공유 잠금(Shared-Lock)&lt;/strong&gt; : 한 트랜잭션이 데이터 x에 lock-S 를 걸면 다른 트랜잭션은 데이터 x에 대해 read 가능 / write 불가능&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;배타 잠금(Exclusive-Lock)&lt;/strong&gt; : 한 트랜잭션이 데이터 x에 lock-X 를 걸면 다른 트랜잭션은 데이터 x에 대해 read 불가능 / write 불가능&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;공유 잠금&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;배타 잠금&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;공유 잠금&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;접근 허용&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;대기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;배타 잠금&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;대기&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;대기&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;-2-단계-잠금-규약two-phase-lock-protocol-기법-&quot;&gt;&amp;lt; 2-단계 잠금 규약(Two-Phase Lock Protocol) 기법 &amp;gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션 스케쥴의 직렬성을 보장하는 대표적인 기법&lt;/li&gt;
  &lt;li&gt;확장 단계(Growing Phase)
    &lt;ul&gt;
      &lt;li&gt;Lock을 설정하는 단계, 해제 불가&lt;/li&gt;
      &lt;li&gt;새로운 lock 연산만 수행할 수 있고 unlock 연산은 수행할 수 없는 단계&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;축소 단계(Shirinking Phase)
    &lt;ul&gt;
      &lt;li&gt;Lock을 해제하는 단계, 잠금 불가&lt;/li&gt;
      &lt;li&gt;unlock 연산만 실행할 수 있고 일단 unlock 연산을 실행하면 lock 연산은 실행할 수 없는 단계&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;장점 : 직렬성 보장 / 단점 : 교착 상태 예방 불가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-타임-스탬프time-stamp-ordering-기법-&quot;&gt;&amp;lt; 타임 스탬프(Time Stamp Ordering) 기법 &amp;gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;시스템에 도착한 순서대로 타임 스탬프를 부여하여, 순서대로 실행하도록 한다.&lt;/li&gt;
  &lt;li&gt;교착 상태가 발생하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-로킹-규약-&quot;&gt;&amp;lt; 로킹 규약 &amp;gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;트랜잭션 T가 read(x)나 write(x) 연산을 하려면 반드시 먼저 lock(x) 연산을 실행해야 한다.&lt;/li&gt;
  &lt;li&gt;트랜잭션 T가 실행한 lock(x)에 대해서는 T가 모든 실행을 종료하기 전에 반드시 unlock(x)을 실행시켜야 한다.&lt;/li&gt;
  &lt;li&gt;다른 트랜잭션에 의해 이미 x에 lock이 걸려있다면 다시 lock(x)를 실행할 수 없다.&lt;/li&gt;
  &lt;li&gt;트랜잭션 T가 lock(x)를 실행하지 않았다면 T가 unlock(x)를 실행할 수 없다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;무결성&quot;&gt;무결성&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;무결성&lt;/strong&gt; : 데이터의 정확성과 일관성을 유지하고 보증하는 것
    &lt;ul&gt;
      &lt;li&gt;고유 무결성 : 릴레이션의 특정 속성에 대해서 각 튜플이 갖는 값들이 서로 달라야 한다.&lt;/li&gt;
      &lt;li&gt;개체 무결성 : 릴레이션에서 기본키를 구성하는 속성은 NULL 값이나 중복값을 가질 수 없다.&lt;/li&gt;
      &lt;li&gt;참조 무결성 : 외래키 값은 NULL 이거나 참조 릴레이션의 기본키 값과 동일해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;cf) 정확성 : 데이터베이스의 저장된 데이터 값과 현실 세계의 실제값이 일치하는 정도&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;보안&quot;&gt;보안&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스의 일부분 또는 전체에 대해서 권한이 없는 사용자가 엑세스하는 것을 금지하기 위한 기술&lt;/li&gt;
  &lt;li&gt;데이터베이스 사용자들은 일반적으로 서로 다른 객체에 대해 다른 접근 권리/권한을 갖게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-암호화-기법-&quot;&gt;&amp;lt; 암호화 기법 &amp;gt;&lt;/h2&gt;
&lt;h3 id=&quot;-개인키-암호-방식--대칭형-암호-알고리즘-&quot;&gt;&amp;lt; 개인키 암호 방식 = 대칭형 암호 알고리즘 &amp;gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;동일한 키로 데이터 암호화/복호화 진행&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;수신자에게 키를 전달하는 방법
    &lt;ul&gt;
      &lt;li&gt;Key를 비대칭형 암호 알고리즘을 이용하여 암호화 시킨 후 전송&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;실제 Key를 전송하지 않고도 A와 B가 동일한 Key를 생성할 수 있도록 하는 Diffie-Hellman 알고리즘 사용&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;-공개키-암호-방식--비대칭형-암호-알고리즘-&quot;&gt;&amp;lt; 공개키 암호 방식 = 비대칭형 암호 알고리즘 &amp;gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;A는 공개키(public key)와 개인키(private key) 를 생성한다.
    &lt;ul&gt;
      &lt;li&gt;A의 공개키를 이용하여 암호화된 데이터는 A의 개인키로만 복호화가 가능하다.&lt;/li&gt;
      &lt;li&gt;A의 개인키를 이용하여 암호화된 데이터는 A의 공개키로만 복호화가 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A와 B는 각자의 공개키를 서로에게 알려준다.
    &lt;ul&gt;
      &lt;li&gt;A : 공개A키, 개인A키, 공개B키&lt;/li&gt;
      &lt;li&gt;B : 공개B키, 개인B키, 공개A키&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A는 B에게 데이터를 전송하기 위해 B의 공개B키를 이용하여 데이터를 암호화한 후 전송한다&lt;/li&gt;
  &lt;li&gt;암호화된 데이터는 개인B키를 가지고 있는 B만 해독할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;-권한-부여-기법-&quot;&gt;&amp;lt; 권한 부여 기법 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;GRANT : 권한 부여 명령
    &lt;ul&gt;
      &lt;li&gt;GRANT 사용자 등급 TO 사용자 ID 리스트&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;REVOKE : 권한 취소 명령
    &lt;ul&gt;
      &lt;li&gt;REVOKE 사용자 등급 FROM 사용자 ID 리스트&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;분산-데이터베이스&quot;&gt;분산 데이터베이스&lt;/h1&gt;
&lt;h2 id=&quot;-분산-데이터베이스-정의-&quot;&gt;&amp;lt; 분산 데이터베이스 정의 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;논리적으로는 하나의 시스템에 속하지만 물리적으로는 네트워크를 통해 여러 개의 사이트에 분산되어 있는 데이터베이스&lt;/li&gt;
  &lt;li&gt;장점 : 자료의 공유성 향상, 시스템 성능 향상, 신뢰성 및 가용성이 높다&lt;/li&gt;
  &lt;li&gt;단점 : DBMS가 수행할 기능이 복잡, DB설계가 복잡, 소프트웨어 개발 비용이 증가&lt;/li&gt;
&lt;/ul&gt;</content><author><name>ChanSu Kim</name></author><category term="Database" /><category term="트랜잭션" /><category term="ACID" /><category term="병행 제어" /><category term="무결성" /><summary type="html">트랜잭션 &amp;lt; 트랜잭션 정의 &amp;gt; 한꺼번에 모두 수행되어야 할 일련의 연산들 병행 제어 및 회복 작업시 처리되는 작업의 논리적 단위 하나의 트랜잭션은 Commit / RollBack된다 &amp;lt; 트랜잭션 특징(ACID) &amp;gt; 원자성(Automicity) : Do or Nothing, 트랜잭션 내의 모든 명령은 완벽히 수행되거나 전부가 취소되어야 한다. 일관성(Consistency) : 트랜잭션 실행이 성공적으로 완료되면 일관성 있는 데이터베이스의 상태는 일관되어야 한다. 독립성(Isolation) : 어느 하나의 트랜잭션 실행중에 다른 트랜잭션 연산이 끼어들 수 없다. 지속성(Durability) : 완료된 트랜잭션은 시스템의 고장나도 영구적으로 반영되어야 한다. Commit 연산 : 한개의 트랜잭션에 대한 작업이 성공적으로 끝났고, 데이터베이스가 일관된 상태에 있을 때 이 트랜잭션이 수행한 연산이 완료됨을 알려주는 연산 Rollback 연산 : 하나의 트랜잭션 처리가 비정상적으로 종료되어 데이터베이스의 일관성을 깨뜨렸을 때, 트랜잭션의 원자성을 구현하기 위해 이 트랜잭션이 수행한 모든 연산을 Undo하는 연산이다. Redo : 고장 발생 전, 트랜잭션이 완료 명령을 수행했다면 로그를 이용해 복원하고 Check Point 이후부터 다시 수행하는 방식 Undo : 고장 발생 전, 트랜잭션이 완료 명령을 수행하지 못했다면 DB에 반영된 갱신 사항을 처음까지 취소 병행제어 기법 &amp;lt; 병행제어의 목적 &amp;gt; 데이터베이스 공유를 최대화한다. 시스템 활용도를 최대화한다. 데이터베이스 일관성을 유지한다. 사용자 응답 시간을 최소화한다. &amp;lt; 로킹(Locking) 기법 &amp;gt; 트랜잭션들이 어떤 로킹 단위를 액세스하기 전에 Lock을 요청해서 Lock이 허락되야 그 로킹 단위를 액세스 하는 기법 로킹 단위 : 병행제어에서 한꺼번에 로킹할 수 있는 객체의 크기를 의미하며 로킹의 단위가 크면 로크 수가 작아 관리하기 쉽지만 병행성 수준이 낮아진다. 로킹 단위가 크면 lock 개수가 적어 관리하기 쉽지만 병행성 수준이 낮아진다. 로킹 단위가 작으면 lock 개수가 많아 관리하기는 복잡하지만 병행성 수준이 높아진다. 데이터를 갱신할 때 잠금(Lock) → 실행(Execute) → 해제(Unlock) 교착상태(Deadlock) : Lock상태가 오래 유지되어 다른 Transaction들이 더이상 진행하지 못하고 무한정 대기상태를 뜻한다 공유 잠금(Shared-Lock) : 한 트랜잭션이 데이터 x에 lock-S 를 걸면 다른 트랜잭션은 데이터 x에 대해 read 가능 / write 불가능 배타 잠금(Exclusive-Lock) : 한 트랜잭션이 데이터 x에 lock-X 를 걸면 다른 트랜잭션은 데이터 x에 대해 read 불가능 / write 불가능   공유 잠금 배타 잠금 공유 잠금 접근 허용 대기 배타 잠금 대기 대기 &amp;lt; 2-단계 잠금 규약(Two-Phase Lock Protocol) 기법 &amp;gt; 트랜잭션 스케쥴의 직렬성을 보장하는 대표적인 기법 확장 단계(Growing Phase) Lock을 설정하는 단계, 해제 불가 새로운 lock 연산만 수행할 수 있고 unlock 연산은 수행할 수 없는 단계 축소 단계(Shirinking Phase) Lock을 해제하는 단계, 잠금 불가 unlock 연산만 실행할 수 있고 일단 unlock 연산을 실행하면 lock 연산은 실행할 수 없는 단계 장점 : 직렬성 보장 / 단점 : 교착 상태 예방 불가능 &amp;lt; 타임 스탬프(Time Stamp Ordering) 기법 &amp;gt; 시스템에 도착한 순서대로 타임 스탬프를 부여하여, 순서대로 실행하도록 한다. 교착 상태가 발생하지 않는다. &amp;lt; 로킹 규약 &amp;gt; 트랜잭션 T가 read(x)나 write(x) 연산을 하려면 반드시 먼저 lock(x) 연산을 실행해야 한다. 트랜잭션 T가 실행한 lock(x)에 대해서는 T가 모든 실행을 종료하기 전에 반드시 unlock(x)을 실행시켜야 한다. 다른 트랜잭션에 의해 이미 x에 lock이 걸려있다면 다시 lock(x)를 실행할 수 없다. 트랜잭션 T가 lock(x)를 실행하지 않았다면 T가 unlock(x)를 실행할 수 없다. 무결성 무결성 : 데이터의 정확성과 일관성을 유지하고 보증하는 것 고유 무결성 : 릴레이션의 특정 속성에 대해서 각 튜플이 갖는 값들이 서로 달라야 한다. 개체 무결성 : 릴레이션에서 기본키를 구성하는 속성은 NULL 값이나 중복값을 가질 수 없다. 참조 무결성 : 외래키 값은 NULL 이거나 참조 릴레이션의 기본키 값과 동일해야 한다. cf) 정확성 : 데이터베이스의 저장된 데이터 값과 현실 세계의 실제값이 일치하는 정도 보안 데이터베이스의 일부분 또는 전체에 대해서 권한이 없는 사용자가 엑세스하는 것을 금지하기 위한 기술 데이터베이스 사용자들은 일반적으로 서로 다른 객체에 대해 다른 접근 권리/권한을 갖게 된다. &amp;lt; 암호화 기법 &amp;gt; &amp;lt; 개인키 암호 방식 = 대칭형 암호 알고리즘 &amp;gt; 동일한 키로 데이터 암호화/복호화 진행 수신자에게 키를 전달하는 방법 Key를 비대칭형 암호 알고리즘을 이용하여 암호화 시킨 후 전송 실제 Key를 전송하지 않고도 A와 B가 동일한 Key를 생성할 수 있도록 하는 Diffie-Hellman 알고리즘 사용 &amp;lt; 공개키 암호 방식 = 비대칭형 암호 알고리즘 &amp;gt; A는 공개키(public key)와 개인키(private key) 를 생성한다. A의 공개키를 이용하여 암호화된 데이터는 A의 개인키로만 복호화가 가능하다. A의 개인키를 이용하여 암호화된 데이터는 A의 공개키로만 복호화가 가능하다. A와 B는 각자의 공개키를 서로에게 알려준다. A : 공개A키, 개인A키, 공개B키 B : 공개B키, 개인B키, 공개A키 A는 B에게 데이터를 전송하기 위해 B의 공개B키를 이용하여 데이터를 암호화한 후 전송한다 암호화된 데이터는 개인B키를 가지고 있는 B만 해독할 수 있다. &amp;lt; 권한 부여 기법 &amp;gt; GRANT : 권한 부여 명령 GRANT 사용자 등급 TO 사용자 ID 리스트 REVOKE : 권한 취소 명령 REVOKE 사용자 등급 FROM 사용자 ID 리스트 분산 데이터베이스 &amp;lt; 분산 데이터베이스 정의 &amp;gt; 논리적으로는 하나의 시스템에 속하지만 물리적으로는 네트워크를 통해 여러 개의 사이트에 분산되어 있는 데이터베이스 장점 : 자료의 공유성 향상, 시스템 성능 향상, 신뢰성 및 가용성이 높다 단점 : DBMS가 수행할 기능이 복잡, DB설계가 복잡, 소프트웨어 개발 비용이 증가</summary></entry><entry><title type="html">관계 데이터베이스 모델과 언어</title><link href="http://localhost:4000/database/2019/05/28/%EA%B4%80%EA%B3%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%AA%A8%EB%8D%B8%EA%B3%BC-%EC%96%B8%EC%96%B4/" rel="alternate" type="text/html" title="관계 데이터베이스 모델과 언어" /><published>2019-05-28T23:01:00+09:00</published><updated>2019-05-28T23:01:00+09:00</updated><id>http://localhost:4000/database/2019/05/28/%EA%B4%80%EA%B3%84%20%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%20%EB%AA%A8%EB%8D%B8%EA%B3%BC%20%EC%96%B8%EC%96%B4</id><content type="html" xml:base="http://localhost:4000/database/2019/05/28/%EA%B4%80%EA%B3%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%AA%A8%EB%8D%B8%EA%B3%BC-%EC%96%B8%EC%96%B4/">&lt;h1 id=&quot;관계형-데이터페이스-구조&quot;&gt;관계형 데이터페이스 구조&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;릴레이션(Relation): 데이터베이스 테이블&lt;/li&gt;
  &lt;li&gt;튜플(Tuple)     : 릴레이션을 구성하는 각각의 행, 튜플의 수를 카디널리티라 부른다.&lt;/li&gt;
  &lt;li&gt;속성(Attribute) : 데이터베이스를 구성하는 가장 작은 논리적 단위&lt;/li&gt;
  &lt;li&gt;도메인(Domain)   : 도메인은 하나의 애트리뷰트가 취할 수 있는 같은 타입의 원자들의 집합&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-릴레이션의-특징-&quot;&gt;&amp;lt; 릴레이션의 특징 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;한 릴레이션에 포함된 튜플은 모두 다르다.&lt;/li&gt;
  &lt;li&gt;튜플 사이의 순서가 없고 삽입/삭제 등으로 인해 시간에 따라 변한다.&lt;/li&gt;
  &lt;li&gt;속성 값은 논리적으로 더 이상 쪼갤 수 없는 원자값만을 저장한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;관계형-데이터베이스-제약-조건&quot;&gt;관계형 데이터베이스 제약 조건&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;후보키 : 기본키로 사용할 수 있는 속성, 모든 튜플에 대해서 &lt;strong&gt;유일성&lt;/strong&gt;과 &lt;strong&gt;최소성&lt;/strong&gt;을 만족한다.
    &lt;ul&gt;
      &lt;li&gt;유일성 : 하나의 키 값으로 하나의 튜플을 유일하게 식별 가능해야 한다.&lt;/li&gt;
      &lt;li&gt;최소성 : 모든 레코드들을 유일하게 식별하는 데 꼭 필요한 속성만으로만 구성되어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기본키 : 후보키중 선택한 주 키로 NULL 값을 가질 수 없다.&lt;/li&gt;
  &lt;li&gt;대체키 : 후보키가 둘 이상일 때 기본키를 제외한 나머지 후보키를 말한다.&lt;/li&gt;
  &lt;li&gt;외래키 : 관계를 맺고 있는 두 실레이션에서 한 릴레이션이 참조하고 있는 다른 릴레이션의 기본키와 같은 릴레이션의 속성을 말한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;무결성&lt;/strong&gt; : 데이터의 정확성과 일관성을 유지하고 보증하는 것
    &lt;ul&gt;
      &lt;li&gt;개체 무결성 : 릴레이션에서 기본키를 구성하는 속성은 NULL 값이나 중복값을 가질 수 없다.&lt;/li&gt;
      &lt;li&gt;참조 무결성 : 외래키 값은 NULL 이거나 참조 릴레이션의 기본키 값과 동일해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;관계-대수-및-관계-해석&quot;&gt;관계 대수 및 관계 해석&lt;/h1&gt;
&lt;h2 id=&quot;-관계-대수-&quot;&gt;&amp;lt; 관계 대수 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;관계형 데이터베이스에서 원하는 정보와 어떻게 유도하는지 기술하는 절차적인 언어
&lt;img src=&quot;/assets/images/database_relation.png&quot; alt=&quot;11st_result&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-관계-해석-&quot;&gt;&amp;lt; 관계 해석 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;관계 데이터의 연산을 표현하는 방법으로 원하는 정보를 정의할 때는 계산 수식을 사용한다.&lt;/li&gt;
  &lt;li&gt;원하는 정보가 무엇인지만 정의하는 비절차적 특징을 지닌다.&lt;/li&gt;
  &lt;li&gt;튜플 관계해석과 도메인 관계해석이 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;정규화&quot;&gt;정규화&lt;/h1&gt;
&lt;h2 id=&quot;-정규화-목적-&quot;&gt;&amp;lt; 정규화 목적 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;종속성 이론을 이용하여 잘못 설계된 관계셩 스키마를 더 작은 속성의 세트로 쪼개 바람직한 스키마로 만들어 가는 과정&lt;/li&gt;
  &lt;li&gt;데이터 구조의 안정성을 최대화해 &lt;strong&gt;중복성 및 종속성을 배제&lt;/strong&gt;시키는 방법으로 사용한다.&lt;/li&gt;
  &lt;li&gt;효과적인 검색 알고리즘을 생성하고 중복을 배제해 삽입/삭제/갱신 이상의 발생을 방지한다.
    &lt;ul&gt;
      &lt;li&gt;삽입 이상 : 릴레이션에 데이터를 삽입할 때 의도와는 상관없는 원하지 않는 값들도 함께 삽입되는 현상&lt;/li&gt;
      &lt;li&gt;삭제 이상 : 릴레이션에 한 튜플을 삭제할 때 의도와는 상관없는 값들도 함께 삭제되는 현상&lt;/li&gt;
      &lt;li&gt;갱신 이상 : 릴레이션에서 튜플에 있는 속성 값을 갱신할 때 일부 튜플의 정보만 갱신되어 정보에 모순이 생기는 현상&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-정규화-과정-&quot;&gt;&amp;lt; 정규화 과정 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;제 1정규형 : 다치가 존재하지 않는 릴레이션&lt;/li&gt;
  &lt;li&gt;제 2정규형 : 부분 함수적 종속성 x (기본키가 기본키가 아닌 속성에 종속 관계를 가짐)
    &lt;ul&gt;
      &lt;li&gt;R(&lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;B&lt;/em&gt;&lt;/strong&gt;, C, D), A-&amp;gt;C 일때 R1(&lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt;, C), R2(&lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;B&lt;/em&gt;&lt;/strong&gt;, D)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제 3정규형 : 이행적 종속 관계 x (기본키가 아닌 속성이 다른 속성에 종속 관계를 가짐)
    &lt;ul&gt;
      &lt;li&gt;R(&lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt;,&lt;strong&gt;&lt;em&gt;B&lt;/em&gt;&lt;/strong&gt;, C, D), C-&amp;gt;D 일때 R1(&lt;strong&gt;&lt;em&gt;C&lt;/em&gt;&lt;/strong&gt;, D), R2(&lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;B&lt;/em&gt;&lt;/strong&gt;, D)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BCNF : 3 정규형에서 결정자이며 후보키가 아닌것 제거&lt;/li&gt;
  &lt;li&gt;cf) 종속 관계 : ‘학번’에 따라 ‘이름’이 결정될 때 ‘이름’을 ‘학번’에 함수 종속적이라 하며 ‘학번-&amp;gt;이름’으로 표기한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;데이터베이스-언어&quot;&gt;데이터베이스 언어&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;DDL(Data Definition Language)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;DB 구조, 데이터 형식, 접근 방식 등 DB를 구축하거나 수정할 목적으로 사용되는 언어&lt;/li&gt;
      &lt;li&gt;외부 스키마 명세를 정의하고 논리적/물리적 데이터 구조 정의&lt;/li&gt;
      &lt;li&gt;CREATE, ALTER, DROP, RENAME 등의 명령어를 사용한다.
        &lt;ul&gt;
          &lt;li&gt;CREATE SCHEMA/DOMAIN/TABLE/INDEX 이름&lt;/li&gt;
          &lt;li&gt;ALTER TABLE 테이블이름 ADD/ALTER/DROP 속성이름&lt;/li&gt;
          &lt;li&gt;DROP SCHEMA/DOMAIN/TABLE/VIEW [CASCADE/RESCTRICTED]&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DML(Data Manipulation Language)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;사용자가 데이터를 처리할 수 있게하는 도구로 사용자와 DBMS간의 인터페이스를 제공한다.&lt;/li&gt;
      &lt;li&gt;SELECT, INSERT, DELETE, UPDATE 등의 명령어를 사용한다.&lt;/li&gt;
      &lt;li&gt;SELCT ~ FROM ~ WHERE ~ GROUP BY ~ HAVING ~&lt;/li&gt;
      &lt;li&gt;INSERT ~ INTO ~ VALUES ~&lt;/li&gt;
      &lt;li&gt;DELETE ~ FROM ~ WHERE ~&lt;/li&gt;
      &lt;li&gt;UPDATE ~ SET ~ WHERE ~&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DCL(Data Control Language)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;무결성, 보안 및 권한 제어, 회복 등을 하기 위한 언어다.&lt;/li&gt;
      &lt;li&gt;GRANT(권한 생성), REVOKE(권한 삭제)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;뷰view&quot;&gt;뷰(VIEW)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;사용자에게 접근이 허용된 자료만을 제한적으로 보여주기 위해 유도된 가상 테이블이다.&lt;/li&gt;
  &lt;li&gt;물리적으로 저장장치에 존재하지 않지만 있는 것처럼 간주한다.&lt;/li&gt;
  &lt;li&gt;기본 테이블과 같은 구조를 가지며 조작도 기본 테이블과 거의 같다.&lt;/li&gt;
  &lt;li&gt;정의된 뷰는 다른 뷰의 정의에 기초가 될 수 있다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;뷰가 정의된 기본 테이블이나 뷰를 삭제하면 그 테이블을 기초로 정의된 다른 뷰도 삭제된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt; : 접근 제어를 통한 자동 보안과 사용자 데이터를 간단하게 해준다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;단점&lt;/strong&gt; : ALTER VIEW로 정의를 변경할 수 없다. 삽입/삭제/갱신 연산에 제약이 따른다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;시스템-카탈로그-데이터-사전&quot;&gt;시스템 카탈로그 (=데이터 사전)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;시스템 자체에 관련이 있는 다양한 객체에 관한 정보를 포함하는 시스템 데이터베이스이다.&lt;/li&gt;
  &lt;li&gt;데이터 객체에 대한 정의나 명세에 관한 정보를 유지/관리하는 시스템 테이블이다.&lt;/li&gt;
  &lt;li&gt;데이터 정의어의 결과로 구성되는 기본 테이블, 뷰, 인덱스, 접근 권한 등의 데이터베이스 구조 및 통계 정보를 저장한다.&lt;/li&gt;
  &lt;li&gt;카탈로그는 DBMS가 스스로 생성하고 유지한다.&lt;/li&gt;
  &lt;li&gt;시스템 테이블로 구성되어 있어 일반 이용자도 SQL을 이용하여 내용을 검색할 수 있다.&lt;/li&gt;
  &lt;li&gt;INSERT/DELETE/UPDATE 문으로 카탈로그를 갱신하는 것은 허용되지 않는다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>ChanSu Kim</name></author><category term="Database" /><category term="관계형 데이터베이스" /><category term="정규화" /><category term="뷰" /><category term="시스템 카탈로그" /><summary type="html">관계형 데이터페이스 구조 릴레이션(Relation): 데이터베이스 테이블 튜플(Tuple) : 릴레이션을 구성하는 각각의 행, 튜플의 수를 카디널리티라 부른다. 속성(Attribute) : 데이터베이스를 구성하는 가장 작은 논리적 단위 도메인(Domain) : 도메인은 하나의 애트리뷰트가 취할 수 있는 같은 타입의 원자들의 집합 &amp;lt; 릴레이션의 특징 &amp;gt; 한 릴레이션에 포함된 튜플은 모두 다르다. 튜플 사이의 순서가 없고 삽입/삭제 등으로 인해 시간에 따라 변한다. 속성 값은 논리적으로 더 이상 쪼갤 수 없는 원자값만을 저장한다. 관계형 데이터베이스 제약 조건 후보키 : 기본키로 사용할 수 있는 속성, 모든 튜플에 대해서 유일성과 최소성을 만족한다. 유일성 : 하나의 키 값으로 하나의 튜플을 유일하게 식별 가능해야 한다. 최소성 : 모든 레코드들을 유일하게 식별하는 데 꼭 필요한 속성만으로만 구성되어야 한다. 기본키 : 후보키중 선택한 주 키로 NULL 값을 가질 수 없다. 대체키 : 후보키가 둘 이상일 때 기본키를 제외한 나머지 후보키를 말한다. 외래키 : 관계를 맺고 있는 두 실레이션에서 한 릴레이션이 참조하고 있는 다른 릴레이션의 기본키와 같은 릴레이션의 속성을 말한다. 무결성 : 데이터의 정확성과 일관성을 유지하고 보증하는 것 개체 무결성 : 릴레이션에서 기본키를 구성하는 속성은 NULL 값이나 중복값을 가질 수 없다. 참조 무결성 : 외래키 값은 NULL 이거나 참조 릴레이션의 기본키 값과 동일해야 한다. 관계 대수 및 관계 해석 &amp;lt; 관계 대수 &amp;gt; 관계형 데이터베이스에서 원하는 정보와 어떻게 유도하는지 기술하는 절차적인 언어 &amp;lt; 관계 해석 &amp;gt; 관계 데이터의 연산을 표현하는 방법으로 원하는 정보를 정의할 때는 계산 수식을 사용한다. 원하는 정보가 무엇인지만 정의하는 비절차적 특징을 지닌다. 튜플 관계해석과 도메인 관계해석이 있다. 정규화 &amp;lt; 정규화 목적 &amp;gt; 종속성 이론을 이용하여 잘못 설계된 관계셩 스키마를 더 작은 속성의 세트로 쪼개 바람직한 스키마로 만들어 가는 과정 데이터 구조의 안정성을 최대화해 중복성 및 종속성을 배제시키는 방법으로 사용한다. 효과적인 검색 알고리즘을 생성하고 중복을 배제해 삽입/삭제/갱신 이상의 발생을 방지한다. 삽입 이상 : 릴레이션에 데이터를 삽입할 때 의도와는 상관없는 원하지 않는 값들도 함께 삽입되는 현상 삭제 이상 : 릴레이션에 한 튜플을 삭제할 때 의도와는 상관없는 값들도 함께 삭제되는 현상 갱신 이상 : 릴레이션에서 튜플에 있는 속성 값을 갱신할 때 일부 튜플의 정보만 갱신되어 정보에 모순이 생기는 현상 &amp;lt; 정규화 과정 &amp;gt; 제 1정규형 : 다치가 존재하지 않는 릴레이션 제 2정규형 : 부분 함수적 종속성 x (기본키가 기본키가 아닌 속성에 종속 관계를 가짐) R(A, B, C, D), A-&amp;gt;C 일때 R1(A, C), R2(A, B, D) 제 3정규형 : 이행적 종속 관계 x (기본키가 아닌 속성이 다른 속성에 종속 관계를 가짐) R(A,B, C, D), C-&amp;gt;D 일때 R1(C, D), R2(A, B, D) BCNF : 3 정규형에서 결정자이며 후보키가 아닌것 제거 cf) 종속 관계 : ‘학번’에 따라 ‘이름’이 결정될 때 ‘이름’을 ‘학번’에 함수 종속적이라 하며 ‘학번-&amp;gt;이름’으로 표기한다. 데이터베이스 언어 DDL(Data Definition Language) DB 구조, 데이터 형식, 접근 방식 등 DB를 구축하거나 수정할 목적으로 사용되는 언어 외부 스키마 명세를 정의하고 논리적/물리적 데이터 구조 정의 CREATE, ALTER, DROP, RENAME 등의 명령어를 사용한다. CREATE SCHEMA/DOMAIN/TABLE/INDEX 이름 ALTER TABLE 테이블이름 ADD/ALTER/DROP 속성이름 DROP SCHEMA/DOMAIN/TABLE/VIEW [CASCADE/RESCTRICTED] DML(Data Manipulation Language) 사용자가 데이터를 처리할 수 있게하는 도구로 사용자와 DBMS간의 인터페이스를 제공한다. SELECT, INSERT, DELETE, UPDATE 등의 명령어를 사용한다. SELCT ~ FROM ~ WHERE ~ GROUP BY ~ HAVING ~ INSERT ~ INTO ~ VALUES ~ DELETE ~ FROM ~ WHERE ~ UPDATE ~ SET ~ WHERE ~ DCL(Data Control Language) 무결성, 보안 및 권한 제어, 회복 등을 하기 위한 언어다. GRANT(권한 생성), REVOKE(권한 삭제) 뷰(VIEW) 사용자에게 접근이 허용된 자료만을 제한적으로 보여주기 위해 유도된 가상 테이블이다. 물리적으로 저장장치에 존재하지 않지만 있는 것처럼 간주한다. 기본 테이블과 같은 구조를 가지며 조작도 기본 테이블과 거의 같다. 정의된 뷰는 다른 뷰의 정의에 기초가 될 수 있다. 뷰가 정의된 기본 테이블이나 뷰를 삭제하면 그 테이블을 기초로 정의된 다른 뷰도 삭제된다. 장점 : 접근 제어를 통한 자동 보안과 사용자 데이터를 간단하게 해준다. 단점 : ALTER VIEW로 정의를 변경할 수 없다. 삽입/삭제/갱신 연산에 제약이 따른다. 시스템 카탈로그 (=데이터 사전) 시스템 자체에 관련이 있는 다양한 객체에 관한 정보를 포함하는 시스템 데이터베이스이다. 데이터 객체에 대한 정의나 명세에 관한 정보를 유지/관리하는 시스템 테이블이다. 데이터 정의어의 결과로 구성되는 기본 테이블, 뷰, 인덱스, 접근 권한 등의 데이터베이스 구조 및 통계 정보를 저장한다. 카탈로그는 DBMS가 스스로 생성하고 유지한다. 시스템 테이블로 구성되어 있어 일반 이용자도 SQL을 이용하여 내용을 검색할 수 있다. INSERT/DELETE/UPDATE 문으로 카탈로그를 갱신하는 것은 허용되지 않는다.</summary></entry><entry><title type="html">데이터베이스 개념 및 모델링</title><link href="http://localhost:4000/database/2019/05/28/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EB%AA%A8%EB%8D%B8%EB%A7%81/" rel="alternate" type="text/html" title="데이터베이스 개념 및 모델링" /><published>2019-05-28T21:01:00+09:00</published><updated>2019-05-28T21:01:00+09:00</updated><id>http://localhost:4000/database/2019/05/28/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%20%EA%B0%9C%EB%85%90%20%EB%B0%8F%20%EB%AA%A8%EB%8D%B8%EB%A7%81</id><content type="html" xml:base="http://localhost:4000/database/2019/05/28/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EB%AA%A8%EB%8D%B8%EB%A7%81/">&lt;h1 id=&quot;데이터베이스-개념&quot;&gt;데이터베이스 개념&lt;/h1&gt;
&lt;h2 id=&quot;-데이터베이스-정의-&quot;&gt;&amp;lt; 데이터베이스 정의 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;통합된 데이터 : 자료의 중복을 배제한 데이터의 모임&lt;/li&gt;
  &lt;li&gt;저장된 데이터 : 저장 매체에 저장된 자료&lt;/li&gt;
  &lt;li&gt;운영 데이터   : 조직의 고유 업무 수행을 위해 반드시 필요한 자료&lt;/li&gt;
  &lt;li&gt;공용 데이터   : 여러 응용 시스템들이 공동 소유하는 자료&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-데이터베이스-특징&quot;&gt;&amp;lt; 데이터베이스 특징&amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;실시간 접근성 : 실시간 처리에 대한 응답이 가능해야 한다.&lt;/li&gt;
  &lt;li&gt;계속적인 변화 : 데이터 삽입, 수정, 삭제, 갱신으로 항상 최신의 데이터를 유지해야 한다.&lt;/li&gt;
  &lt;li&gt;동시 공용     : 다수의 사용자가 동시에 같은 내용의 데이터를 이용할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;내용 참조     : 데이터를 참조시 사용자가 요구하는 데이터 내용으로 데이터를 찾는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;dbms-기능&quot;&gt;DBMS 기능&lt;/h1&gt;
&lt;h2 id=&quot;-dbms-정의-&quot;&gt;&amp;lt; DBMS 정의 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;사용자와 데이터베이스 상에서 사용자의 요구에 따라 정보를 생성 및 관리해주는 소프트웨어&lt;/li&gt;
  &lt;li&gt;파일 시스템의 단점인 &lt;strong&gt;종속성, 중복성&lt;/strong&gt;의 단점을 해결한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-dbms-필수-기능-&quot;&gt;&amp;lt; DBMS 필수 기능 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;정의(Definition) 기능&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;데이터베이스에 저장할 데이터의 형과 구조에 대한 정의, 이용 방식, 제약 조건 등을 명시하는 기능&lt;/li&gt;
      &lt;li&gt;데이터와 데이터 관계를 명확히 명세할 수 있어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;조작(Manipulation) 기능&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;데이터 검색/갱신/삽입/삭제 등을 체계적으로 처리하기 위해 사용자&amp;lt;-&amp;gt;데이터베이스 사이의 인터페이스 수단 제공&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;제어(Control) 기능&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;데이터의 &lt;strong&gt;무결성&lt;/strong&gt;이 유지되어야 한다.&lt;/li&gt;
      &lt;li&gt;사용자별 허가된 데이터만 접근할 수 있도록 &lt;strong&gt;권한 검사&lt;/strong&gt;를 수행한다.&lt;/li&gt;
      &lt;li&gt;여러 사용자가 데이터베이스를 동시에 접근해 데이터를 처리할 때 처리 결과가 항상 정확성을 유지하도록 &lt;strong&gt;병행 제어&lt;/strong&gt;를 수행해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;스키마&quot;&gt;스키마&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스의 구조와 제약조건에 관한 전반적인 명세를 기술한 메타데이터 집합이다.&lt;/li&gt;
  &lt;li&gt;스키마는 데이터 개체(Entity), 속성(Attribute), 관계(Relationship) 및 제약 조건에 전반적으로 정의한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;외부 스키마&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;사용자가 각 개인의 입장에서 필요로 하는 데이터베이스 논리적 구조를 정의한 것&lt;/li&gt;
      &lt;li&gt;일반 사용자는 SQL을 이용해 DB를 쉽게 사용할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;개념 스키마&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;데이터베이스의 전체적인 논리적 구조로 단순 스키마라고 하면 개념 스키마를 의미한다.&lt;/li&gt;
      &lt;li&gt;개체간의 관계와 제약조건, 접근권한, 보안 및 무결성 규칙에 관한 명세를 정의한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;내부 스키마&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;물리적 저장장치의 입장에서 본 데이터베이스 구조로 시스템 설계자가 보는 관점의 스키마를 의미한다.&lt;/li&gt;
      &lt;li&gt;실제로 데이터베이스에 저장될 레코드의 물리적인 구조를 정의하고 저장 데이터 표현 방법, 내부 레코드 물리적 순서 등을 나타낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;데이터-모델&quot;&gt;데이터 모델&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;개체(Entity) : 레코드에 대응하는 것으로 어떤 정보를 제공하는 역할 수행&lt;/li&gt;
  &lt;li&gt;속성(Attribute) : 데이터의 가장 작은 논리적 단위로서 파일 구조상의 데이터 항목 또는 데이터 필드에 해당&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-e-r-모델-&quot;&gt;&amp;lt; E-R 모델 &amp;gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/erd.png&quot; alt=&quot;11st_result&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;개체와 개체간의 관계를 기본 요소로 이용하여 데이터를 개념적인 논리 데이터로 표현하는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;데이터베이스-설계&quot;&gt;데이터베이스 설계&lt;/h1&gt;
&lt;h2 id=&quot;-데이터베이스-설계-고려-사항&quot;&gt;&amp;lt; 데이터베이스 설계 고려 사항&amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;무결성 : 삽입, 삭제, 갱신 등의 연산 후에도 저장된 데이터가 정해진 제약 조건을 항상 만족해야 함&lt;/li&gt;
  &lt;li&gt;일관성 : 데이터베이스에 저장된 데이터들 사이나 특정 질의에 대한 응답이 처음부터 끝까지 일정해야 함&lt;/li&gt;
  &lt;li&gt;회복  : 시스템 장애가 발생시 장애 발생 직전 상태로 복구할 수 있어야 함&lt;/li&gt;
  &lt;li&gt;보안, 효울성, 데이터베이스 확장 등…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-개념적-설계-&quot;&gt;&amp;lt; 개념적 설계 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정&lt;/li&gt;
  &lt;li&gt;개념 스키마 모델링과 트랜잭션 모델링을 병행 수행한다.&lt;/li&gt;
  &lt;li&gt;요구 분석 단계에서 나온 결과를 DBMS에 독립적인 E-R 다이어그램으로 작성&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-논리적-설계-&quot;&gt;&amp;lt; 논리적 설계 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;현실 세계 자료를 컴퓨터가 처리할 수 있는 물리적 저장장치에 저장할 수 있도록 변환하기 위해 논리적 구조로 변환시키는 과정&lt;/li&gt;
  &lt;li&gt;데이터 타입과 데이터 타입들 간의 관계로 표현되는 논리적 구조의 데이터로 모델화&lt;/li&gt;
  &lt;li&gt;개념 스키마를 평가 및 적재하고 DBMS에 따라 서로 다른 논리적 스키마를 설계하는 단계&lt;/li&gt;
  &lt;li&gt;트랜잭션 인터페이스 / 테이블 설계&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-물리적-설계-&quot;&gt;&amp;lt; 물리적 설계 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;논리적 구조로 표현된 데이터를 물리적 저장장치에 저장할 수 있는 물리적 구조의 데이터로 변환하는 과정&lt;/li&gt;
  &lt;li&gt;데이터베이스 파일의 저장 구조 및 액세스 경로를 결정한다&lt;/li&gt;
  &lt;li&gt;저장 레코드의 형식, 순서, 접근 경로와 같은 정보를 사용하여 데이터가 저장되는 방법을 묘사한다.&lt;/li&gt;
  &lt;li&gt;저장 레코드 양식 설계, 레코드 집중의 분석 및 설계, 접근 경로 설계 등이 필수적으로 포함&lt;/li&gt;
  &lt;li&gt;기본적인 데이터 단위는 저장 레코드이며 여러 타입의 저장 레코드 집합이다&lt;/li&gt;
  &lt;li&gt;고려 사항 : 인덱스 구조, 레코드 크기, 레코드 개수, 트랜잭션 갱신과 참조 성향 등&lt;/li&gt;
&lt;/ul&gt;</content><author><name>ChanSu Kim</name></author><category term="Database" /><category term="스키마" /><category term="데이터베이스 특징" /><category term="데이터베이스 설계" /><summary type="html">데이터베이스 개념 &amp;lt; 데이터베이스 정의 &amp;gt; 통합된 데이터 : 자료의 중복을 배제한 데이터의 모임 저장된 데이터 : 저장 매체에 저장된 자료 운영 데이터 : 조직의 고유 업무 수행을 위해 반드시 필요한 자료 공용 데이터 : 여러 응용 시스템들이 공동 소유하는 자료 &amp;lt; 데이터베이스 특징&amp;gt; 실시간 접근성 : 실시간 처리에 대한 응답이 가능해야 한다. 계속적인 변화 : 데이터 삽입, 수정, 삭제, 갱신으로 항상 최신의 데이터를 유지해야 한다. 동시 공용 : 다수의 사용자가 동시에 같은 내용의 데이터를 이용할 수 있어야 한다. 내용 참조 : 데이터를 참조시 사용자가 요구하는 데이터 내용으로 데이터를 찾는다. DBMS 기능 &amp;lt; DBMS 정의 &amp;gt; 사용자와 데이터베이스 상에서 사용자의 요구에 따라 정보를 생성 및 관리해주는 소프트웨어 파일 시스템의 단점인 종속성, 중복성의 단점을 해결한다. &amp;lt; DBMS 필수 기능 &amp;gt; 정의(Definition) 기능 데이터베이스에 저장할 데이터의 형과 구조에 대한 정의, 이용 방식, 제약 조건 등을 명시하는 기능 데이터와 데이터 관계를 명확히 명세할 수 있어야 한다. 조작(Manipulation) 기능 데이터 검색/갱신/삽입/삭제 등을 체계적으로 처리하기 위해 사용자&amp;lt;-&amp;gt;데이터베이스 사이의 인터페이스 수단 제공 제어(Control) 기능 데이터의 무결성이 유지되어야 한다. 사용자별 허가된 데이터만 접근할 수 있도록 권한 검사를 수행한다. 여러 사용자가 데이터베이스를 동시에 접근해 데이터를 처리할 때 처리 결과가 항상 정확성을 유지하도록 병행 제어를 수행해야 한다. 스키마 데이터베이스의 구조와 제약조건에 관한 전반적인 명세를 기술한 메타데이터 집합이다. 스키마는 데이터 개체(Entity), 속성(Attribute), 관계(Relationship) 및 제약 조건에 전반적으로 정의한다. 외부 스키마 사용자가 각 개인의 입장에서 필요로 하는 데이터베이스 논리적 구조를 정의한 것 일반 사용자는 SQL을 이용해 DB를 쉽게 사용할 수 있다. 개념 스키마 데이터베이스의 전체적인 논리적 구조로 단순 스키마라고 하면 개념 스키마를 의미한다. 개체간의 관계와 제약조건, 접근권한, 보안 및 무결성 규칙에 관한 명세를 정의한다. 내부 스키마 물리적 저장장치의 입장에서 본 데이터베이스 구조로 시스템 설계자가 보는 관점의 스키마를 의미한다. 실제로 데이터베이스에 저장될 레코드의 물리적인 구조를 정의하고 저장 데이터 표현 방법, 내부 레코드 물리적 순서 등을 나타낸다. 데이터 모델 개체(Entity) : 레코드에 대응하는 것으로 어떤 정보를 제공하는 역할 수행 속성(Attribute) : 데이터의 가장 작은 논리적 단위로서 파일 구조상의 데이터 항목 또는 데이터 필드에 해당 &amp;lt; E-R 모델 &amp;gt; 개체와 개체간의 관계를 기본 요소로 이용하여 데이터를 개념적인 논리 데이터로 표현하는 방법 데이터베이스 설계 &amp;lt; 데이터베이스 설계 고려 사항&amp;gt; 무결성 : 삽입, 삭제, 갱신 등의 연산 후에도 저장된 데이터가 정해진 제약 조건을 항상 만족해야 함 일관성 : 데이터베이스에 저장된 데이터들 사이나 특정 질의에 대한 응답이 처음부터 끝까지 일정해야 함 회복 : 시스템 장애가 발생시 장애 발생 직전 상태로 복구할 수 있어야 함 보안, 효울성, 데이터베이스 확장 등… &amp;lt; 개념적 설계 &amp;gt; 현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정 개념 스키마 모델링과 트랜잭션 모델링을 병행 수행한다. 요구 분석 단계에서 나온 결과를 DBMS에 독립적인 E-R 다이어그램으로 작성 &amp;lt; 논리적 설계 &amp;gt; 현실 세계 자료를 컴퓨터가 처리할 수 있는 물리적 저장장치에 저장할 수 있도록 변환하기 위해 논리적 구조로 변환시키는 과정 데이터 타입과 데이터 타입들 간의 관계로 표현되는 논리적 구조의 데이터로 모델화 개념 스키마를 평가 및 적재하고 DBMS에 따라 서로 다른 논리적 스키마를 설계하는 단계 트랜잭션 인터페이스 / 테이블 설계 &amp;lt; 물리적 설계 &amp;gt; 논리적 구조로 표현된 데이터를 물리적 저장장치에 저장할 수 있는 물리적 구조의 데이터로 변환하는 과정 데이터베이스 파일의 저장 구조 및 액세스 경로를 결정한다 저장 레코드의 형식, 순서, 접근 경로와 같은 정보를 사용하여 데이터가 저장되는 방법을 묘사한다. 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계, 접근 경로 설계 등이 필수적으로 포함 기본적인 데이터 단위는 저장 레코드이며 여러 타입의 저장 레코드 집합이다 고려 사항 : 인덱스 구조, 레코드 크기, 레코드 개수, 트랜잭션 갱신과 참조 성향 등</summary></entry><entry><title type="html">백준/11004 K번째 수</title><link href="http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/27/%EB%B0%B1%EC%A4%80-11004-K%EB%B2%88%EC%A7%B8-%EC%88%98/" rel="alternate" type="text/html" title="백준/11004 K번째 수" /><published>2019-05-27T14:11:00+09:00</published><updated>2019-05-27T14:11:00+09:00</updated><id>http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/27/%EB%B0%B1%EC%A4%80%2011004%20K%EB%B2%88%EC%A7%B8%20%EC%88%98</id><content type="html" xml:base="http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/27/%EB%B0%B1%EC%A4%80-11004-K%EB%B2%88%EC%A7%B8-%EC%88%98/">&lt;h2 id=&quot;-문제-분석-및-풀이-방법-&quot;&gt;&amp;lt; 문제 분석 및 풀이 방법 &amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/11004&quot;&gt;Backjoon :: K번째 수&lt;/a&gt; 문제는 MergeSort를 활용해 풀 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;범위가 500만이기 때문에 O(n^2) 시간복잡도로는 해결할 수 없다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;따라서 O(nlogn) 시간복잡도인 QuickSort와 MergeSort를 사용해야 하는데 평균 O(nlogn)인 MergeSort를 사용했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;MergeSort 작동 방식
    &lt;ol&gt;
      &lt;li&gt;현재 배열 num과 임시 배열 tmp를 파라미터로 넘긴다.&lt;/li&gt;
      &lt;li&gt;start &amp;lt; end 가 아닐 경우까지 쪼갠다.&lt;/li&gt;
      &lt;li&gt;다 쪼개졌다면 MergeSort 함수로 넘어간다.&lt;/li&gt;
      &lt;li&gt;num 배열을 tmp 배열에 옮긴다.&lt;/li&gt;
      &lt;li&gt;tmp 배열의 left, right 인덱스를 비교하면서 num 배열에 저장한다.&lt;/li&gt;
      &lt;li&gt;while문을 통해 남아있는 배열을 num 배열에 옮긴다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-소스-코드-&quot;&gt;&amp;lt; 소스 코드 &amp;gt;&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//tmp 배열에 값을 옮긴다.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//num 배열에 비교하면서 저장&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//어느 한쪽에 남은 tmp 배열을 num 배열에 저장&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ChanSu Kim</name></author><category term="백준" /><category term="백준 11004" /><category term="백준 K번째 수" /><category term="합병정렬" /><category term="MergeSort" /><summary type="html">&amp;lt; 문제 분석 및 풀이 방법 &amp;gt; Backjoon :: K번째 수 문제는 MergeSort를 활용해 풀 수 있다. 범위가 500만이기 때문에 O(n^2) 시간복잡도로는 해결할 수 없다. 따라서 O(nlogn) 시간복잡도인 QuickSort와 MergeSort를 사용해야 하는데 평균 O(nlogn)인 MergeSort를 사용했다. MergeSort 작동 방식 현재 배열 num과 임시 배열 tmp를 파라미터로 넘긴다. start &amp;lt; end 가 아닐 경우까지 쪼갠다. 다 쪼개졌다면 MergeSort 함수로 넘어간다. num 배열을 tmp 배열에 옮긴다. tmp 배열의 left, right 인덱스를 비교하면서 num 배열에 저장한다. while문을 통해 남아있는 배열을 num 배열에 옮긴다. &amp;lt; 소스 코드 &amp;gt; import java.io.*; import java.util.*; public class Main { public static StringTokenizer stk; public static StringBuilder sb = new StringBuilder(); public static int[] num, tmp; public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); stk = new StringTokenizer(br.readLine()); int n = Integer.parseInt(stk.nextToken()); int k = Integer.parseInt(stk.nextToken()); num = new int[n]; tmp = new int[n]; stk = new StringTokenizer(br.readLine()); for (int i = 0; i &amp;lt; n; i++) { num[i] = Integer.parseInt(stk.nextToken()); } merge(0, n - 1); System.out.println(num[k - 1]); } public static void merge(int start, int end) { if (start &amp;lt; end) { int mid = (start + end) / 2; merge(start, mid); merge(mid + 1, end); mergeSort(start, mid, end); } } public static void mergeSort(int start, int mid, int end) { for (int i = start; i &amp;lt;= end; i++) { tmp[i] = num[i]; //tmp 배열에 값을 옮긴다. } int left = start; int right = mid + 1; int idx = start; while (left &amp;lt;= mid &amp;amp;&amp;amp; right &amp;lt;= end) { //num 배열에 비교하면서 저장 if (tmp[left] &amp;gt;= tmp[right]) { num[idx++] = tmp[right++]; } else { num[idx++] = tmp[left++]; } } //어느 한쪽에 남은 tmp 배열을 num 배열에 저장 while (left &amp;lt;= mid) num[idx++] = tmp[left++]; while (right &amp;lt;= end) num[idx++] = tmp[right++]; } }</summary></entry><entry><title type="html">동원엔터프라이즈 인적성 후기</title><link href="http://localhost:4000/%EC%9D%B8%EC%A0%81%EC%84%B1/2019/05/27/%EB%8F%99%EC%9B%90%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88-%EC%9D%B8%EC%A0%81%EC%84%B1-%ED%9B%84%EA%B8%B0/" rel="alternate" type="text/html" title="동원엔터프라이즈 인적성 후기" /><published>2019-05-27T00:11:00+09:00</published><updated>2019-05-27T00:11:00+09:00</updated><id>http://localhost:4000/%EC%9D%B8%EC%A0%81%EC%84%B1/2019/05/27/%EB%8F%99%EC%9B%90%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88%20%EC%9D%B8%EC%A0%81%EC%84%B1%20%ED%9B%84%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/%EC%9D%B8%EC%A0%81%EC%84%B1/2019/05/27/%EB%8F%99%EC%9B%90%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88-%EC%9D%B8%EC%A0%81%EC%84%B1-%ED%9B%84%EA%B8%B0/">&lt;h1 id=&quot;-동원엔터프라이즈-인적성-후기-&quot;&gt;&amp;lt; 동원엔터프라이즈 인적성 후기 &amp;gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dongwon.jpg&quot; alt=&quot;Imeage&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;5월 26일 잠실고등학교에서 동원엔터프라이즈 인적성을 보고 왔다.&lt;/li&gt;
  &lt;li&gt;자소서가 항목별 300자 쓰라고 하길래 붙을 줄 생각도 못하고있었는데 뜬금 합격.&lt;/li&gt;
  &lt;li&gt;오전/오후로 나누어져있는데 오후에 거의 900명가까이 됫으니 총 1800명정도? (계열사가 워낙 많지만)&lt;/li&gt;
  &lt;li&gt;입장시 로비에서 물이랑 GNC 비타민을 준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-인성-검사-후기-&quot;&gt;&amp;lt; 인성 검사 후기 &amp;gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;다른 기업과 달리 인성검사를 먼저 본다.&lt;/li&gt;
  &lt;li&gt;각 문항마다 매우아니다&amp;lt;&amp;gt;매우그렇다 로 선택한다.&lt;/li&gt;
  &lt;li&gt;다른 점은 4문항이 한 세트가 되어 가장 가깝다고 생각되는 것 하나와 가장 멀다고 생각되는 것 하나를 선택해야 한다.&lt;/li&gt;
  &lt;li&gt;인성검사치고 시간이 엄청 널널하지는 않다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-적성-고사-후기-&quot;&gt;&amp;lt; 적성 고사 후기 &amp;gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;적성 고사는 언어, 수리, 상황판단, 상식 총 4개의 영역으로 구성되어 있다.&lt;/li&gt;
  &lt;li&gt;4 영역 모두 감점이 있기 때문에 찍을 수도 없다. 물론 상식은 좀 찍었지만..&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;언어&quot;&gt;언어&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;지문이 엄청 길지는 않다. 평균적으로 시험지 한쪽에 2문제씩 나오는 정도?&lt;/li&gt;
  &lt;li&gt;4문제를 못풀었지만 언어 자신없는 내가 무난하다 느낄정도로 난이도가 평이했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;수리&quot;&gt;수리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;꽤 어려웠다고 생각한다. 6문제 가량을 못풀었다.&lt;/li&gt;
  &lt;li&gt;계산도 중간중간 꼬이다보니 시간이 많이 걸렸는데 연산하다가 자료해석은 거의 구경도못했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;상황판단&quot;&gt;상황판단&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이전 SKCT를 공부했던 경험이 있어서 별도로 공부는 진행하지 않았다.&lt;/li&gt;
  &lt;li&gt;큰 고민없이 25문제 전부 풀었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;상식&quot;&gt;상식&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;정말 모르면 답이없다.&lt;/li&gt;
  &lt;li&gt;찍으면 안되지만 어느정도 보고 찍었다.&lt;/li&gt;
  &lt;li&gt;최근 이슈랑 약어가 나오기 때문에 공부를 한다기보다 평소 자세히 봐야한다.&lt;/li&gt;
  &lt;li&gt;예를 들면 FAANG -&amp;gt; WNSSS, 헌법 불합치, 대통령 권한, 디지털 디바이드, 학교폭력위원회 등 단순 공부로 할 수 있는 영역이 아니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-결과-&quot;&gt;&amp;lt; 결과 &amp;gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/dongwon_result1.jpg&quot; alt=&quot;Imeage&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;</content><author><name>ChanSu Kim</name></author><category term="인적성" /><category term="동원엔터프라이즈" /><summary type="html">&amp;lt; 동원엔터프라이즈 인적성 후기 &amp;gt; 5월 26일 잠실고등학교에서 동원엔터프라이즈 인적성을 보고 왔다. 자소서가 항목별 300자 쓰라고 하길래 붙을 줄 생각도 못하고있었는데 뜬금 합격. 오전/오후로 나누어져있는데 오후에 거의 900명가까이 됫으니 총 1800명정도? (계열사가 워낙 많지만) 입장시 로비에서 물이랑 GNC 비타민을 준다. &amp;lt; 인성 검사 후기 &amp;gt; 다른 기업과 달리 인성검사를 먼저 본다. 각 문항마다 매우아니다&amp;lt;&amp;gt;매우그렇다 로 선택한다. 다른 점은 4문항이 한 세트가 되어 가장 가깝다고 생각되는 것 하나와 가장 멀다고 생각되는 것 하나를 선택해야 한다. 인성검사치고 시간이 엄청 널널하지는 않다. &amp;lt; 적성 고사 후기 &amp;gt; 적성 고사는 언어, 수리, 상황판단, 상식 총 4개의 영역으로 구성되어 있다. 4 영역 모두 감점이 있기 때문에 찍을 수도 없다. 물론 상식은 좀 찍었지만.. 언어 지문이 엄청 길지는 않다. 평균적으로 시험지 한쪽에 2문제씩 나오는 정도? 4문제를 못풀었지만 언어 자신없는 내가 무난하다 느낄정도로 난이도가 평이했다. 수리 꽤 어려웠다고 생각한다. 6문제 가량을 못풀었다. 계산도 중간중간 꼬이다보니 시간이 많이 걸렸는데 연산하다가 자료해석은 거의 구경도못했다. 상황판단 이전 SKCT를 공부했던 경험이 있어서 별도로 공부는 진행하지 않았다. 큰 고민없이 25문제 전부 풀었다. 상식 정말 모르면 답이없다. 찍으면 안되지만 어느정도 보고 찍었다. 최근 이슈랑 약어가 나오기 때문에 공부를 한다기보다 평소 자세히 봐야한다. 예를 들면 FAANG -&amp;gt; WNSSS, 헌법 불합치, 대통령 권한, 디지털 디바이드, 학교폭력위원회 등 단순 공부로 할 수 있는 영역이 아니다. &amp;lt; 결과 &amp;gt;</summary></entry><entry><title type="html">백준/1722 순열의 순서</title><link href="http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/26/%EB%B0%B1%EC%A4%80-1722-%EC%88%9C%EC%97%B4%EC%9D%98-%EC%88%9C%EC%84%9C/" rel="alternate" type="text/html" title="백준/1722 순열의 순서" /><published>2019-05-26T00:11:00+09:00</published><updated>2019-05-26T00:11:00+09:00</updated><id>http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/26/%EB%B0%B1%EC%A4%80%201722%20%EC%88%9C%EC%97%B4%EC%9D%98%20%EC%88%9C%EC%84%9C</id><content type="html" xml:base="http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/26/%EB%B0%B1%EC%A4%80-1722-%EC%88%9C%EC%97%B4%EC%9D%98-%EC%88%9C%EC%84%9C/">&lt;h2 id=&quot;-문제-분석-및-풀이-방법-&quot;&gt;&amp;lt; 문제 분석 및 풀이 방법 &amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1722&quot;&gt;Backjoon :: 순열의 순서&lt;/a&gt; 문제는 직접 구하지 않고 수학적인 연산이 필요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;범위가 최대 20!이기 때문에 구하려고 들면 시간초과가 날 수 밖에 없다.&lt;/li&gt;
  &lt;li&gt;아이디어는 factorial 값을 저장해둔 배열을 하나 만들고 모듈러 연산을 한다.&lt;/li&gt;
  &lt;li&gt;만약 [3, 2, 4, 1] 배열이 있다고 했을 때 첫 번째가 4라면 [1, x, x, x], [2, x, x, x] 의 경우는 진행한 것으로 간주해 factorial[3] * 2 = 12 를 더한다.&lt;/li&gt;
  &lt;li&gt;이후 두 번째 숫자가 2라면 [3, 1, x, x]의 경우의 수는 전부 진행한 것으로 간주해 factorial[2] * 1 을 더한다.&lt;/li&gt;
  &lt;li&gt;k를 입력받을 때 1을 빼주는데 이유는 k 번째 다음 순열을 출력하기 때문이다.&lt;/li&gt;
  &lt;li&gt;factorial 배열, 입력받는 k 변수는 long 형으로 선언해야 한다. 범위를 초과하기 때문!&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-소스-코드-&quot;&gt;&amp;lt; 소스 코드 &amp;gt;&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;//Factorial값 미리 구해서 저장&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isUsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//i번째 숫자 사용 여부&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;getFactorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseLong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//i번째에서 몇 번째 숫자를 선택할 지 구한다&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;//mod 번째 숫자를 찾기 위한 변수&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//앞에서부터 해당 숫자를 확인할 때 사용하는 변수&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;isUsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;//움직이는 횟수&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//idx 숫자를 사용했는지 확인하는 변수&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;isUsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getFactorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//factorial값 구하는 함수&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ChanSu Kim</name></author><category term="백준" /><category term="백준 1722" /><category term="백준 순열의 순서" /><category term="스텍" /><summary type="html">&amp;lt; 문제 분석 및 풀이 방법 &amp;gt; Backjoon :: 순열의 순서 문제는 직접 구하지 않고 수학적인 연산이 필요하다. 범위가 최대 20!이기 때문에 구하려고 들면 시간초과가 날 수 밖에 없다. 아이디어는 factorial 값을 저장해둔 배열을 하나 만들고 모듈러 연산을 한다. 만약 [3, 2, 4, 1] 배열이 있다고 했을 때 첫 번째가 4라면 [1, x, x, x], [2, x, x, x] 의 경우는 진행한 것으로 간주해 factorial[3] * 2 = 12 를 더한다. 이후 두 번째 숫자가 2라면 [3, 1, x, x]의 경우의 수는 전부 진행한 것으로 간주해 factorial[2] * 1 을 더한다. k를 입력받을 때 1을 빼주는데 이유는 k 번째 다음 순열을 출력하기 때문이다. factorial 배열, 입력받는 k 변수는 long 형으로 선언해야 한다. 범위를 초과하기 때문! &amp;lt; 소스 코드 &amp;gt; import java.io.*; import java.util.*; public class Main { public static StringTokenizer stk; public static StringBuilder sb = new StringBuilder(); public static int n; public static long[] factorial; public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); n = Integer.parseInt(br.readLine()); int[] num = new int[n]; factorial = new long[n + 1]; //Factorial값 미리 구해서 저장 boolean[] isUsed = new boolean[n + 1]; //i번째 숫자 사용 여부 getFactorial(); stk = new StringTokenizer(br.readLine()); int type = Integer.parseInt(stk.nextToken()); if (type == 1) { long k = Long.parseLong(stk.nextToken()) - 1; for (int i = n; i &amp;gt; 0; i--) { long mod = k / factorial[i - 1] + 1; //i번째에서 몇 번째 숫자를 선택할 지 구한다 k %= factorial[i - 1]; long cnt = 0; //mod 번째 숫자를 찾기 위한 변수 int idx = 0; //앞에서부터 해당 숫자를 확인할 때 사용하는 변수 while (cnt != mod) { idx++; if (!isUsed[idx]) cnt++; } isUsed[idx] = true; sb.append(idx + &quot; &quot;); } } else { long ans = 0; for (int i = 0; i &amp;lt; n; i++) { num[i] = Integer.parseInt(stk.nextToken()); long cnt = 0; //움직이는 횟수 int idx = 0; //idx 숫자를 사용했는지 확인하는 변수 while (num[i] != idx) { idx++; if (!isUsed[idx]) cnt++; } isUsed[idx] = true; ans += (cnt - 1) * factorial[n - i - 1]; } sb.append(ans + 1); } System.out.println(sb); } public static void getFactorial() { //factorial값 구하는 함수 factorial[0] = 1; factorial[1] = 1; for (int i = 2; i &amp;lt;= n; i++) { factorial[i] = factorial[i - 1] * i; } } }</summary></entry></feed>