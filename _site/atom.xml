<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-05-18T17:28:02+09:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Devlog</title><author><name>ChanSu Kim</name></author><entry><title type="html">OOP(객체지향 프로그래밍) 특징과 꼬리질문</title><link href="http://localhost:4000/java/2019/05/18/OOP(%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D)-%ED%8A%B9%EC%A7%95%EA%B3%BC-%EA%BC%AC%EB%A6%AC%EC%A7%88%EB%AC%B8/" rel="alternate" type="text/html" title="OOP(객체지향 프로그래밍) 특징과 꼬리질문" /><published>2019-05-18T17:00:00+09:00</published><updated>2019-05-18T17:00:00+09:00</updated><id>http://localhost:4000/java/2019/05/18/OOP(%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D)%20%ED%8A%B9%EC%A7%95%EA%B3%BC%20%EA%BC%AC%EB%A6%AC%EC%A7%88%EB%AC%B8</id><content type="html" xml:base="http://localhost:4000/java/2019/05/18/OOP(%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D)-%ED%8A%B9%EC%A7%95%EA%B3%BC-%EA%BC%AC%EB%A6%AC%EC%A7%88%EB%AC%B8/">&lt;h1 id=&quot;-oop객체지향-프로그래밍-&quot;&gt;&amp;lt; OOP(객체지향 프로그래밍) &amp;gt;&lt;/h1&gt;
&lt;p&gt;프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고 그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;코드 재사용이 용이하다.&lt;/li&gt;
  &lt;li&gt;유지보수가 쉽다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;처리속도가 상대적으로 느리다.&lt;/li&gt;
  &lt;li&gt;설계시에 많은 시간과 노력이 필요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;-클래스와-인스턴스객체-&quot;&gt;&amp;lt; 클래스와 인스턴스(객체) &amp;gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;클래스 : 객체의 속성(Attribute)과 행위(Behavior)를 변수와 메소드로 정의한 것&lt;/li&gt;
  &lt;li&gt;객체 : 클래스에 정의된 내용을 바탕으로 실제 메모리에 할당된 데이터&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;-oop객체지향-프로그래밍-4가지-특징캡상추다-&quot;&gt;&amp;lt; OOP(객체지향 프로그래밍) 4가지 특징(캡상추다) &amp;gt;&lt;/h1&gt;
&lt;h2 id=&quot;1-캡슐화&quot;&gt;1. 캡슐화&lt;/h2&gt;
&lt;p&gt;객체의 멤버변수는 private로 설정하여 외부에서 접근을 거부하고, Getter/Setter를 public으로 선언하여 객체의 속성에 접근하도록 사용한다.&lt;/p&gt;

&lt;p&gt;그 이유는 객체의 무결성을 보장하기 위함인데, 객체 필드에 직접적인 접근을 거부하고 잘못된 입력에 대해 Getter/Setter는 사전에 처리 및 제한할 수 있기 때문이다.&lt;/p&gt;

&lt;h3 id=&quot;-접근자-&quot;&gt;&amp;lt; 접근자 &amp;gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;public    : 모든 클래스, 패키지에 접근이 가능한 접근 제어자&lt;/li&gt;
  &lt;li&gt;private   : 같은 패키지에서만 접근 허용, 상속받은 자식 클래스에서는 서로 다른 패키지다 하더라도 접근 가능&lt;/li&gt;
  &lt;li&gt;default   : 같은 패키지에서만 접근 허용&lt;/li&gt;
  &lt;li&gt;protected : 같은 클래스에서만 접근 허용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-상속&quot;&gt;2. 상속&lt;/h2&gt;
&lt;p&gt;클래스의 멤버와 함수를 다른 클래스에 물려주거나, 물려 받는 것을 말하며 이를 통해 재사용성이 높아진다.&lt;/p&gt;

&lt;h2 id=&quot;3-추상화&quot;&gt;3. 추상화&lt;/h2&gt;
&lt;p&gt;중요한 정보만을 표현함으로써 공통의 속성이나 기능을 묶어 이를 하나의 클래스로 다루는 것&lt;/p&gt;

&lt;h2 id=&quot;4-다형성&quot;&gt;4. 다형성&lt;/h2&gt;
&lt;p&gt;오버로딩과 오버라이딩을 통해 다른 클래스의 객체가 같은 메시지를 받았을 때 각자의 방식으로 동작하는 능력&lt;/p&gt;

&lt;p&gt;오버로딩(Overloadding)    : 상위 클래스의 이름과 return값이 같지만, 매개변수를 다른 메소드를 만들어 가독성을 높이는 방법&lt;/p&gt;

&lt;p&gt;오버라이딩(Overriding)     : 상위 클래스에 존재하는 메소드를 하위 클래스에서 용도에 맞게 재정의 하여 재사용성을 높이는 방법&lt;/p&gt;

&lt;h1 id=&quot;-정적-함수-&quot;&gt;&amp;lt; 정적 함수 &amp;gt;&lt;/h1&gt;
&lt;p&gt;메모리에 호출되는데 static 으로 함수 또는 클래스를 선언했을 경우에 컴파일 동시에 메모리에 호출된다.&lt;/p&gt;

&lt;p&gt;이렇게 호출된 static은 프로그램이 종료되는 시점까지 유지된다.&lt;/p&gt;

&lt;p&gt;Main 함수의 경우 Java에서의 프로그램의 시작과 끝이기 때문에 Static으로 선언되어야 한다.&lt;/p&gt;

&lt;p&gt;참고) Singletone 패턴&lt;/p&gt;

&lt;h1 id=&quot;-call-by-value-vs-call-by-reference-&quot;&gt;&amp;lt; Call by Value vs Call by Reference &amp;gt;&lt;/h1&gt;
&lt;h2 id=&quot;call-by-value-값에-의한-호출--------java&quot;&gt;Call by Value (값에 의한 호출)        « Java&lt;/h2&gt;
&lt;p&gt;함수가 호출될 때, 메모리 공간 안에서는 함수를 위한 별도의 임시 공간이 생성된다.&lt;/p&gt;

&lt;p&gt;함수 호출시 인자로 전달되는 변수의 값을 복사하여 함수의 인자로 전달한다.&lt;/p&gt;

&lt;p&gt;복사된 인자는 함수 안에서 지역적으로 사용되는 local value의 특성을 가진다.&lt;/p&gt;

&lt;p&gt;따라서 함수 안에서 인자의 값이 변경되어도, 외부의 변수의 값은 변경되지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;call-by-reference-참조에-의한-호출&quot;&gt;Call by Reference (참조에 의한 호출)&lt;/h2&gt;
&lt;p&gt;함수가 호출될 때, 메모리 공간 안에서는 함수를 위한 별도의 임시 공간이 생성된다.&lt;/p&gt;

&lt;p&gt;함수 호출시 인자로 전달되는 변수의 레퍼런스를 전달한다. (해당 변수를 가리킨다.)&lt;/p&gt;

&lt;p&gt;따라서 함수 안에서 인자의 값이 변경되면, 인자로 전달된 변수의 값도 함께 변경된다.&lt;/p&gt;

&lt;p&gt;cf) Java는 자료형은(Integer, Long, String, …) Call by Value이다. 하지만 배열, 클래스는 Call by Reference로 생각하는 것이 편하다.&lt;/p&gt;

&lt;h1 id=&quot;-stringbuffer-vs-stringbuilder-&quot;&gt;&amp;lt; StringBuffer vs StringBuilder &amp;gt;&lt;/h1&gt;
&lt;p&gt;StringBuffer    : Multi-Thread 환경에서 동기화가 가능하기 때문에 Thread-Safe하다.&lt;/p&gt;

&lt;p&gt;StringBuilder   : 동기화를 지원하지 않기 때문에 멀티쓰레드환경에서는 적합하지 않지만 Single-Thread 환경에서 빠르다.&lt;/p&gt;

&lt;h1 id=&quot;-annotation-&quot;&gt;&amp;lt; Annotation &amp;gt;&lt;/h1&gt;
&lt;p&gt;어노테이션이란 본래 주석이란 뜻으로, 인터페이스를 기반으로 한 문법으로 주석처럼 코드에 달아 클래스에 특별한 의미를 부여하거나 기능을 주입할 수 있다.&lt;/p&gt;

&lt;p&gt;컴파일러에게 코드 문법 에러를 체크하도록 정보를 제공 및 실행 시(런타임 시) 특정 기능을 실행하도록 정보를 제공한다.&lt;/p&gt;

&lt;p&gt;어노테이션은 컴파일러에게 이 소스코드를 어떻게 처리해야 되는 것인지 표시를 해준다.&lt;/p&gt;

&lt;p&gt;예를들어 내장 어노테이션인 @Override 경우 해당 메소드가 부모클래스를 오버라이딩 한 메소드라고 컴파일러에게 미리 일러주는 것이다.&lt;/p&gt;

&lt;p&gt;따라서 컴파일러는 런타임 이전에 이 메소드가 문제없이 오버라이딩 되었는지 검사한다.&lt;/p&gt;

&lt;h1 id=&quot;-generic-&quot;&gt;&amp;lt; Generic &amp;gt;&lt;/h1&gt;
&lt;p&gt;제네릭 타입을 이용해서 컴파일 과정에서 타입 체크를 할 수 있다.&lt;/p&gt;

&lt;p&gt;제네릭은 클래스와 인터페이스, 메소드를 정의할 때 타입 파라미터로 사용한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;컴파일할 때 타입을 체크해서 에러를 사전에 잡을 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;컴파일러가 타입캐스팅을 해주기 때문에 개발자가 편리하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;타입만 다르고 코드의 내용이 대부분 일치할 때, 코드의 재사용성이 좋아진다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;-정리-&quot;&gt;&amp;lt; 정리 &amp;gt;&lt;/h1&gt;
&lt;p&gt;모든 클래스들이 접근 가능하여야 하고, 시작되기 전 메모리에 올려져 있어야 하며, return 값에는 의미가 없기 때문에 public static void main를 사용한다.&lt;/p&gt;</content><author><name>ChanSu Kim</name></author><category term="Java" /><category term="접근자" /><category term="static" /><category term="void" /><summary type="html">&amp;lt; OOP(객체지향 프로그래밍) &amp;gt; 프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고 그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법 장점 코드 재사용이 용이하다. 유지보수가 쉽다. 단점 처리속도가 상대적으로 느리다. 설계시에 많은 시간과 노력이 필요하다. &amp;lt; 클래스와 인스턴스(객체) &amp;gt; 클래스 : 객체의 속성(Attribute)과 행위(Behavior)를 변수와 메소드로 정의한 것 객체 : 클래스에 정의된 내용을 바탕으로 실제 메모리에 할당된 데이터 &amp;lt; OOP(객체지향 프로그래밍) 4가지 특징(캡상추다) &amp;gt; 1. 캡슐화 객체의 멤버변수는 private로 설정하여 외부에서 접근을 거부하고, Getter/Setter를 public으로 선언하여 객체의 속성에 접근하도록 사용한다. 그 이유는 객체의 무결성을 보장하기 위함인데, 객체 필드에 직접적인 접근을 거부하고 잘못된 입력에 대해 Getter/Setter는 사전에 처리 및 제한할 수 있기 때문이다. &amp;lt; 접근자 &amp;gt; public : 모든 클래스, 패키지에 접근이 가능한 접근 제어자 private : 같은 패키지에서만 접근 허용, 상속받은 자식 클래스에서는 서로 다른 패키지다 하더라도 접근 가능 default : 같은 패키지에서만 접근 허용 protected : 같은 클래스에서만 접근 허용 2. 상속 클래스의 멤버와 함수를 다른 클래스에 물려주거나, 물려 받는 것을 말하며 이를 통해 재사용성이 높아진다. 3. 추상화 중요한 정보만을 표현함으로써 공통의 속성이나 기능을 묶어 이를 하나의 클래스로 다루는 것 4. 다형성 오버로딩과 오버라이딩을 통해 다른 클래스의 객체가 같은 메시지를 받았을 때 각자의 방식으로 동작하는 능력 오버로딩(Overloadding) : 상위 클래스의 이름과 return값이 같지만, 매개변수를 다른 메소드를 만들어 가독성을 높이는 방법 오버라이딩(Overriding) : 상위 클래스에 존재하는 메소드를 하위 클래스에서 용도에 맞게 재정의 하여 재사용성을 높이는 방법 &amp;lt; 정적 함수 &amp;gt; 메모리에 호출되는데 static 으로 함수 또는 클래스를 선언했을 경우에 컴파일 동시에 메모리에 호출된다. 이렇게 호출된 static은 프로그램이 종료되는 시점까지 유지된다. Main 함수의 경우 Java에서의 프로그램의 시작과 끝이기 때문에 Static으로 선언되어야 한다. 참고) Singletone 패턴 &amp;lt; Call by Value vs Call by Reference &amp;gt; Call by Value (값에 의한 호출) « Java 함수가 호출될 때, 메모리 공간 안에서는 함수를 위한 별도의 임시 공간이 생성된다. 함수 호출시 인자로 전달되는 변수의 값을 복사하여 함수의 인자로 전달한다. 복사된 인자는 함수 안에서 지역적으로 사용되는 local value의 특성을 가진다. 따라서 함수 안에서 인자의 값이 변경되어도, 외부의 변수의 값은 변경되지 않는다. Call by Reference (참조에 의한 호출) 함수가 호출될 때, 메모리 공간 안에서는 함수를 위한 별도의 임시 공간이 생성된다. 함수 호출시 인자로 전달되는 변수의 레퍼런스를 전달한다. (해당 변수를 가리킨다.) 따라서 함수 안에서 인자의 값이 변경되면, 인자로 전달된 변수의 값도 함께 변경된다. cf) Java는 자료형은(Integer, Long, String, …) Call by Value이다. 하지만 배열, 클래스는 Call by Reference로 생각하는 것이 편하다. &amp;lt; StringBuffer vs StringBuilder &amp;gt; StringBuffer : Multi-Thread 환경에서 동기화가 가능하기 때문에 Thread-Safe하다. StringBuilder : 동기화를 지원하지 않기 때문에 멀티쓰레드환경에서는 적합하지 않지만 Single-Thread 환경에서 빠르다. &amp;lt; Annotation &amp;gt; 어노테이션이란 본래 주석이란 뜻으로, 인터페이스를 기반으로 한 문법으로 주석처럼 코드에 달아 클래스에 특별한 의미를 부여하거나 기능을 주입할 수 있다. 컴파일러에게 코드 문법 에러를 체크하도록 정보를 제공 및 실행 시(런타임 시) 특정 기능을 실행하도록 정보를 제공한다. 어노테이션은 컴파일러에게 이 소스코드를 어떻게 처리해야 되는 것인지 표시를 해준다. 예를들어 내장 어노테이션인 @Override 경우 해당 메소드가 부모클래스를 오버라이딩 한 메소드라고 컴파일러에게 미리 일러주는 것이다. 따라서 컴파일러는 런타임 이전에 이 메소드가 문제없이 오버라이딩 되었는지 검사한다. &amp;lt; Generic &amp;gt; 제네릭 타입을 이용해서 컴파일 과정에서 타입 체크를 할 수 있다. 제네릭은 클래스와 인터페이스, 메소드를 정의할 때 타입 파라미터로 사용한다. 컴파일할 때 타입을 체크해서 에러를 사전에 잡을 수 있다. 컴파일러가 타입캐스팅을 해주기 때문에 개발자가 편리하다. 타입만 다르고 코드의 내용이 대부분 일치할 때, 코드의 재사용성이 좋아진다. &amp;lt; 정리 &amp;gt; 모든 클래스들이 접근 가능하여야 하고, 시작되기 전 메모리에 올려져 있어야 하며, return 값에는 의미가 없기 때문에 public static void main를 사용한다.</summary></entry><entry><title type="html">Database Sharding(샤딩)이란?</title><link href="http://localhost:4000/database/2019/05/17/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%83%A4%EB%94%A9/" rel="alternate" type="text/html" title="Database Sharding(샤딩)이란?" /><published>2019-05-17T23:00:00+09:00</published><updated>2019-05-17T23:00:00+09:00</updated><id>http://localhost:4000/database/2019/05/17/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%20%EC%83%A4%EB%94%A9</id><content type="html" xml:base="http://localhost:4000/database/2019/05/17/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%83%A4%EB%94%A9/">&lt;h1 id=&quot;-sharding샤딩-&quot;&gt;&amp;lt; Sharding(샤딩) &amp;gt;&lt;/h1&gt;
&lt;p&gt;샤딩은 수평 분할(Horizontal Partitioning)과 동일하며, 인덱스의 크기를 줄이고, 작업 동시성을 늘리기 위한 것이다.&lt;/p&gt;

&lt;p&gt;수평 분할(Horizontal Partitioning)이란 스키마(schema)가 같은 데이터를 두 개 이상의 테이블에 나누어 저장하는 디자인을 말한다.&lt;/p&gt;

&lt;p&gt;가령 같은 주민 데이터를 처리하기 위해 스키마가 같은 ‘서현동주민 테이블’과 ‘정자동주민 테이블’을 사용하는 것을 말한다.&lt;/p&gt;

&lt;p&gt;데이터베이스를 샤딩하게 되면 기존에 하나로 구성될 스키마를 다수의 복제본으로 구성하고 각각의 샤드에 어떤 데이터가 저장될지를 샤드키를 기준으로 분리한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Sharding.png&quot; alt=&quot;Imeage&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-sharding샤딩의-단점-&quot;&gt;&amp;lt; Sharding(샤딩)의 단점 &amp;gt;&lt;/h1&gt;
&lt;p&gt;프로그래밍적, 운영적인 복잡도가 높아진다.&lt;/p&gt;

&lt;p&gt;즉, 샤딩을 시작하기 전에 샤딩을 피하거나 지연시킬 수 있는 방법을 찾는게 우선이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;좀더 고스펙의 컴퓨터를 사용한다.&lt;/li&gt;
  &lt;li&gt;Read(Select) 명령이 많다면 Cache나 Database Replication을 적용한다.&lt;/li&gt;
  &lt;li&gt;Table의 일부 Column만 사용한다면 수직 분할(Vertically Partitioning)을 사용한다 / Cold &amp;amp; Hot data를 사용한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;참고) Database Replication이란?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2개 이상의 DBMS를 Master와 Slave로 나누어 동일한 데이터를 저장한다.&lt;/p&gt;

&lt;p&gt;Master DB는 Insert, Update, Delete의 기능을 수행하고, Slave DB에 실제 데이터를 복사한다.&lt;/p&gt;

&lt;p&gt;Slave DB 시간이 오래걸리는 Select문의 기능을 수행하여 전체적인 Select문 성능을 향상시킨다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고) Cold / Hot Data 란?&lt;/strong&gt;    &lt;a href=&quot;https://d2.naver.com/helloworld/526125&quot;&gt;Naver D2 :: Cold Storage 소개&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hot data : 자주 사용되는 데이터&lt;/p&gt;

&lt;p&gt;Cold data : 드물게 사용되거나 아예 사용되지 않는 데이터&lt;/p&gt;

&lt;p&gt;Cold Storage : 에너지 절감을 위해 연산 능력에서 손해를 보더라도 낮은 가격과 저전력으로 자주 사용되지 않는 데이터를 처리하는 데이터 저장 장치 및 시스템&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-sharding샤딩의-주요-관점-&quot;&gt;&amp;lt; Sharding(샤딩)의 주요 관점 &amp;gt;&lt;/h1&gt;
&lt;p&gt;분산된 DB에서 어떻게 Data를 읽어올 것인지?&lt;/p&gt;

&lt;p&gt;분산된 DB에 Data를 어떻게 잘 분산시킬지? » Shard Key를 어떻게 정의하는지에 따라 달라진다.&lt;/p&gt;

&lt;h2 id=&quot;-case-1-algorithm-sharding-&quot;&gt;&amp;lt; Case 1. Algorithm Sharding &amp;gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/AlgorithmSharding.png&quot; alt=&quot;Imeage&quot; /&gt;
Database id를 단순하게 나누어 샤딩하는 방식&lt;/p&gt;

&lt;p&gt;Sharding Key는 hash(key) % NUM_DB 같은 방식&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;같은 값을 가지는 key-value 데이터베이스에 적합하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cluster를 포함하는 Node 갯수가 변하게 되면 Resharding이 필요하다.&lt;/p&gt;

&lt;p&gt;Hash Key로 분산되기 때문에 공간에 대한 효율이 부족하다.&lt;/p&gt;

&lt;h2 id=&quot;-case-2-dynamic-sharding-&quot;&gt;&amp;lt; Case 2. Dynamic Sharding &amp;gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/DynamicSharding.png&quot; alt=&quot;Imeage&quot; /&gt;
클라이언트는 Locator Service에 접근하여 Shard Key를 얻는다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cluster가 포함하는 Node 갯수가 변하면 Shard Key를 추가하기만 하면 된다.&lt;/p&gt;

&lt;p&gt;확장에 유연하게 대처가능하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Data Relocation시에는 Locator Service의 Shard key Table도 일치시켜야 한다.&lt;/p&gt;

&lt;p&gt;Locator에 의존할 수 밖에 없는 구조이다.&lt;/p&gt;

&lt;h2 id=&quot;-case-3-entity-group-&quot;&gt;&amp;lt; Case 3. Entity Group &amp;gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/EntityGroup.png&quot; alt=&quot;Imeage&quot; /&gt;
RDBMS의 Join, Index, Transaction을 사용하여 복잡도를 줄이는 방식과 유사&lt;/p&gt;

&lt;p&gt;동일한 파티션의 관련 엔티티를 저장하여 단일 파티션 안에서 추가 기능을 제공하는 방식&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;하나의 물리적인 Shard에 쿼리를 진행하면 효율적이된다.&lt;/p&gt;

&lt;p&gt;사용자의 증가에 따른 확장성이 좋은 파티셔닝이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;특정 파티션간 쿼리가 자주 요구되는 경우가 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-참고-자료-&quot;&gt;&amp;lt; 참고 자료 &amp;gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://nesoy.github.io/articles/2018-05/Database-Shard&quot;&gt;Database의 샤딩(Sharding)이란?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@jeeyoungk/how-sharding-works-b4dec46b3f6&quot;&gt;How Sharding Works&lt;/a&gt;&lt;/p&gt;</content><author><name>ChanSu Kim</name></author><category term="Database" /><category term="Sharding" /><category term="샤딩" /><summary type="html">&amp;lt; Sharding(샤딩) &amp;gt; 샤딩은 수평 분할(Horizontal Partitioning)과 동일하며, 인덱스의 크기를 줄이고, 작업 동시성을 늘리기 위한 것이다. 수평 분할(Horizontal Partitioning)이란 스키마(schema)가 같은 데이터를 두 개 이상의 테이블에 나누어 저장하는 디자인을 말한다. 가령 같은 주민 데이터를 처리하기 위해 스키마가 같은 ‘서현동주민 테이블’과 ‘정자동주민 테이블’을 사용하는 것을 말한다. 데이터베이스를 샤딩하게 되면 기존에 하나로 구성될 스키마를 다수의 복제본으로 구성하고 각각의 샤드에 어떤 데이터가 저장될지를 샤드키를 기준으로 분리한다. &amp;lt; Sharding(샤딩)의 단점 &amp;gt; 프로그래밍적, 운영적인 복잡도가 높아진다. 즉, 샤딩을 시작하기 전에 샤딩을 피하거나 지연시킬 수 있는 방법을 찾는게 우선이다. 좀더 고스펙의 컴퓨터를 사용한다. Read(Select) 명령이 많다면 Cache나 Database Replication을 적용한다. Table의 일부 Column만 사용한다면 수직 분할(Vertically Partitioning)을 사용한다 / Cold &amp;amp; Hot data를 사용한다. 참고) Database Replication이란? 2개 이상의 DBMS를 Master와 Slave로 나누어 동일한 데이터를 저장한다. Master DB는 Insert, Update, Delete의 기능을 수행하고, Slave DB에 실제 데이터를 복사한다. Slave DB 시간이 오래걸리는 Select문의 기능을 수행하여 전체적인 Select문 성능을 향상시킨다. 참고) Cold / Hot Data 란? Naver D2 :: Cold Storage 소개 Hot data : 자주 사용되는 데이터 Cold data : 드물게 사용되거나 아예 사용되지 않는 데이터 Cold Storage : 에너지 절감을 위해 연산 능력에서 손해를 보더라도 낮은 가격과 저전력으로 자주 사용되지 않는 데이터를 처리하는 데이터 저장 장치 및 시스템 &amp;lt; Sharding(샤딩)의 주요 관점 &amp;gt; 분산된 DB에서 어떻게 Data를 읽어올 것인지? 분산된 DB에 Data를 어떻게 잘 분산시킬지? » Shard Key를 어떻게 정의하는지에 따라 달라진다. &amp;lt; Case 1. Algorithm Sharding &amp;gt; Database id를 단순하게 나누어 샤딩하는 방식 Sharding Key는 hash(key) % NUM_DB 같은 방식 장점 같은 값을 가지는 key-value 데이터베이스에 적합하다. 단점 Cluster를 포함하는 Node 갯수가 변하게 되면 Resharding이 필요하다. Hash Key로 분산되기 때문에 공간에 대한 효율이 부족하다. &amp;lt; Case 2. Dynamic Sharding &amp;gt; 클라이언트는 Locator Service에 접근하여 Shard Key를 얻는다. 장점 Cluster가 포함하는 Node 갯수가 변하면 Shard Key를 추가하기만 하면 된다. 확장에 유연하게 대처가능하다. 단점 Data Relocation시에는 Locator Service의 Shard key Table도 일치시켜야 한다. Locator에 의존할 수 밖에 없는 구조이다. &amp;lt; Case 3. Entity Group &amp;gt; RDBMS의 Join, Index, Transaction을 사용하여 복잡도를 줄이는 방식과 유사 동일한 파티션의 관련 엔티티를 저장하여 단일 파티션 안에서 추가 기능을 제공하는 방식 장점 하나의 물리적인 Shard에 쿼리를 진행하면 효율적이된다. 사용자의 증가에 따른 확장성이 좋은 파티셔닝이다. 단점 특정 파티션간 쿼리가 자주 요구되는 경우가 있다. &amp;lt; 참고 자료 &amp;gt; Database의 샤딩(Sharding)이란? How Sharding Works</summary></entry><entry><title type="html">Oracle ANSI SQL과 INNER/OUTER JOIN 차이</title><link href="http://localhost:4000/database/2019/05/17/Oracle-ANSI-SQL%EA%B3%BC-%EB%82%B4%EC%99%B8%EB%B6%80-JOIN/" rel="alternate" type="text/html" title="Oracle ANSI SQL과 INNER/OUTER JOIN 차이" /><published>2019-05-17T23:00:00+09:00</published><updated>2019-05-17T23:00:00+09:00</updated><id>http://localhost:4000/database/2019/05/17/Oracle%20ANSI%20SQL%EA%B3%BC%20%EB%82%B4%EC%99%B8%EB%B6%80%20JOIN</id><content type="html" xml:base="http://localhost:4000/database/2019/05/17/Oracle-ANSI-SQL%EA%B3%BC-%EB%82%B4%EC%99%B8%EB%B6%80-JOIN/">&lt;h1 id=&quot;-ansi-sql-&quot;&gt;&amp;lt; ANSI SQL &amp;gt;&lt;/h1&gt;
&lt;p&gt;ANSI SQL에 대해 알아보자.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;표준 SQL문이기 때문에 DBMS의 종류에 제약을 받지 않는다. (MySQL, OracleDB..)&lt;/li&gt;
  &lt;li&gt;테이블간의 Join 관계가 FROM 에서 명시되기 때문에 WHERE 문에서 조건만 확인하면 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;즉, 가독성이 일반 Query문보다 좋다.&lt;/p&gt;

&lt;p&gt;대표적인 예시로 ANSI SQL의 두번째 장점인 가독성에 대해서알아보자.&lt;/p&gt;

&lt;p&gt;일반 SQL Query는 다음과 같다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;-- 일반적인 SQL Query
SELECT * 
FROM table1 as t1, table2 as t2 WHERE t1.a = t2.b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;즉, WHERE문에서 Table을 JOIN하는 방식이다.&lt;/p&gt;

&lt;p&gt;단순한 Query라면 가독성에 전혀 문제가 없지만, Query가 길어지게되면 가독성이 떨어질 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;이와 다르게 ANSI SQL Query 는 FROM 절에서 JOIN을 이용하여 묶고, WHERE에는 검색 조건만 넣어 가독성이 좋다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;-- ANSI SQL Query 
SELECT * 
FROM table1 as t1 LEFT OUTER JOIN table as t2 ON t1.a = t2.b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위의 ANSI SQL에서는 LEFT OUTER JOIN을 사용하여 FROM절에 Table JOIN 하였다.&lt;/p&gt;

&lt;p&gt;ANSI SQL에서 사용하는 INNER/OUERT JOIN 의 개념을 명확히 아는 것 또한 중요하다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-inner-join-&quot;&gt;&amp;lt; INNER JOIN &amp;gt;&lt;/h1&gt;
&lt;p&gt;두 테이블간 ON 조건을 만족하는 ROW만 출력된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;-- INNER JOIN 
SELECT * 
FROM table1 as t1 INNER JOIN table2 as t2 ON t1.a = t2.b;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Query가 위와 같을 때, ON 조건인 t1.a = t2.b 를 만족하는 Row 만 출력된다.&lt;/p&gt;

&lt;h1 id=&quot;-outer-join-&quot;&gt;&amp;lt; OUTER JOIN &amp;gt;&lt;/h1&gt;
&lt;p&gt;대표적으로 자주 사용하는 LEFT OUTER JOIN 에 대해서 알아보자.&lt;/p&gt;

&lt;p&gt;OUTER 명령어는 생략이 가능하다. 즉, LEFT OUTER JOIN = LEFT JOIN과 같다.&lt;/p&gt;

&lt;p&gt;LEFT TABLE 을 기준으로 오른쪽에 덧붙이는 느낌으로 생각하면 된다.&lt;/p&gt;

&lt;p&gt;즉, LEFT TABLE의 결과값을 가져오고 ON 조건에 해당하는 경우 오른쪽에 매칭, 데이터가 없는 경우 NULL로 출력된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;-- OUTER JOIN 
SELECT * 
FROM table1 as t1 LEFT OUTER JOIN table2 as t2 ON t1.a = t2.b;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;t1.a = t2.b 인 경우, t1의 값이 10행 이라면, 해당 쿼리의 결과도 10행이 유지되고, ON 조건에 해당하는 Row가 있다면 오른쪽에 데이터가 매칭된다.&lt;/p&gt;

&lt;p&gt;단, 1개의 t1 행에 ON 조건을 만족하는 t2의 값이 여러개라면, Row가 증가할 수도 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-결론-&quot;&gt;&amp;lt; 결론 &amp;gt;&lt;/h1&gt;
&lt;p&gt;ANSI SQL 에 맞춰서 Query를 짜는 습관을 가지자.&lt;/p&gt;

&lt;p&gt;즉, WHERE 문에서는 검색조건만 넣도록, Table JOIN 은 FROM절에 묶어서 처리하자.&lt;/p&gt;</content><author><name>ChanSu Kim</name></author><category term="Database" /><category term="ANSI SQL" /><category term="INNER JOIN" /><category term="OUTER JOIN" /><summary type="html">&amp;lt; ANSI SQL &amp;gt; ANSI SQL에 대해 알아보자. 표준 SQL문이기 때문에 DBMS의 종류에 제약을 받지 않는다. (MySQL, OracleDB..) 테이블간의 Join 관계가 FROM 에서 명시되기 때문에 WHERE 문에서 조건만 확인하면 된다. 즉, 가독성이 일반 Query문보다 좋다. 대표적인 예시로 ANSI SQL의 두번째 장점인 가독성에 대해서알아보자. 일반 SQL Query는 다음과 같다. -- 일반적인 SQL Query SELECT * FROM table1 as t1, table2 as t2 WHERE t1.a = t2.b 즉, WHERE문에서 Table을 JOIN하는 방식이다. 단순한 Query라면 가독성에 전혀 문제가 없지만, Query가 길어지게되면 가독성이 떨어질 수 밖에 없다. 이와 다르게 ANSI SQL Query 는 FROM 절에서 JOIN을 이용하여 묶고, WHERE에는 검색 조건만 넣어 가독성이 좋다. -- ANSI SQL Query SELECT * FROM table1 as t1 LEFT OUTER JOIN table as t2 ON t1.a = t2.b 위의 ANSI SQL에서는 LEFT OUTER JOIN을 사용하여 FROM절에 Table JOIN 하였다. ANSI SQL에서 사용하는 INNER/OUERT JOIN 의 개념을 명확히 아는 것 또한 중요하다. &amp;lt; INNER JOIN &amp;gt; 두 테이블간 ON 조건을 만족하는 ROW만 출력된다. -- INNER JOIN SELECT * FROM table1 as t1 INNER JOIN table2 as t2 ON t1.a = t2.b; Query가 위와 같을 때, ON 조건인 t1.a = t2.b 를 만족하는 Row 만 출력된다. &amp;lt; OUTER JOIN &amp;gt; 대표적으로 자주 사용하는 LEFT OUTER JOIN 에 대해서 알아보자. OUTER 명령어는 생략이 가능하다. 즉, LEFT OUTER JOIN = LEFT JOIN과 같다. LEFT TABLE 을 기준으로 오른쪽에 덧붙이는 느낌으로 생각하면 된다. 즉, LEFT TABLE의 결과값을 가져오고 ON 조건에 해당하는 경우 오른쪽에 매칭, 데이터가 없는 경우 NULL로 출력된다. -- OUTER JOIN SELECT * FROM table1 as t1 LEFT OUTER JOIN table2 as t2 ON t1.a = t2.b; t1.a = t2.b 인 경우, t1의 값이 10행 이라면, 해당 쿼리의 결과도 10행이 유지되고, ON 조건에 해당하는 Row가 있다면 오른쪽에 데이터가 매칭된다. 단, 1개의 t1 행에 ON 조건을 만족하는 t2의 값이 여러개라면, Row가 증가할 수도 있다. &amp;lt; 결론 &amp;gt; ANSI SQL 에 맞춰서 Query를 짜는 습관을 가지자. 즉, WHERE 문에서는 검색조건만 넣도록, Table JOIN 은 FROM절에 묶어서 처리하자.</summary></entry><entry><title type="html">백준/11399 ATM</title><link href="http://localhost:4000/%EB%B0%B1%EC%A4%80/%EC%A0%95%EB%A0%AC/2019/05/16/%EB%B0%B1%EC%A4%80-11399-ATM/" rel="alternate" type="text/html" title="백준/11399 ATM" /><published>2019-05-16T13:36:00+09:00</published><updated>2019-05-16T13:36:00+09:00</updated><id>http://localhost:4000/%EB%B0%B1%EC%A4%80/%EC%A0%95%EB%A0%AC/2019/05/16/%EB%B0%B1%EC%A4%80%2011399%20ATM</id><content type="html" xml:base="http://localhost:4000/%EB%B0%B1%EC%A4%80/%EC%A0%95%EB%A0%AC/2019/05/16/%EB%B0%B1%EC%A4%80-11399-ATM/">&lt;h2 id=&quot;-문제-분석-및-풀이-방법-&quot;&gt;&amp;lt; 문제 분석 및 풀이 방법 &amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/11399&quot;&gt;백준 ATM&lt;/a&gt; 문제는 오름차순 정렬 후 값을 더해가면 된다.&lt;/p&gt;

&lt;p&gt;오름차순이 필요한 이유는 대기시간이 짧은 사람부터 해결하는 것이 뒤에 사람들이 기다리는 시간이 최소가 되기 때문이다.&lt;/p&gt;

&lt;p&gt;Java의 경우 Arrays.sort로 정렬해도 되지만, MergeSort 구현 연습도 할 겸해서 합병정렬로 정렬했다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;입력받은 배열을 Arrays.sort 또는 MergeSort로 오름차순 정렬한다.&lt;/li&gt;
  &lt;li&gt;각 idx 마다 기다리는 시간을 더해주면서 값을 구한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;-소스-코드-&quot;&gt;&amp;lt; 소스 코드 &amp;gt;&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//1. 정렬&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//2. 각 idx 마다 기다리는 시간을 더해준다.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ChanSu Kim</name></author><category term="백준" /><category term="백준 11399" /><category term="백준 ATM" /><category term="합병정렬" /><category term="MergeSort" /><summary type="html">&amp;lt; 문제 분석 및 풀이 방법 &amp;gt; 백준 ATM 문제는 오름차순 정렬 후 값을 더해가면 된다. 오름차순이 필요한 이유는 대기시간이 짧은 사람부터 해결하는 것이 뒤에 사람들이 기다리는 시간이 최소가 되기 때문이다. Java의 경우 Arrays.sort로 정렬해도 되지만, MergeSort 구현 연습도 할 겸해서 합병정렬로 정렬했다. 입력받은 배열을 Arrays.sort 또는 MergeSort로 오름차순 정렬한다. 각 idx 마다 기다리는 시간을 더해주면서 값을 구한다. &amp;lt; 소스 코드 &amp;gt; import java.io.*; import java.util.*; public class Main { public static StringTokenizer stk; public static StringBuilder sb = new StringBuilder(); public static int[] sort; public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int n = Integer.parseInt(br.readLine()); int[] arr = new int[n]; sort = new int[n]; stk = new StringTokenizer(br.readLine()); for (int i = 0; i &amp;lt; n; i++) { arr[i] = Integer.parseInt(stk.nextToken()); } merge(arr, 0, n - 1); //1. 정렬 int ans = 0, sum = 0; //2. 각 idx 마다 기다리는 시간을 더해준다. for (int i = 0; i &amp;lt; n; i++) { sum += arr[i]; ans += sum; } System.out.println(ans); } public static void merge(int[] arr, int start, int end) { if (start &amp;lt; end) { int mid = (start + end) / 2; merge(arr, start, mid); merge(arr, mid + 1, end); mergeSort(arr, start, mid, end); } } public static void mergeSort(int[] arr, int start, int mid, int end) { int left = start; int right = mid + 1; int idx = start; while (left &amp;lt;= mid &amp;amp;&amp;amp; right &amp;lt;= end) { if (arr[left] &amp;lt; arr[right]) { sort[idx++] = arr[left++]; } else { sort[idx++] = arr[right++]; } } while (left &amp;lt;= mid) sort[idx++] = arr[left++]; while (right &amp;lt;= end) sort[idx++] = arr[right++]; for (int i = start; i &amp;lt;= end; i++) { arr[i] = sort[i]; } } }</summary></entry><entry><title type="html">백준/9935 문자열 폭발</title><link href="http://localhost:4000/%EB%B0%B1%EC%A4%80/%EC%8A%A4%ED%83%9D/2019/05/16/%EB%B0%B1%EC%A4%80-9935-%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%8F%AD%EB%B0%9C/" rel="alternate" type="text/html" title="백준/9935 문자열 폭발" /><published>2019-05-16T01:36:00+09:00</published><updated>2019-05-16T01:36:00+09:00</updated><id>http://localhost:4000/%EB%B0%B1%EC%A4%80/%EC%8A%A4%ED%83%9D/2019/05/16/%EB%B0%B1%EC%A4%80%209935%20%EB%AC%B8%EC%9E%90%EC%97%B4%20%ED%8F%AD%EB%B0%9C</id><content type="html" xml:base="http://localhost:4000/%EB%B0%B1%EC%A4%80/%EC%8A%A4%ED%83%9D/2019/05/16/%EB%B0%B1%EC%A4%80-9935-%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%8F%AD%EB%B0%9C/">&lt;h2 id=&quot;-문제-분석-및-풀이-방법-&quot;&gt;&amp;lt; 문제 분석 및 풀이 방법 &amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/9935&quot;&gt;문자열 폭발&lt;/a&gt; 문제는 스택을 활용하는 문제다.&lt;/p&gt;

&lt;p&gt;Stack 클래스를 사용할 필요 없이 배열을 스택처럼 사용하면 된다.&lt;/p&gt;

&lt;p&gt;입력받는 문자열을 전부 char 배열로 변환해 체크했다.&lt;/p&gt;

&lt;p&gt;입력받는 문자열 : target&lt;/p&gt;

&lt;p&gt;찾아야 하는 문자열 : find&lt;/p&gt;

&lt;p&gt;옮기는 char 배열 : stack&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;현재 stack 배열 idx가 find 길이보다 작다면 stack 배열에 target[idx] 문자를 추가한다.&lt;/li&gt;
  &lt;li&gt;1번에 해당되지 않고 find 마지막 문자와 다르면 stack 배열에 target[idx] 문자를 추가한다.&lt;/li&gt;
  &lt;li&gt;1,2번에 해당하지 않고 find 마지막 문자와 target[idx]의 문자가 같으면 find 배열 길이만큼 for문을 돌면서 일치 여부를 확인한다.
    &lt;ol&gt;
      &lt;li&gt;만약 일치한다면 idx를 현재 위치로 옮긴다.(덮어 씌우니까 따로 지울 필요는 없다)&lt;/li&gt;
      &lt;li&gt;만약 일치하지 않는다면 stack 배열에 target[idx] 문자를 추가한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;-소스-코드-&quot;&gt;&amp;lt; 소스 코드 &amp;gt;&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;//찾아야 하는 문자열 길이보다 작으면 계속 옮긴다&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//찾아야 하는 문자열 끝과 옮긴 문자가 같다면&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//일치여부 확인&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//일치하면 idx 앞으로 이동&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FRULA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ChanSu Kim</name></author><category term="백준" /><category term="백준 9935" /><category term="백준 문자열 폭발" /><category term="스텍" /><summary type="html">&amp;lt; 문제 분석 및 풀이 방법 &amp;gt; 문자열 폭발 문제는 스택을 활용하는 문제다. Stack 클래스를 사용할 필요 없이 배열을 스택처럼 사용하면 된다. 입력받는 문자열을 전부 char 배열로 변환해 체크했다. 입력받는 문자열 : target 찾아야 하는 문자열 : find 옮기는 char 배열 : stack 현재 stack 배열 idx가 find 길이보다 작다면 stack 배열에 target[idx] 문자를 추가한다. 1번에 해당되지 않고 find 마지막 문자와 다르면 stack 배열에 target[idx] 문자를 추가한다. 1,2번에 해당하지 않고 find 마지막 문자와 target[idx]의 문자가 같으면 find 배열 길이만큼 for문을 돌면서 일치 여부를 확인한다. 만약 일치한다면 idx를 현재 위치로 옮긴다.(덮어 씌우니까 따로 지울 필요는 없다) 만약 일치하지 않는다면 stack 배열에 target[idx] 문자를 추가한다. &amp;lt; 소스 코드 &amp;gt; import java.io.*; import java.util.*; public class Main { public static StringTokenizer stk; public static StringBuilder sb = new StringBuilder(); public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); char[] target = br.readLine().toCharArray(); char[] find = br.readLine().toCharArray(); char[] stack = new char[target.length]; int idx = 0; for (int i = 0; i &amp;lt; target.length; i++) { stack[idx++] = target[i]; if (idx &amp;lt; find.length) continue; //찾아야 하는 문자열 길이보다 작으면 계속 옮긴다 if (target[i] == find[find.length - 1]) { //찾아야 하는 문자열 끝과 옮긴 문자가 같다면 boolean flag = false; for (int j = 0; j &amp;lt;= find.length - 1; j++) { //일치여부 확인 if (stack[idx - find.length + j] != find[j]) flag = true; } if (!flag) { //일치하면 idx 앞으로 이동 idx = idx - find.length; } } } if (idx == 0) System.out.println(&quot;FRULA&quot;); else { for (int i = 0; i &amp;lt; idx; i++) { sb.append(stack[i]); } System.out.println(sb); } } }</summary></entry><entry><title type="html">2019 CJ올리브네트웍스 1차 면접 후기</title><link href="http://localhost:4000/%EB%A9%B4%EC%A0%91/2019/05/14/2019-CJ%EC%98%AC%EB%A6%AC%EB%B8%8C%EB%84%A4%ED%8A%B8%EC%9B%8D%EC%8A%A4-%EB%A9%B4%EC%A0%91-%ED%9B%84%EA%B8%B0/" rel="alternate" type="text/html" title="2019 CJ올리브네트웍스 1차 면접 후기" /><published>2019-05-14T14:41:01+09:00</published><updated>2019-05-14T14:41:01+09:00</updated><id>http://localhost:4000/%EB%A9%B4%EC%A0%91/2019/05/14/2019%20CJ%EC%98%AC%EB%A6%AC%EB%B8%8C%EB%84%A4%ED%8A%B8%EC%9B%8D%EC%8A%A4%20%EB%A9%B4%EC%A0%91%20%ED%9B%84%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/%EB%A9%B4%EC%A0%91/2019/05/14/2019-CJ%EC%98%AC%EB%A6%AC%EB%B8%8C%EB%84%A4%ED%8A%B8%EC%9B%8D%EC%8A%A4-%EB%A9%B4%EC%A0%91-%ED%9B%84%EA%B8%B0/">&lt;h2 id=&quot;-cj-1차-면접-후기-&quot;&gt;&amp;lt; CJ 1차 면접 후기 &amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/CJAT_result.png&quot; alt=&quot;Image&quot; width=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CJ 면접은 특이하게 호텔 한층을 빌려서 방을 면접장처럼 개조해서 진행한다.&lt;/p&gt;

&lt;p&gt;8시 도착해서 출석체크에 서명하는데 어떤 면접을 먼저 보는지 나와있다.&lt;/p&gt;

&lt;p&gt;CJ 관련 복지 이야기 듣고 면접 대기실 이동&lt;/p&gt;

&lt;h2 id=&quot;-보고합시다-&quot;&gt;&amp;lt; 보고합시다 &amp;gt;&lt;/h2&gt;
&lt;p&gt;면접관 2명, 지원자 4~6명 이서 진행하는 방식이다.&lt;/p&gt;

&lt;p&gt;휴식시간 없이 거의 2시간 30분정도 계속 진행되기 때문에 화장실은 미리 다녀와야한다.&lt;/p&gt;

&lt;p&gt;인적성부터 변화가 있길래 심층 면접도 어느정도 변화가 있을 줄 알았지만 소문대로 똑같았다.&lt;/p&gt;

&lt;p&gt;주제 : 디지털 트랜스포메이션 시대에 IT 소외계층(어르신, 장애인)이 디지털 소외감을 해결하는 방안&lt;/p&gt;

&lt;p&gt;정말 주제잘못생각해서 뭐 온라인으로 TV 활용한다, 오프라인 교육한다 이런식으로 적었다가 잘못된걸 깨달았다.&lt;/p&gt;

&lt;p&gt;중간 보고 이후에 팀원 각자에게 개인 질문을 하신다.&lt;/p&gt;

&lt;p&gt;이후 다시 팀원과 회의해서 최종 발표를 하고 끝날 때 각자에게 개인 질문 + 설문 조사(자신의 역할과 팀원중 잘한사람 2명과 이유)&lt;/p&gt;

&lt;p&gt;팀원중에 시간이 부족한데 말을 계속 이어가시는 분도 있어서 힘들었던 부분도 있었던 만큼 팀원운도 어느정도 중요하다.&lt;/p&gt;

&lt;h2 id=&quot;-직무-면접-&quot;&gt;&amp;lt; 직무 면접 &amp;gt;&lt;/h2&gt;
&lt;p&gt;보고합시다 이후 약 한 시간정도의 공백이 있었다.&lt;/p&gt;

&lt;p&gt;운이 좋은(?) 분은 보고합시다 면접 끝나자마자 바로 직무면접 가시는 분도 계셨다.&lt;/p&gt;

&lt;p&gt;면접관 2명, 지원자 2명&lt;/p&gt;

&lt;p&gt;보통 3명씩 진행하는 반면, 토론 면접때 같이 했던 사람과 같이 면접에 들어갔다.&lt;/p&gt;

&lt;p&gt;면접관들도 최대한 편하게 해주시려고 하시고, 이야기도 되도록 들어주시려고 하신다.&lt;/p&gt;

&lt;p&gt;옆 지원자분이 말이 엄청 길었는데 다 들어주시는 모습 보면서 대단하다고 생각..&lt;/p&gt;

&lt;p&gt;자소서 기반으로 면접이 진행된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1분자기소개&lt;/li&gt;
  &lt;li&gt;어디서 인턴 했는지와 무슨 일을 했는지&lt;/li&gt;
  &lt;li&gt;4차 산업혁명중 최근에 공부하는게 있는지?
    &lt;ul&gt;
      &lt;li&gt;최근 공부하는 4차 산업혁명 기술은 없어서 난항..&lt;/li&gt;
      &lt;li&gt;AWS EC2를 최근 했다고 말씀드렸더니 그거 없어졌는데 하셔서 당황..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;직무를 위해서 최근 하는 노력은?
    &lt;ul&gt;
      &lt;li&gt;개인 공부를 하고 있다고 말씀드림&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이력서에 프로젝트가 적은데 그 이유는?
    &lt;ul&gt;
      &lt;li&gt;이력서에 다 적지는 않았지만 그동안 했던 프로젝트를 말씀드림&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;자소서에 ENM 계열사를 작성한 이유는?&lt;/li&gt;
  &lt;li&gt;ENM 계열사가 아니면 안되는지?&lt;/li&gt;
  &lt;li&gt;(농담식으로) 개발이 재미있어요?
    &lt;ul&gt;
      &lt;li&gt;어떻게 답변해야할지 몰라서 재미있다고 단답으로 마무리했는데 음..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;자소서에 팀원간 어려움이 있었다는데 어떤 어려움인지?
    &lt;ul&gt;
      &lt;li&gt;R&amp;amp;R로 해결&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;회사에 물어보고 싶은 것&lt;/li&gt;
  &lt;li&gt;마지막 자기 자랑이나 하고싶은 말&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2명이서 30분정도 걸렸는데 실질적으로 질문 받은건 몇개 안된다.&lt;/p&gt;

&lt;p&gt;면접 결과가 나와봐야 알 것 같다.&lt;/p&gt;</content><author><name>ChanSu Kim</name></author><category term="CJ올리브네트웍스" /><category term="면접" /><summary type="html">&amp;lt; CJ 1차 면접 후기 &amp;gt; CJ 면접은 특이하게 호텔 한층을 빌려서 방을 면접장처럼 개조해서 진행한다. 8시 도착해서 출석체크에 서명하는데 어떤 면접을 먼저 보는지 나와있다. CJ 관련 복지 이야기 듣고 면접 대기실 이동 &amp;lt; 보고합시다 &amp;gt; 면접관 2명, 지원자 4~6명 이서 진행하는 방식이다. 휴식시간 없이 거의 2시간 30분정도 계속 진행되기 때문에 화장실은 미리 다녀와야한다. 인적성부터 변화가 있길래 심층 면접도 어느정도 변화가 있을 줄 알았지만 소문대로 똑같았다. 주제 : 디지털 트랜스포메이션 시대에 IT 소외계층(어르신, 장애인)이 디지털 소외감을 해결하는 방안 정말 주제잘못생각해서 뭐 온라인으로 TV 활용한다, 오프라인 교육한다 이런식으로 적었다가 잘못된걸 깨달았다. 중간 보고 이후에 팀원 각자에게 개인 질문을 하신다. 이후 다시 팀원과 회의해서 최종 발표를 하고 끝날 때 각자에게 개인 질문 + 설문 조사(자신의 역할과 팀원중 잘한사람 2명과 이유) 팀원중에 시간이 부족한데 말을 계속 이어가시는 분도 있어서 힘들었던 부분도 있었던 만큼 팀원운도 어느정도 중요하다. &amp;lt; 직무 면접 &amp;gt; 보고합시다 이후 약 한 시간정도의 공백이 있었다. 운이 좋은(?) 분은 보고합시다 면접 끝나자마자 바로 직무면접 가시는 분도 계셨다. 면접관 2명, 지원자 2명 보통 3명씩 진행하는 반면, 토론 면접때 같이 했던 사람과 같이 면접에 들어갔다. 면접관들도 최대한 편하게 해주시려고 하시고, 이야기도 되도록 들어주시려고 하신다. 옆 지원자분이 말이 엄청 길었는데 다 들어주시는 모습 보면서 대단하다고 생각.. 자소서 기반으로 면접이 진행된다. 1분자기소개 어디서 인턴 했는지와 무슨 일을 했는지 4차 산업혁명중 최근에 공부하는게 있는지? 최근 공부하는 4차 산업혁명 기술은 없어서 난항.. AWS EC2를 최근 했다고 말씀드렸더니 그거 없어졌는데 하셔서 당황.. 직무를 위해서 최근 하는 노력은? 개인 공부를 하고 있다고 말씀드림 이력서에 프로젝트가 적은데 그 이유는? 이력서에 다 적지는 않았지만 그동안 했던 프로젝트를 말씀드림 자소서에 ENM 계열사를 작성한 이유는? ENM 계열사가 아니면 안되는지? (농담식으로) 개발이 재미있어요? 어떻게 답변해야할지 몰라서 재미있다고 단답으로 마무리했는데 음.. 자소서에 팀원간 어려움이 있었다는데 어떤 어려움인지? R&amp;amp;R로 해결 회사에 물어보고 싶은 것 마지막 자기 자랑이나 하고싶은 말 2명이서 30분정도 걸렸는데 실질적으로 질문 받은건 몇개 안된다. 면접 결과가 나와봐야 알 것 같다.</summary></entry><entry><title type="html">2019 CJ인적성(CJAT) 후기</title><link href="http://localhost:4000/%EC%9D%B8%EC%A0%81%EC%84%B1/2019/05/12/2019-CJ%EC%9D%B8%EC%A0%81%EC%84%B1(CJAT)-%ED%9B%84%EA%B8%B0/" rel="alternate" type="text/html" title="2019 CJ인적성(CJAT) 후기" /><published>2019-05-12T00:01:01+09:00</published><updated>2019-05-12T00:01:01+09:00</updated><id>http://localhost:4000/%EC%9D%B8%EC%A0%81%EC%84%B1/2019/05/12/2019%20CJ%EC%9D%B8%EC%A0%81%EC%84%B1(CJAT)%20%ED%9B%84%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/%EC%9D%B8%EC%A0%81%EC%84%B1/2019/05/12/2019-CJ%EC%9D%B8%EC%A0%81%EC%84%B1(CJAT)-%ED%9B%84%EA%B8%B0/">&lt;h2 id=&quot;-cj-인적성cjat-후기-&quot;&gt;&amp;lt; CJ 인적성(CJAT) 후기 &amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/CJAT.png&quot; alt=&quot;Imeage&quot; width=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;평소 쉽다고 소문난 CJ 인적성이지만 이번에는 예시문제 4개만 주고 아무런 정보를 주지 않았다.&lt;/p&gt;

&lt;p&gt;기사를 찾아봐도 평소 CJ 문제집으로 공부하다가는 큰코다친다 이런식으로 나와있길래&lt;/p&gt;

&lt;p&gt;GSAT처럼 나올 것 같은 느낌이라 20대인적성 문제를 풀면서 대비했다.&lt;/p&gt;

&lt;h2 id=&quot;-cjat-시험-정보-&quot;&gt;&amp;lt; CJAT 시험 정보 &amp;gt;&lt;/h2&gt;
&lt;p&gt;GSAT처럼 단계별 풀고 넘어가는 방식&lt;/p&gt;

&lt;p&gt;1 교시 25문제 30분 (독해, 요약 15문제 + 언어 추리 15문제)&lt;/p&gt;

&lt;p&gt;2교시 15문제 15분 (글의 구조 순서 15문제)&lt;/p&gt;

&lt;p&gt;3교시 25문제 35분 (수리 25문제)&lt;/p&gt;

&lt;p&gt;4교시 15문제 20분 (신유형 도형돌리기 15문제)&lt;/p&gt;

&lt;p&gt;다른건 둘째치고 4교시가 LG 도형돌리기와 비슷하지만 차이점이 있다.&lt;/p&gt;

&lt;p&gt;신유형의 경우 예시문제에 규칙이 주어진다. ex) ㅇ3 =&amp;gt; 시계방항 270도 회전, ㅁ3 =&amp;gt; 도형 내부 270도 회전 ..&lt;/p&gt;

&lt;p&gt;이런식으로 순서도에 따라 이동하면서 회전을 다 수행했을 때 결과를 찾으면 된다.&lt;/p&gt;

&lt;p&gt;곧 유형 분석법이 나오겠지만 개인적으로 쉽게 푸는 방법은 보기에 전부 들어가 있는 도형 하나를 잡고 이걸 조건에 따라 같이 돌려보면 훨씬 수월하게 문제를 풀 수 있다.&lt;/p&gt;

&lt;p&gt;총 못푼문제는 20문제 가량 되는거 같은데 결과는 나와봐야 알 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;-결과-&quot;&gt;&amp;lt; 결과 &amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/CJAT_result.png&quot; alt=&quot;Image&quot; width=&quot;auto&quot; /&gt;&lt;/p&gt;</content><author><name>ChanSu Kim</name></author><category term="CJ올리브네트웍스" /><category term="인적성" /><summary type="html">&amp;lt; CJ 인적성(CJAT) 후기 &amp;gt; 평소 쉽다고 소문난 CJ 인적성이지만 이번에는 예시문제 4개만 주고 아무런 정보를 주지 않았다. 기사를 찾아봐도 평소 CJ 문제집으로 공부하다가는 큰코다친다 이런식으로 나와있길래 GSAT처럼 나올 것 같은 느낌이라 20대인적성 문제를 풀면서 대비했다. &amp;lt; CJAT 시험 정보 &amp;gt; GSAT처럼 단계별 풀고 넘어가는 방식 1 교시 25문제 30분 (독해, 요약 15문제 + 언어 추리 15문제) 2교시 15문제 15분 (글의 구조 순서 15문제) 3교시 25문제 35분 (수리 25문제) 4교시 15문제 20분 (신유형 도형돌리기 15문제) 다른건 둘째치고 4교시가 LG 도형돌리기와 비슷하지만 차이점이 있다. 신유형의 경우 예시문제에 규칙이 주어진다. ex) ㅇ3 =&amp;gt; 시계방항 270도 회전, ㅁ3 =&amp;gt; 도형 내부 270도 회전 .. 이런식으로 순서도에 따라 이동하면서 회전을 다 수행했을 때 결과를 찾으면 된다. 곧 유형 분석법이 나오겠지만 개인적으로 쉽게 푸는 방법은 보기에 전부 들어가 있는 도형 하나를 잡고 이걸 조건에 따라 같이 돌려보면 훨씬 수월하게 문제를 풀 수 있다. 총 못푼문제는 20문제 가량 되는거 같은데 결과는 나와봐야 알 것 같다. &amp;lt; 결과 &amp;gt;</summary></entry><entry><title type="html">JVM 작동 방식</title><link href="http://localhost:4000/java/2019/05/11/JVM-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D/" rel="alternate" type="text/html" title="JVM 작동 방식" /><published>2019-05-11T18:00:00+09:00</published><updated>2019-05-11T18:00:00+09:00</updated><id>http://localhost:4000/java/2019/05/11/JVM%20%EC%9E%91%EB%8F%99%20%EB%B0%A9%EC%8B%9D</id><content type="html" xml:base="http://localhost:4000/java/2019/05/11/JVM-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D/">&lt;h1 id=&quot;-jvmjava-virtual-machine-&quot;&gt;&amp;lt; JVM(Java Virtual Machine) &amp;gt;&lt;/h1&gt;
&lt;p&gt;JVM 역할은 자바 애플리케이션을 클래스 로더를 통해 읽어 들여 자바 API와 함께 실행하는 것&lt;/p&gt;

&lt;p&gt;또한, Java와 OS 간의 중개자 역할을 수행하여 OS에 구애받지 않고 재사용을 가능하게 한다.&lt;/p&gt;

&lt;p&gt;메모리관리 및 Garbage Collection 역할을 수행하며 Stack 기반의 가상머신이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-java-프로그램-실행-과정-&quot;&gt;&amp;lt; Java 프로그램 실행 과정 &amp;gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/jvm.png&quot; alt=&quot;Imeage&quot; width=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;프로그램이 실행되면 JVM은 OS로부터 이 프로그램이 필요로 하는 메모리를 할당받는다.&lt;/li&gt;
  &lt;li&gt;자바 컴파일러(javac)가 자바 소스코드(.java)를 읽어들여 자바 바이트코드(.class)로 변환시킨다.&lt;/li&gt;
  &lt;li&gt;Class Loader를 통해 class파일들을 JVM으로 로딩한다.&lt;/li&gt;
  &lt;li&gt;로딩된 class파일들은 Execution engine을 통해 해석된다.&lt;/li&gt;
  &lt;li&gt;해석된 바이트코드는 Runtime Data Areas 에 배치되어 실질적인 수행이 이루어지게 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;class-loader클래스-로더&quot;&gt;Class Loader(클래스 로더)&lt;/h2&gt;
&lt;p&gt;클래스 로더는 .class 파일을 읽어 바이트 코드를 메소드 영역(Method Area)에 저장한다.&lt;/p&gt;

&lt;p&gt;Runtime 시에 클래스를 처음으로 참조할 때, 해당 클래스를 로드하고 링크하는 역할을 수행한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-runtime-data-area-&quot;&gt;&amp;lt; Runtime Data Area &amp;gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/jvm_memory.png&quot; alt=&quot;Imeage&quot; width=&quot;600&quot; /&gt;
프로그램 수행을 위해 os로부터 할당받는 메모리 영역으로 5가지로 볼 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;method-area&quot;&gt;Method area&lt;/h2&gt;
&lt;p&gt;클래스 정보를 처음 메모리 공간에 올릴 때 초기화되는 대상을 저장하기 위한 메모리공간이다.&lt;/p&gt;

&lt;p&gt;클래스 이름, 부모 클래스 이름, 메소드, 변수 정보 등과 같은 수준의 모든 클래스 정보와 static 변수들을 저장한다.&lt;/p&gt;

&lt;h2 id=&quot;heap-area&quot;&gt;Heap area&lt;/h2&gt;
&lt;p&gt;모든 객체를 저장하는 가상 메모리 공간이다. new 연산자로 생성된 객체와 배열을 저장한다.&lt;/p&gt;

&lt;h2 id=&quot;stack-area&quot;&gt;Stack area&lt;/h2&gt;
&lt;p&gt;프로그램 실행과정에서 임시로 할당되었다가 메소드를 빠져나가면 바로 소멸되는 특성의 데이터를 저장하기 위한 영역이다.&lt;/p&gt;

&lt;p&gt;각종 형태의 변수나 임시 데이터, 스레드, 메소드 정보를 저장한다.&lt;/p&gt;

&lt;h2 id=&quot;pc-registers&quot;&gt;PC Registers&lt;/h2&gt;
&lt;p&gt;Thread가 어떤 부분을 명령으로 실행해야할 지에 대한 기록을 하는 부분으로 현재 수행중인 JVM 명령의 주소를 가진다.&lt;/p&gt;

&lt;h2 id=&quot;native-method-stacks&quot;&gt;Native Method Stacks&lt;/h2&gt;
&lt;p&gt;자바 프로그램이 컴파일되어 생성되는 실제 실행할 수 있는 기계어로 작성된 프로그램을 실행시키는 영역이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-execution-engine실행-엔진-&quot;&gt;&amp;lt; Execution Engine(실행 엔진) &amp;gt;&lt;/h1&gt;
&lt;p&gt;바이트 코드로 된 .class 파일을 실행한다. 바이트 코드를 한줄씩 읽고 다양한 메모리 영역에 나타난 데이터와 정보를 사용한다.&lt;/p&gt;

&lt;h2 id=&quot;interpreter&quot;&gt;Interpreter&lt;/h2&gt;
&lt;p&gt;실행 엔진은 바이트코드를 한줄씩 읽어서 실행한다. 단점은 여러번 하나의 메소드를 호출할 경우 매번 해석을 요청해야하기 때문에 비효율적이다.&lt;/p&gt;

&lt;h2 id=&quot;jitjust-in-time&quot;&gt;JIT(Just-In-Time)&lt;/h2&gt;
&lt;p&gt;인터프리터 방식의 단점을 보완하기 위해 도입된 JIT 컴파일러이다.&lt;/p&gt;

&lt;p&gt;전체 바이트 코드를 컴파일하고 네이티브 코드로 변경하여 더이상 인터프리팅 하지 않고 네이티브 코드로 직접 실행하는 방식이다.&lt;/p&gt;

&lt;p&gt;JIT 컴파일러를 사용하는 JVM은 내부적으로 해당 메서드가 자주 수행되는지 체크하고, 일정 정도를 넘을 때 네이티브 코드로 변경한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-garbage-collector-&quot;&gt;&amp;lt; Garbage Collector &amp;gt;&lt;/h1&gt;
&lt;p&gt;메모리 관리를 위한 방법 중의 하나로, Heap 영역 안의 Garbage를 찾아내서 Heap의 메모리를 회수한다.&lt;/p&gt;

&lt;p&gt;참조되고 있지 않은 객체를 Garbage라고 하며, Garbage를 판별하기 위해 Reachability 개념을 사용한다.&lt;/p&gt;

&lt;p&gt;한 객체가 다른 객체를 참조하며 다른 객체는 또다른 객체를 참조할 경우에는 유효한 최초의 참조가 무엇인지 파악해야 되는데, 이를 객체 참조의 root set이라고 한다.&lt;/p&gt;

&lt;p&gt;1.힙 내의 다른 객체에 의한 참조&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Java 스택, 즉 Java 메서드 실행 시에 사용하는 지역 변수와 파라미터들에 의한 참조&lt;/li&gt;
  &lt;li&gt;네이티브 스택, 즉 JNI(Java Native Interface)에 의해 생성된 객체에 대한 참조&lt;/li&gt;
  &lt;li&gt;메서드 영역의 정적 변수에 의한 참조
2, 3, 4번의 참조의 경우 root set이 되어 reachability를 판가름하는 기준이 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;즉 root set으로부터 시작한 객체들은 reachable이며, root set과 무관한 객체들이 unreachable 객체로 GC의 대상이 된다.&lt;/p&gt;

&lt;h3 id=&quot;메모리-누수-현상&quot;&gt;메모리 누수 현상&lt;/h3&gt;

&lt;p&gt;컴퓨터 프로그램이 필요하지 않은 메모리를 계속 점유하고 있는 현상이다.&lt;/p&gt;

&lt;p&gt;메모리 동적 할당시 Heap 영역에 할당되는데, 사용자가 해제하지 않는 경우 Heap 영역 메모리 공간을 계속 차지하게 된다.&lt;/p&gt;

&lt;p&gt;이는 메모리 부족으로 시스템이 다운될 수도 있는 위험이 있다.&lt;/p&gt;

&lt;p&gt;Java에서 Garbage Collector가 없다면 메모리 누수의 위험이 높다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-참조-&quot;&gt;&amp;lt; 참조 &amp;gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://asfirstalways.tistory.com/158&quot;&gt;http://asfirstalways.tistory.com/158&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mygumi.tistory.com/115?category=648758&quot;&gt;http://mygumi.tistory.com/115?category=648758&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/DaeHeeKim93/DaeHeeKim-Review/tree/master/Java/GC&quot;&gt;https://github.com/DaeHeeKim93/DaeHeeKim-Review/tree/master/Java/GC&lt;/a&gt;&lt;/p&gt;</content><author><name>ChanSu Kim</name></author><category term="JAVA" /><category term="JVM" /><category term="GC" /><category term="Garbage Collector" /><category term="Heap" /><category term="Stack" /><summary type="html">&amp;lt; JVM(Java Virtual Machine) &amp;gt; JVM 역할은 자바 애플리케이션을 클래스 로더를 통해 읽어 들여 자바 API와 함께 실행하는 것 또한, Java와 OS 간의 중개자 역할을 수행하여 OS에 구애받지 않고 재사용을 가능하게 한다. 메모리관리 및 Garbage Collection 역할을 수행하며 Stack 기반의 가상머신이다. &amp;lt; Java 프로그램 실행 과정 &amp;gt; 프로그램이 실행되면 JVM은 OS로부터 이 프로그램이 필요로 하는 메모리를 할당받는다. 자바 컴파일러(javac)가 자바 소스코드(.java)를 읽어들여 자바 바이트코드(.class)로 변환시킨다. Class Loader를 통해 class파일들을 JVM으로 로딩한다. 로딩된 class파일들은 Execution engine을 통해 해석된다. 해석된 바이트코드는 Runtime Data Areas 에 배치되어 실질적인 수행이 이루어지게 된다. Class Loader(클래스 로더) 클래스 로더는 .class 파일을 읽어 바이트 코드를 메소드 영역(Method Area)에 저장한다. Runtime 시에 클래스를 처음으로 참조할 때, 해당 클래스를 로드하고 링크하는 역할을 수행한다. &amp;lt; Runtime Data Area &amp;gt; 프로그램 수행을 위해 os로부터 할당받는 메모리 영역으로 5가지로 볼 수 있다. Method area 클래스 정보를 처음 메모리 공간에 올릴 때 초기화되는 대상을 저장하기 위한 메모리공간이다. 클래스 이름, 부모 클래스 이름, 메소드, 변수 정보 등과 같은 수준의 모든 클래스 정보와 static 변수들을 저장한다. Heap area 모든 객체를 저장하는 가상 메모리 공간이다. new 연산자로 생성된 객체와 배열을 저장한다. Stack area 프로그램 실행과정에서 임시로 할당되었다가 메소드를 빠져나가면 바로 소멸되는 특성의 데이터를 저장하기 위한 영역이다. 각종 형태의 변수나 임시 데이터, 스레드, 메소드 정보를 저장한다. PC Registers Thread가 어떤 부분을 명령으로 실행해야할 지에 대한 기록을 하는 부분으로 현재 수행중인 JVM 명령의 주소를 가진다. Native Method Stacks 자바 프로그램이 컴파일되어 생성되는 실제 실행할 수 있는 기계어로 작성된 프로그램을 실행시키는 영역이다. &amp;lt; Execution Engine(실행 엔진) &amp;gt; 바이트 코드로 된 .class 파일을 실행한다. 바이트 코드를 한줄씩 읽고 다양한 메모리 영역에 나타난 데이터와 정보를 사용한다. Interpreter 실행 엔진은 바이트코드를 한줄씩 읽어서 실행한다. 단점은 여러번 하나의 메소드를 호출할 경우 매번 해석을 요청해야하기 때문에 비효율적이다. JIT(Just-In-Time) 인터프리터 방식의 단점을 보완하기 위해 도입된 JIT 컴파일러이다. 전체 바이트 코드를 컴파일하고 네이티브 코드로 변경하여 더이상 인터프리팅 하지 않고 네이티브 코드로 직접 실행하는 방식이다. JIT 컴파일러를 사용하는 JVM은 내부적으로 해당 메서드가 자주 수행되는지 체크하고, 일정 정도를 넘을 때 네이티브 코드로 변경한다. &amp;lt; Garbage Collector &amp;gt; 메모리 관리를 위한 방법 중의 하나로, Heap 영역 안의 Garbage를 찾아내서 Heap의 메모리를 회수한다. 참조되고 있지 않은 객체를 Garbage라고 하며, Garbage를 판별하기 위해 Reachability 개념을 사용한다. 한 객체가 다른 객체를 참조하며 다른 객체는 또다른 객체를 참조할 경우에는 유효한 최초의 참조가 무엇인지 파악해야 되는데, 이를 객체 참조의 root set이라고 한다. 1.힙 내의 다른 객체에 의한 참조 Java 스택, 즉 Java 메서드 실행 시에 사용하는 지역 변수와 파라미터들에 의한 참조 네이티브 스택, 즉 JNI(Java Native Interface)에 의해 생성된 객체에 대한 참조 메서드 영역의 정적 변수에 의한 참조 2, 3, 4번의 참조의 경우 root set이 되어 reachability를 판가름하는 기준이 된다. 즉 root set으로부터 시작한 객체들은 reachable이며, root set과 무관한 객체들이 unreachable 객체로 GC의 대상이 된다. 메모리 누수 현상 컴퓨터 프로그램이 필요하지 않은 메모리를 계속 점유하고 있는 현상이다. 메모리 동적 할당시 Heap 영역에 할당되는데, 사용자가 해제하지 않는 경우 Heap 영역 메모리 공간을 계속 차지하게 된다. 이는 메모리 부족으로 시스템이 다운될 수도 있는 위험이 있다. Java에서 Garbage Collector가 없다면 메모리 누수의 위험이 높다. &amp;lt; 참조 &amp;gt; http://asfirstalways.tistory.com/158 http://mygumi.tistory.com/115?category=648758 https://github.com/DaeHeeKim93/DaeHeeKim-Review/tree/master/Java/GC</summary></entry><entry><title type="html">백준/1104 리모콘</title><link href="http://localhost:4000/%EB%B0%B1%EC%A4%80/%EB%B8%8C%EB%A3%A8%ED%8A%B8%20%ED%8F%AC%EC%8A%A4/2019/05/11/%EB%B0%B1%EC%A4%80-1104-%EB%A6%AC%EB%AA%A8%EC%BD%98/" rel="alternate" type="text/html" title="백준/1104 리모콘" /><published>2019-05-11T17:36:00+09:00</published><updated>2019-05-11T17:36:00+09:00</updated><id>http://localhost:4000/%EB%B0%B1%EC%A4%80/%EB%B8%8C%EB%A3%A8%ED%8A%B8%20%ED%8F%AC%EC%8A%A4/2019/05/11/%EB%B0%B1%EC%A4%80%201104%20%EB%A6%AC%EB%AA%A8%EC%BD%98</id><content type="html" xml:base="http://localhost:4000/%EB%B0%B1%EC%A4%80/%EB%B8%8C%EB%A3%A8%ED%8A%B8%20%ED%8F%AC%EC%8A%A4/2019/05/11/%EB%B0%B1%EC%A4%80-1104-%EB%A6%AC%EB%AA%A8%EC%BD%98/">&lt;h2 id=&quot;-문제-분석-및-풀이-방법-&quot;&gt;&amp;lt; 문제 분석 및 풀이 방법 &amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1107&quot;&gt;리모콘&lt;/a&gt; 문제는 브루트 포스를 활용하는 문제다.&lt;/p&gt;

&lt;p&gt;모든 경우의 수를 다 해보고 최소값을 찾으면 된다.&lt;/p&gt;

&lt;p&gt;2가지로 나눠서 생각하면 쉽게 접근할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;초기값 100에서 +, - 만을 활용해 이동할 때 필요한 cnt&lt;/li&gt;
  &lt;li&gt;새로운 값을 입력받아서 해당 값에서부터 +, -로 이동할 때 필요한 cnt&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;특히 2번의 경우에는 새로운 값이 1자리 숫자 ~ 6자리 숫자까지 가능하는 점을 인지해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;-소스-코드-&quot;&gt;&amp;lt; 소스 코드 &amp;gt;&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;11&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//초기값 100에서 갈 수 있는 최단경로값 계산&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//0~9까지 모든 경우의 수 탐색&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//현재 답보다 커지면 가지치기&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//6개의 숫자를 골랏을 때&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//6자리가 아닌 수&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//6자리를 만드는 경우&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ChanSu Kim</name></author><category term="백준" /><category term="백준 1104" /><category term="백준 리모콘" /><category term="브루트 포스" /><category term="DFS" /><summary type="html">&amp;lt; 문제 분석 및 풀이 방법 &amp;gt; 리모콘 문제는 브루트 포스를 활용하는 문제다. 모든 경우의 수를 다 해보고 최소값을 찾으면 된다. 2가지로 나눠서 생각하면 쉽게 접근할 수 있다. 초기값 100에서 +, - 만을 활용해 이동할 때 필요한 cnt 새로운 값을 입력받아서 해당 값에서부터 +, -로 이동할 때 필요한 cnt 특히 2번의 경우에는 새로운 값이 1자리 숫자 ~ 6자리 숫자까지 가능하는 점을 인지해야 한다. &amp;lt; 소스 코드 &amp;gt; import java.io.*; import java.util.*; public class Main { public static StringTokenizer stk; public static StringBuilder sb = new StringBuilder(); public static boolean[] button = new boolean[12]; public static int ans = Integer.MAX_VALUE; public static int n; public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); n = Integer.parseInt(br.readLine()); int m = Integer.parseInt(br.readLine()); if (m != 0) stk = new StringTokenizer(br.readLine()); for (int i = 0; i &amp;lt; m; i++) { String s = stk.nextToken(); if (s.equals(&quot;+&quot;)) s = &quot;10&quot;; if (s.equals(&quot;-&quot;)) s = &quot;11&quot;; button[Integer.parseInt(s)] = true; } //초기값 100에서 갈 수 있는 최단경로값 계산 if (!button[10] &amp;amp;&amp;amp; (100 - n) &amp;gt;= 0) ans = Math.min(ans, 100 - n); if (!button[11] &amp;amp;&amp;amp; (n - 100) &amp;gt;= 0) ans = Math.min(ans, n - 100); //0~9까지 모든 경우의 수 탐색 for (int i = 0; i &amp;lt; 10; i++) { if (!button[i]) dfs(i, 1, 1); } System.out.println(ans); } public static int dfs(int num, int len, int cnt) { if (len &amp;gt; ans) return Integer.MAX_VALUE; //현재 답보다 커지면 가지치기 if (cnt == 6) { //6개의 숫자를 골랏을 때 return ans = Math.min(ans, getRes(num, len)); } for (int i = 0; i &amp;lt; 10; i++) { if (i == 0) { //6자리가 아닌 수 dfs(num, len, cnt + 1); } if (!button[i]) { //6자리를 만드는 경우 dfs(num * 10 + i, len + 1, cnt + 1); } } return Integer.MAX_VALUE; } public static int getRes(int num, int cnt) { if (n == num) return cnt; if (!button[10] &amp;amp;&amp;amp; n &amp;gt; num) return cnt + n - num; if (!button[11] &amp;amp;&amp;amp; n &amp;lt; num) return cnt + num - n; return Integer.MAX_VALUE; } }</summary></entry><entry><title type="html">11번가 SKCT 및 코딩테스트 후기</title><link href="http://localhost:4000/%EC%9D%B8%EC%A0%81%EC%84%B1/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/2019/05/11/11%EB%B2%88%EA%B0%80-SKCT-%EB%B0%8F-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%9B%84%EA%B8%B0/" rel="alternate" type="text/html" title="11번가 SKCT 및 코딩테스트 후기" /><published>2019-05-11T00:00:08+09:00</published><updated>2019-05-11T00:00:08+09:00</updated><id>http://localhost:4000/%EC%9D%B8%EC%A0%81%EC%84%B1/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/2019/05/11/11%EB%B2%88%EA%B0%80%20SKCT%20%EB%B0%8F%20%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8%20%ED%9B%84%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/%EC%9D%B8%EC%A0%81%EC%84%B1/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/2019/05/11/11%EB%B2%88%EA%B0%80-SKCT-%EB%B0%8F-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%9B%84%EA%B8%B0/">&lt;h2 id=&quot;-11번가-인턴-skct-및-코딩테스트-후기-&quot;&gt;&amp;lt; 11번가 인턴 SKCT 및 코딩테스트 후기 &amp;gt;&lt;/h2&gt;
&lt;p&gt;다른 서류는 잘안붙는데 체험형 인턴이라 그런가 붙었다.&lt;/p&gt;

&lt;p&gt;제출란에 포트폴리오가 선택이였는데 몇개 추가해서 제출한 덕인거같은 느낌..?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/11st.png&quot; alt=&quot;11st&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-skct-후기-&quot;&gt;&amp;lt; SKCT 후기 &amp;gt;&lt;/h2&gt;
&lt;p&gt;처음 보는 SKCT였다.&lt;/p&gt;

&lt;p&gt;듣기로는 2019 상반기 공채랑 문제가 똑같다고 하던데 본인은 처음이라 잘 모르겠다.&lt;/p&gt;

&lt;p&gt;총 인원 : 71명&lt;/p&gt;

&lt;p&gt;응시 : 40명&lt;/p&gt;

&lt;p&gt;불참 : 31명&lt;/p&gt;

&lt;p&gt;개발 직군만 불참이 거의 절반가까이 된다.&lt;/p&gt;

&lt;p&gt;아마도 체험형이고, 다른 기업 시험이 있기 때문에 겹쳐서 대부분 포기한 것이라 생각한다.&lt;/p&gt;

&lt;p&gt;교재는 위포트를 사용했는데, 실제 시험장에서는 위포트보다 쉬웠다.&lt;/p&gt;

&lt;h3 id=&quot;실행-역량&quot;&gt;실행 역량&lt;/h3&gt;

&lt;p&gt;유튜브 보면서 공부(히로와 면접술사)했다.&lt;/p&gt;

&lt;p&gt;SKCT 실행역량에서 중요한 점은&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;역할에 맞게 행동한다.&lt;/li&gt;
  &lt;li&gt;주도적으로 당사자와 되도록 해결한다.&lt;/li&gt;
  &lt;li&gt;업무상 문제라면 보고해서 조치를 받는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위 방식대로 풀면 어느정도 감이 잡힌다.&lt;/p&gt;

&lt;p&gt;실행역량은 겨우 다풀었는데 뒤에 인적성은 10문제 넘게 못푼것 같다.&lt;/p&gt;

&lt;p&gt;결과가 나와봐야 알 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;-코딩-테스트-&quot;&gt;&amp;lt; 코딩 테스트 &amp;gt;&lt;/h2&gt;
&lt;p&gt;진행 방식 : 3문제 / 2시간&lt;/p&gt;

&lt;p&gt;코딩테스트 보는 기업중 복붙을 못하게하는 기업이 있는데, 정말 이해할수가 없다.&lt;/p&gt;

&lt;p&gt;자바같은경우 오버라이드하면 다적어야하는데..&lt;/p&gt;

&lt;p&gt;어느 줄에서 오류가 발생한지 알아내는 디버깅마저 힘들었다.&lt;/p&gt;

&lt;p&gt;1번 문제는 단순 구현문제였는데 별로 어렵지 않았다.&lt;/p&gt;

&lt;p&gt;2번 문제는 &lt;a href=&quot;https://www.acmicpc.net/problem/2504&quot;&gt;괄호의 값&lt;/a&gt; 문제와 유사하다.&lt;/p&gt;

&lt;p&gt;입력으로 압축된 문자를 주어주고 이를 풀어내는 문제였다. ex) 4(3(h)g) =&amp;gt; hhghhghhghhg&lt;/p&gt;

&lt;p&gt;여기서 계속 인덱스오류가 나서 못찾고 결국 제출했다.&lt;/p&gt;

&lt;p&gt;다시 생각해보니 Stack으로 풀면되는 문제였는데.. 아쉬움이 남는다.&lt;/p&gt;

&lt;p&gt;3번 문제도 네트워크 연결 문제와 상당히 비슷했다.&lt;/p&gt;

&lt;p&gt;시험 당시에는 Union-Find가 아닌 Dijkstra로 풀었는데, 어디서 꼬였는지 절반만 맞고, 시간초과가 난 상태로 제출했다.&lt;/p&gt;

&lt;p&gt;한마디로 절반만 맞은셈이니까 틀린문제다.&lt;/p&gt;

&lt;p&gt;여러 유형을 더 접해봐야 할것 같다.&lt;/p&gt;

&lt;p&gt;2번문제를 Stack으로 해결한다고 좀더 빨리 생각해야했는데 하는 아쉬움이 남는다.&lt;/p&gt;

&lt;h2 id=&quot;-결과-&quot;&gt;&amp;lt; 결과 &amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/11st_result.png&quot; alt=&quot;11st_result&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;</content><author><name>ChanSu Kim</name></author><category term="11번가" /><category term="코딩테스트" /><category term="인적성" /><summary type="html">&amp;lt; 11번가 인턴 SKCT 및 코딩테스트 후기 &amp;gt; 다른 서류는 잘안붙는데 체험형 인턴이라 그런가 붙었다. 제출란에 포트폴리오가 선택이였는데 몇개 추가해서 제출한 덕인거같은 느낌..? &amp;lt; SKCT 후기 &amp;gt; 처음 보는 SKCT였다. 듣기로는 2019 상반기 공채랑 문제가 똑같다고 하던데 본인은 처음이라 잘 모르겠다. 총 인원 : 71명 응시 : 40명 불참 : 31명 개발 직군만 불참이 거의 절반가까이 된다. 아마도 체험형이고, 다른 기업 시험이 있기 때문에 겹쳐서 대부분 포기한 것이라 생각한다. 교재는 위포트를 사용했는데, 실제 시험장에서는 위포트보다 쉬웠다. 실행 역량 유튜브 보면서 공부(히로와 면접술사)했다. SKCT 실행역량에서 중요한 점은 역할에 맞게 행동한다. 주도적으로 당사자와 되도록 해결한다. 업무상 문제라면 보고해서 조치를 받는다. 위 방식대로 풀면 어느정도 감이 잡힌다. 실행역량은 겨우 다풀었는데 뒤에 인적성은 10문제 넘게 못푼것 같다. 결과가 나와봐야 알 것 같다. &amp;lt; 코딩 테스트 &amp;gt; 진행 방식 : 3문제 / 2시간 코딩테스트 보는 기업중 복붙을 못하게하는 기업이 있는데, 정말 이해할수가 없다. 자바같은경우 오버라이드하면 다적어야하는데.. 어느 줄에서 오류가 발생한지 알아내는 디버깅마저 힘들었다. 1번 문제는 단순 구현문제였는데 별로 어렵지 않았다. 2번 문제는 괄호의 값 문제와 유사하다. 입력으로 압축된 문자를 주어주고 이를 풀어내는 문제였다. ex) 4(3(h)g) =&amp;gt; hhghhghhghhg 여기서 계속 인덱스오류가 나서 못찾고 결국 제출했다. 다시 생각해보니 Stack으로 풀면되는 문제였는데.. 아쉬움이 남는다. 3번 문제도 네트워크 연결 문제와 상당히 비슷했다. 시험 당시에는 Union-Find가 아닌 Dijkstra로 풀었는데, 어디서 꼬였는지 절반만 맞고, 시간초과가 난 상태로 제출했다. 한마디로 절반만 맞은셈이니까 틀린문제다. 여러 유형을 더 접해봐야 할것 같다. 2번문제를 Stack으로 해결한다고 좀더 빨리 생각해야했는데 하는 아쉬움이 남는다. &amp;lt; 결과 &amp;gt;</summary></entry></feed>