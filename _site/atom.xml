<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-05-27T17:06:11+09:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Devlog</title><author><name>ChanSu Kim</name></author><entry><title type="html">동원엔터프라이즈 인적성 후기</title><link href="http://localhost:4000/%EC%9D%B8%EC%A0%81%EC%84%B1/2019/05/27/%EB%8F%99%EC%9B%90%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88-%EC%9D%B8%EC%A0%81%EC%84%B1-%ED%9B%84%EA%B8%B0/" rel="alternate" type="text/html" title="동원엔터프라이즈 인적성 후기" /><published>2019-05-27T00:11:00+09:00</published><updated>2019-05-27T00:11:00+09:00</updated><id>http://localhost:4000/%EC%9D%B8%EC%A0%81%EC%84%B1/2019/05/27/%EB%8F%99%EC%9B%90%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88%20%EC%9D%B8%EC%A0%81%EC%84%B1%20%ED%9B%84%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/%EC%9D%B8%EC%A0%81%EC%84%B1/2019/05/27/%EB%8F%99%EC%9B%90%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88-%EC%9D%B8%EC%A0%81%EC%84%B1-%ED%9B%84%EA%B8%B0/">&lt;h1 id=&quot;-동원엔터프라이즈-인적성-후기-&quot;&gt;&amp;lt; 동원엔터프라이즈 인적성 후기 &amp;gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dongwon.jpg&quot; alt=&quot;Imeage&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;5월 26일 잠실고등학교에서 동원엔터프라이즈 인적성을 보고 왔다.&lt;/li&gt;
  &lt;li&gt;자소서가 항목별 300자 쓰라고 하길래 붙을 줄 생각도 못하고있었는데 뜬금 합격.&lt;/li&gt;
  &lt;li&gt;오전/오후로 나누어져있는데 오후에 거의 900명가까이 됫으니 총 1800명정도? (계열사가 워낙 많지만)&lt;/li&gt;
  &lt;li&gt;입장시 로비에서 물이랑 GNC 비타민을 준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-인성-검사-후기-&quot;&gt;&amp;lt; 인성 검사 후기 &amp;gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;다른 기업과 달리 인성검사를 먼저 본다.&lt;/li&gt;
  &lt;li&gt;각 문항마다 매우아니다&amp;lt;&amp;gt;매우그렇다 로 선택한다.&lt;/li&gt;
  &lt;li&gt;다른 점은 4문항이 한 세트가 되어 가장 가깝다고 생각되는 것 하나와 가장 멀다고 생각되는 것 하나를 선택해야 한다.&lt;/li&gt;
  &lt;li&gt;인성검사치고 시간이 엄청 널널하지는 않다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-적성-고사-후기-&quot;&gt;&amp;lt; 적성 고사 후기 &amp;gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;적성 고사는 언어, 수리, 상황판단, 상식 총 4개의 영역으로 구성되어 있다.&lt;/li&gt;
  &lt;li&gt;4 영역 모두 감점이 있기 때문에 찍을 수도 없다. 물론 상식은 좀 찍었지만..&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;언어&quot;&gt;언어&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;지문이 엄청 길지는 않다. 평균적으로 시험지 한쪽에 2문제씩 나오는 정도?&lt;/li&gt;
  &lt;li&gt;4문제를 못풀었지만 언어 자신없는 내가 무난하다 느낄정도로 난이도가 평이했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;수리&quot;&gt;수리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;꽤 어려웠다고 생각한다. 6문제 가량을 못풀었다.&lt;/li&gt;
  &lt;li&gt;계산도 중간중간 꼬이다보니 시간이 많이 걸렸는데 연산하다가 자료해석은 거의 구경도못했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;상황판단&quot;&gt;상황판단&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이전 SKCT를 공부했던 경험이 있어서 별도로 공부는 진행하지 않았다.&lt;/li&gt;
  &lt;li&gt;큰 고민없이 25문제 전부 풀었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;상식&quot;&gt;상식&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;정말 모르면 답이없다.&lt;/li&gt;
  &lt;li&gt;찍으면 안되지만 어느정도 보고 찍었다.&lt;/li&gt;
  &lt;li&gt;최근 이슈랑 약어가 나오기 때문에 공부를 한다기보다 평소 자세히 봐야한다.&lt;/li&gt;
  &lt;li&gt;예를 들면 FAANG -&amp;gt; WNSSS, 헌법 불합치, 대통령 권한, 디지털 디바이드, 학교폭력위원회 등 단순 공부로 할 수 있는 영역이 아니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-결과-발표-&quot;&gt;&amp;lt; 결과 발표 &amp;gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;5/31 예정&lt;/li&gt;
&lt;/ul&gt;</content><author><name>ChanSu Kim</name></author><category term="인적성" /><category term="동원엔터프라이즈" /><summary type="html">&amp;lt; 동원엔터프라이즈 인적성 후기 &amp;gt; 5월 26일 잠실고등학교에서 동원엔터프라이즈 인적성을 보고 왔다. 자소서가 항목별 300자 쓰라고 하길래 붙을 줄 생각도 못하고있었는데 뜬금 합격. 오전/오후로 나누어져있는데 오후에 거의 900명가까이 됫으니 총 1800명정도? (계열사가 워낙 많지만) 입장시 로비에서 물이랑 GNC 비타민을 준다. &amp;lt; 인성 검사 후기 &amp;gt; 다른 기업과 달리 인성검사를 먼저 본다. 각 문항마다 매우아니다&amp;lt;&amp;gt;매우그렇다 로 선택한다. 다른 점은 4문항이 한 세트가 되어 가장 가깝다고 생각되는 것 하나와 가장 멀다고 생각되는 것 하나를 선택해야 한다. 인성검사치고 시간이 엄청 널널하지는 않다. &amp;lt; 적성 고사 후기 &amp;gt; 적성 고사는 언어, 수리, 상황판단, 상식 총 4개의 영역으로 구성되어 있다. 4 영역 모두 감점이 있기 때문에 찍을 수도 없다. 물론 상식은 좀 찍었지만.. 언어 지문이 엄청 길지는 않다. 평균적으로 시험지 한쪽에 2문제씩 나오는 정도? 4문제를 못풀었지만 언어 자신없는 내가 무난하다 느낄정도로 난이도가 평이했다. 수리 꽤 어려웠다고 생각한다. 6문제 가량을 못풀었다. 계산도 중간중간 꼬이다보니 시간이 많이 걸렸는데 연산하다가 자료해석은 거의 구경도못했다. 상황판단 이전 SKCT를 공부했던 경험이 있어서 별도로 공부는 진행하지 않았다. 큰 고민없이 25문제 전부 풀었다. 상식 정말 모르면 답이없다. 찍으면 안되지만 어느정도 보고 찍었다. 최근 이슈랑 약어가 나오기 때문에 공부를 한다기보다 평소 자세히 봐야한다. 예를 들면 FAANG -&amp;gt; WNSSS, 헌법 불합치, 대통령 권한, 디지털 디바이드, 학교폭력위원회 등 단순 공부로 할 수 있는 영역이 아니다. &amp;lt; 결과 발표 &amp;gt; 5/31 예정</summary></entry><entry><title type="html">백준/1722 순열의 순서</title><link href="http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/26/%EB%B0%B1%EC%A4%80-1722-%EC%88%9C%EC%97%B4%EC%9D%98-%EC%88%9C%EC%84%9C/" rel="alternate" type="text/html" title="백준/1722 순열의 순서" /><published>2019-05-26T00:11:00+09:00</published><updated>2019-05-26T00:11:00+09:00</updated><id>http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/26/%EB%B0%B1%EC%A4%80%201722%20%EC%88%9C%EC%97%B4%EC%9D%98%20%EC%88%9C%EC%84%9C</id><content type="html" xml:base="http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/26/%EB%B0%B1%EC%A4%80-1722-%EC%88%9C%EC%97%B4%EC%9D%98-%EC%88%9C%EC%84%9C/">&lt;h2 id=&quot;-문제-분석-및-풀이-방법-&quot;&gt;&amp;lt; 문제 분석 및 풀이 방법 &amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1722&quot;&gt;백준 순열의 순서&lt;/a&gt; 문제는 직접 구하지 않고 수학적인 연산이 필요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;범위가 최대 20!이기 때문에 구하려고 들면 시간초과가 날 수 밖에 없다.&lt;/li&gt;
  &lt;li&gt;아이디어는 factorial 값을 저장해둔 배열을 하나 만들고 모듈러 연산을 한다.&lt;/li&gt;
  &lt;li&gt;만약 [3, 2, 4, 1] 배열이 있다고 했을 때 첫 번째가 4라면 [1, x, x, x], [2, x, x, x] 의 경우는 진행한 것으로 간주해 factorial[3] * 2 = 12 를 더한다.&lt;/li&gt;
  &lt;li&gt;이후 두 번째 숫자가 2라면 [3, 1, x, x]의 경우의 수는 전부 진행한 것으로 간주해 factorial[2] * 1 을 더한다.&lt;/li&gt;
  &lt;li&gt;k를 입력받을 때 1을 빼주는데 이유는 k 번째 다음 순열을 출력하기 때문이다.&lt;/li&gt;
  &lt;li&gt;factorial 배열, 입력받는 k 변수는 long 형으로 선언해야 한다. 범위를 초과하기 때문!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-소스-코드-&quot;&gt;&amp;lt; 소스 코드 &amp;gt;&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;//Factorial값 미리 구해서 저장&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isUsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//i번째 숫자 사용 여부&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;getFactorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseLong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//i번째에서 몇 번째 숫자를 선택할 지 구한다&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;//mod 번째 숫자를 찾기 위한 변수&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//앞에서부터 해당 숫자를 확인할 때 사용하는 변수&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;isUsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;//움직이는 횟수&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//idx 숫자를 사용했는지 확인하는 변수&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;isUsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getFactorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//factorial값 구하는 함수&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ChanSu Kim</name></author><category term="백준" /><category term="백준 1722" /><category term="백준 순열의 순서" /><category term="스텍" /><summary type="html">&amp;lt; 문제 분석 및 풀이 방법 &amp;gt; 백준 순열의 순서 문제는 직접 구하지 않고 수학적인 연산이 필요하다. 범위가 최대 20!이기 때문에 구하려고 들면 시간초과가 날 수 밖에 없다. 아이디어는 factorial 값을 저장해둔 배열을 하나 만들고 모듈러 연산을 한다. 만약 [3, 2, 4, 1] 배열이 있다고 했을 때 첫 번째가 4라면 [1, x, x, x], [2, x, x, x] 의 경우는 진행한 것으로 간주해 factorial[3] * 2 = 12 를 더한다. 이후 두 번째 숫자가 2라면 [3, 1, x, x]의 경우의 수는 전부 진행한 것으로 간주해 factorial[2] * 1 을 더한다. k를 입력받을 때 1을 빼주는데 이유는 k 번째 다음 순열을 출력하기 때문이다. factorial 배열, 입력받는 k 변수는 long 형으로 선언해야 한다. 범위를 초과하기 때문! &amp;lt; 소스 코드 &amp;gt; import java.io.*; import java.util.*; public class Main { public static StringTokenizer stk; public static StringBuilder sb = new StringBuilder(); public static int n; public static long[] factorial; public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); n = Integer.parseInt(br.readLine()); int[] num = new int[n]; factorial = new long[n + 1]; //Factorial값 미리 구해서 저장 boolean[] isUsed = new boolean[n + 1]; //i번째 숫자 사용 여부 getFactorial(); stk = new StringTokenizer(br.readLine()); int type = Integer.parseInt(stk.nextToken()); if (type == 1) { long k = Long.parseLong(stk.nextToken()) - 1; for (int i = n; i &amp;gt; 0; i--) { long mod = k / factorial[i - 1] + 1; //i번째에서 몇 번째 숫자를 선택할 지 구한다 k %= factorial[i - 1]; long cnt = 0; //mod 번째 숫자를 찾기 위한 변수 int idx = 0; //앞에서부터 해당 숫자를 확인할 때 사용하는 변수 while (cnt != mod) { idx++; if (!isUsed[idx]) cnt++; } isUsed[idx] = true; sb.append(idx + &quot; &quot;); } } else { long ans = 0; for (int i = 0; i &amp;lt; n; i++) { num[i] = Integer.parseInt(stk.nextToken()); long cnt = 0; //움직이는 횟수 int idx = 0; //idx 숫자를 사용했는지 확인하는 변수 while (num[i] != idx) { idx++; if (!isUsed[idx]) cnt++; } isUsed[idx] = true; ans += (cnt - 1) * factorial[n - i - 1]; } sb.append(ans + 1); } System.out.println(sb); } public static void getFactorial() { //factorial값 구하는 함수 factorial[0] = 1; factorial[1] = 1; for (int i = 2; i &amp;lt;= n; i++) { factorial[i] = factorial[i - 1] * i; } } }</summary></entry><entry><title type="html">백준/1541 잃어버린 괄호</title><link href="http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/25/%EB%B0%B1%EC%A4%80-1541-%EC%9E%83%EC%96%B4%EB%B2%84%EB%A6%B0-%EA%B4%84%ED%98%B8/" rel="alternate" type="text/html" title="백준/1541 잃어버린 괄호" /><published>2019-05-25T23:11:00+09:00</published><updated>2019-05-25T23:11:00+09:00</updated><id>http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/25/%EB%B0%B1%EC%A4%80%201541%20%EC%9E%83%EC%96%B4%EB%B2%84%EB%A6%B0%20%EA%B4%84%ED%98%B8</id><content type="html" xml:base="http://localhost:4000/%EB%B0%B1%EC%A4%80/algorithm/2019/05/25/%EB%B0%B1%EC%A4%80-1541-%EC%9E%83%EC%96%B4%EB%B2%84%EB%A6%B0-%EA%B4%84%ED%98%B8/">&lt;h2 id=&quot;-문제-분석-및-풀이-방법-&quot;&gt;&amp;lt; 문제 분석 및 풀이 방법 &amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1541&quot;&gt;백준 잃어버린 괄호&lt;/a&gt; 그리디하게 접근하면 해결할 수 있는 문제다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;boolean hasMinus 변수 하나를 만든다. 이 변수에는 ‘-‘가 입력받은 문자열에 존재하는 지를 확인한다.&lt;/li&gt;
  &lt;li&gt;만약 문자열에서 ‘-‘를 한번도 못 만낫다면 계속 숫자를 더한다.&lt;/li&gt;
  &lt;li&gt;만약 문자열에서 ‘-‘를 만나면 ‘-‘ 이후에 나오는 모든 숫자들은 빼도 된다. (‘+’ 연산은 괄호로 묶어 최대값으로 만들고 빼면 되니까)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;-소스-코드-&quot;&gt;&amp;lt; 소스 코드 &amp;gt;&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;//curr : +,- 연산 전의 숫자값 구하기, plus = curr값의 합&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasMinus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//입력받은 문자열에 '-'가 있는지 확인&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;plus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;minusCal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;plus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;minusCal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;minusCal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasMinus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//'-' 연산이 없다면 더한다.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;plus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hasMinus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;//'-' 연산이 있다면 ans값에 빼준다.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;plus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ChanSu Kim</name></author><category term="백준" /><category term="백준 1541" /><category term="백준 잃어버린 괄호" /><category term="스텍" /><summary type="html">&amp;lt; 문제 분석 및 풀이 방법 &amp;gt; 백준 잃어버린 괄호 그리디하게 접근하면 해결할 수 있는 문제다. boolean hasMinus 변수 하나를 만든다. 이 변수에는 ‘-‘가 입력받은 문자열에 존재하는 지를 확인한다. 만약 문자열에서 ‘-‘를 한번도 못 만낫다면 계속 숫자를 더한다. 만약 문자열에서 ‘-‘를 만나면 ‘-‘ 이후에 나오는 모든 숫자들은 빼도 된다. (‘+’ 연산은 괄호로 묶어 최대값으로 만들고 빼면 되니까) &amp;lt; 소스 코드 &amp;gt; import java.io.*; import java.util.*; public class Main { public static int curr, plus, ans; //curr : +,- 연산 전의 숫자값 구하기, plus = curr값의 합 public static boolean hasMinus = false; //입력받은 문자열에 '-'가 있는지 확인 public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); String target = br.readLine(); for (int i = 0; i &amp;lt; target.length(); i++) { char ch = target.charAt(i); if (ch == '+') { plus += curr; curr = 0; } else if (ch == '-') { minusCal(); plus = 0; curr = 0; } else { curr = curr * 10 + (ch - '0'); } } minusCal(); System.out.println(ans); } public static void minusCal() { if (!hasMinus) { //'-' 연산이 없다면 더한다. plus += curr; ans += plus; hasMinus = true; } else { //'-' 연산이 있다면 ans값에 빼준다. plus += curr; ans -= plus; } } }</summary></entry><entry><title type="html">11번가 면접 후기</title><link href="http://localhost:4000/%EB%A9%B4%EC%A0%91/2019/05/23/11%EB%B2%88%EA%B0%80-%EB%A9%B4%EC%A0%91%ED%9B%84%EA%B8%B0/" rel="alternate" type="text/html" title="11번가 면접 후기" /><published>2019-05-23T13:00:08+09:00</published><updated>2019-05-23T13:00:08+09:00</updated><id>http://localhost:4000/%EB%A9%B4%EC%A0%91/2019/05/23/11%EB%B2%88%EA%B0%80%20%EB%A9%B4%EC%A0%91%ED%9B%84%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/%EB%A9%B4%EC%A0%91/2019/05/23/11%EB%B2%88%EA%B0%80-%EB%A9%B4%EC%A0%91%ED%9B%84%EA%B8%B0/">&lt;p&gt;&lt;img src=&quot;/assets/images/11st_11.jpg&quot; alt=&quot;11st_1&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/11st_22.jpg&quot; alt=&quot;11st_2&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;11번가-면접-후기&quot;&gt;11번가 면접 후기&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;서울스퀘어 도착후 졸업예정서, 성적증명서 등 서류 제출&lt;/li&gt;
  &lt;li&gt;11번가 인턴 면접은 특이하게 PT 면접, 직무 면접, 코딩테스트 리뷰 3개로 나누어 진행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;pt-면접-준비&quot;&gt;PT 면접 준비&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;도착하면 한 15분 정도 대기하다 옆 강의실로 이동한다.&lt;/li&gt;
  &lt;li&gt;40분동안 준비하고 5-10분정도 발표&amp;amp;질문 받는다고 안내 받는다.&lt;/li&gt;
  &lt;li&gt;PT 관련 주제를 나눠주고 2개 주제 중 하나를 선택한다.&lt;/li&gt;
  &lt;li&gt;주제 하나는 배치 관련 질문이였고 선택한 주제는 11번가 검색창에서 어떤 상품을 검색하면 카테고리와의 유사도를 구하는 문제였다.&lt;/li&gt;
  &lt;li&gt;핸드폰이 사용가능하고 작성한 종이를 면접장에 가지고 간다.&lt;/li&gt;
  &lt;li&gt;40분이 지나고 나서 면접장으로 이동한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;면접-후기&quot;&gt;면접 후기&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;면접이 조금 특이하게 2:1면접으로 40분이 진행되는데 순서가 정해져 있는것은 아니다.&lt;/li&gt;
  &lt;li&gt;면접관 재량에 따라 PT 발표했다가 코딩테스트 리뷰했다가 자소서 질문한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-직무-면접-&quot;&gt;&amp;lt; 직무 면접 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;입장하자마자 최대한 편하게 해주려고 하신다. 간단하게 회사 지원동기를 묻는다.
    &lt;ul&gt;
      &lt;li&gt;SI보다 서비스 개발이 하고싶다고 했다가 SI도 배울거 많다며 한소리 들었다.&lt;/li&gt;
      &lt;li&gt;트래픽 경험하고 싶다고 했다가 11번가는 중개자 역할로 고객이 판매자와 구매자가 있는데 판매자로 가면 어쩔건지 물어봣다가 털림&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다른 지원자와 대비했을때 기술적인 강점이 뭐라고 생각하는지?
    &lt;ul&gt;
      &lt;li&gt;데이터베이스라고 했다가 처음들어보는 명령어 물어보길래 모른다고 답함&lt;/li&gt;
      &lt;li&gt;그럼 inner join과 outer join 설명해봐라 =&amp;gt; 반대로 대답해서 또 한소리 들음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;딥러닝 프로젝트 중 사이킷런 라벨링이 뭐한건지 설명 =&amp;gt; 대답 못함&lt;/li&gt;
  &lt;li&gt;Spring 프로젝트 중 어떤걸 담당했고 어떤 기능을 개발했는지&lt;/li&gt;
  &lt;li&gt;REST는 직접 설계했는지&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-pt-면접-&quot;&gt;&amp;lt; PT 면접 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;특정 검색어가 어떤 상품 카테고리와 연관성이 있는지 추출하는 시스템 설계하는 것이 주제&lt;/li&gt;
  &lt;li&gt;논리적/물리적 설계가 필요하다는데 제대로 이해 못함&lt;/li&gt;
  &lt;li&gt;TF-IDF 활용한다고 했더니 어떤 문서를 기준으로 할 것인지 물어봄&lt;/li&gt;
  &lt;li&gt;발표 중간중간 궁금한 점을 질문한다.&lt;/li&gt;
  &lt;li&gt;논리적/물리적 설계가 부족했는지 유스케이스나 데이터흐름을 그려달라고 했는데 여기서부터 막히기 시작&lt;/li&gt;
  &lt;li&gt;여기저기서 까이고 정신이 없었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-코딩테스트-리뷰-&quot;&gt;&amp;lt; 코딩테스트 리뷰 &amp;gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;전공 면접 준비하는 시간에 다른 지원자들은 안주는데 나한테만 코딩테스트 준비하라고 코드를 뽑아줌(왜지?)&lt;/li&gt;
  &lt;li&gt;1번 문제는 100점이라 안물어봤는데 2,3번 코드 설명함&lt;/li&gt;
  &lt;li&gt;2번 문제는 당시에는 인덱스로 접근했지만 스텍으로 접근하면 될 것 같다고 말슴드림&lt;/li&gt;
  &lt;li&gt;3번 문제는 다익스트라랑 프림이랑 헷갈려서 틀렸다고 말씀드림&lt;/li&gt;
  &lt;li&gt;알고리즘 공부좀 한거같은데 만약 음수가 있다면 어떻게 할껀지? =&amp;gt; 벨만포드 알고리즘을 활용할 것이라고 말씀드림&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;우선순위 큐에 대해서 설명해달라 하셔서 힙 정렬과 같이 말씀드림&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;마지막 질문한번 해보라고 하셔서 맥북을 쓰는거로 아는데 두 분다 삼성노트북을 사용하시길래 이유를 여쭤봄&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;백앤드/DBA/프론트 등 어떤 개발자가 되고 싶은지&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정말 40분 면접 중에서 20분은 털린 듯.. 특히 PT 면접을 깊이 물어보셔서 답을 제대로 못한게 아쉽다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;면접비는 5월말에 통장으로 입금해주신다 했으니 아마 발표 시즌이랑 비슷하게 겹칠듯싶다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>ChanSu Kim</name></author><category term="11번가" /><category term="PT 면접" /><category term="코딩테스트 면접" /><category term="면접" /><summary type="html">11번가 면접 후기 서울스퀘어 도착후 졸업예정서, 성적증명서 등 서류 제출 11번가 인턴 면접은 특이하게 PT 면접, 직무 면접, 코딩테스트 리뷰 3개로 나누어 진행한다. PT 면접 준비 도착하면 한 15분 정도 대기하다 옆 강의실로 이동한다. 40분동안 준비하고 5-10분정도 발표&amp;amp;질문 받는다고 안내 받는다. PT 관련 주제를 나눠주고 2개 주제 중 하나를 선택한다. 주제 하나는 배치 관련 질문이였고 선택한 주제는 11번가 검색창에서 어떤 상품을 검색하면 카테고리와의 유사도를 구하는 문제였다. 핸드폰이 사용가능하고 작성한 종이를 면접장에 가지고 간다. 40분이 지나고 나서 면접장으로 이동한다. 면접 후기 면접이 조금 특이하게 2:1면접으로 40분이 진행되는데 순서가 정해져 있는것은 아니다. 면접관 재량에 따라 PT 발표했다가 코딩테스트 리뷰했다가 자소서 질문한다. &amp;lt; 직무 면접 &amp;gt; 입장하자마자 최대한 편하게 해주려고 하신다. 간단하게 회사 지원동기를 묻는다. SI보다 서비스 개발이 하고싶다고 했다가 SI도 배울거 많다며 한소리 들었다. 트래픽 경험하고 싶다고 했다가 11번가는 중개자 역할로 고객이 판매자와 구매자가 있는데 판매자로 가면 어쩔건지 물어봣다가 털림 다른 지원자와 대비했을때 기술적인 강점이 뭐라고 생각하는지? 데이터베이스라고 했다가 처음들어보는 명령어 물어보길래 모른다고 답함 그럼 inner join과 outer join 설명해봐라 =&amp;gt; 반대로 대답해서 또 한소리 들음 딥러닝 프로젝트 중 사이킷런 라벨링이 뭐한건지 설명 =&amp;gt; 대답 못함 Spring 프로젝트 중 어떤걸 담당했고 어떤 기능을 개발했는지 REST는 직접 설계했는지 &amp;lt; PT 면접 &amp;gt; 특정 검색어가 어떤 상품 카테고리와 연관성이 있는지 추출하는 시스템 설계하는 것이 주제 논리적/물리적 설계가 필요하다는데 제대로 이해 못함 TF-IDF 활용한다고 했더니 어떤 문서를 기준으로 할 것인지 물어봄 발표 중간중간 궁금한 점을 질문한다. 논리적/물리적 설계가 부족했는지 유스케이스나 데이터흐름을 그려달라고 했는데 여기서부터 막히기 시작 여기저기서 까이고 정신이 없었다. &amp;lt; 코딩테스트 리뷰 &amp;gt; 전공 면접 준비하는 시간에 다른 지원자들은 안주는데 나한테만 코딩테스트 준비하라고 코드를 뽑아줌(왜지?) 1번 문제는 100점이라 안물어봤는데 2,3번 코드 설명함 2번 문제는 당시에는 인덱스로 접근했지만 스텍으로 접근하면 될 것 같다고 말슴드림 3번 문제는 다익스트라랑 프림이랑 헷갈려서 틀렸다고 말씀드림 알고리즘 공부좀 한거같은데 만약 음수가 있다면 어떻게 할껀지? =&amp;gt; 벨만포드 알고리즘을 활용할 것이라고 말씀드림 우선순위 큐에 대해서 설명해달라 하셔서 힙 정렬과 같이 말씀드림 마지막 질문한번 해보라고 하셔서 맥북을 쓰는거로 아는데 두 분다 삼성노트북을 사용하시길래 이유를 여쭤봄 백앤드/DBA/프론트 등 어떤 개발자가 되고 싶은지 정말 40분 면접 중에서 20분은 털린 듯.. 특히 PT 면접을 깊이 물어보셔서 답을 제대로 못한게 아쉽다. 면접비는 5월말에 통장으로 입금해주신다 했으니 아마 발표 시즌이랑 비슷하게 겹칠듯싶다.</summary></entry><entry><title type="html">TCP/UDP란?</title><link href="http://localhost:4000/network/2019/05/22/TCP%EC%99%80-UDP/" rel="alternate" type="text/html" title="TCP/UDP란?" /><published>2019-05-22T00:01:00+09:00</published><updated>2019-05-22T00:01:00+09:00</updated><id>http://localhost:4000/network/2019/05/22/TCP%EC%99%80%20UDP</id><content type="html" xml:base="http://localhost:4000/network/2019/05/22/TCP%EC%99%80-UDP/">&lt;h1 id=&quot;tcptransmission-control-protocol&quot;&gt;TCP((Transmission Control Protocol)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/tcp.png&quot; alt=&quot;web_process&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인터넷 상에서 데이터를 패킷 형태로 보내기 위해 IP와 함께 사용하는 프로토콜이다.&lt;/li&gt;
  &lt;li&gt;TCP와 IP를 함께 사용하는데, TCP는 발신지에서 수신지로 패킷을 전송하기 위한 논리적 경로를 배정한다.&lt;/li&gt;
  &lt;li&gt;연결형 서비스로 가상 회선 방식을 제공한다.
    &lt;ul&gt;
      &lt;li&gt;연결 시 3-way Handshaking 사용, 해체 시 4-way Handshaking 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;흐름제어(송신하는 곳에서 감당이 안되게 많은 데이터를 빠르게 보내 수신하는 곳에서 문제가 일어나는 것을 막는다)&lt;/li&gt;
  &lt;li&gt;혼잡제어(네트워크 내의 패킷 수가 넘치게 증가하지 않도록 방지하는 것)&lt;/li&gt;
  &lt;li&gt;높은 신뢰성을 보장하지만 UDP보다 느린 속도를 가진다. ( 신뢰성 &amp;gt; 속도 )&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;udpuser-datagram-protocol&quot;&gt;UDP(User Datagram Protocol)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/udp.png&quot; alt=&quot;web_process&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터를 데이터그램 단위로 처리하는 프로토콜, 데이터그램이란 독립적인 관계를 지니는 패킷&lt;/li&gt;
  &lt;li&gt;비연결형 프로토콜로 연결을 위한 논리적인 경로가 없다. 즉, 각각 다른 경로로 패킷을 전송하여 빠른 속도를 보여준다.&lt;/li&gt;
  &lt;li&gt;UDP Header의 CheckSum 필드를 통해 최소한의 오류만 검출한다.&lt;/li&gt;
  &lt;li&gt;흐름제어를 못하기 때문에 패킷이 재대로 전송 되었는지, 오류가 없는지 확인할 수 없다.&lt;/li&gt;
  &lt;li&gt;빠른 속도를 보여주지만 신뢰성이 없다. 스트리밍같은 서비스에 주로 사용된다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>ChanSu Kim</name></author><category term="Network" /><category term="TCP" /><category term="가상회선 패킷" /><category term="UDP" /><category term="데이터그램 패킷" /><summary type="html">TCP((Transmission Control Protocol) 인터넷 상에서 데이터를 패킷 형태로 보내기 위해 IP와 함께 사용하는 프로토콜이다. TCP와 IP를 함께 사용하는데, TCP는 발신지에서 수신지로 패킷을 전송하기 위한 논리적 경로를 배정한다. 연결형 서비스로 가상 회선 방식을 제공한다. 연결 시 3-way Handshaking 사용, 해체 시 4-way Handshaking 사용 흐름제어(송신하는 곳에서 감당이 안되게 많은 데이터를 빠르게 보내 수신하는 곳에서 문제가 일어나는 것을 막는다) 혼잡제어(네트워크 내의 패킷 수가 넘치게 증가하지 않도록 방지하는 것) 높은 신뢰성을 보장하지만 UDP보다 느린 속도를 가진다. ( 신뢰성 &amp;gt; 속도 ) UDP(User Datagram Protocol) 데이터를 데이터그램 단위로 처리하는 프로토콜, 데이터그램이란 독립적인 관계를 지니는 패킷 비연결형 프로토콜로 연결을 위한 논리적인 경로가 없다. 즉, 각각 다른 경로로 패킷을 전송하여 빠른 속도를 보여준다. UDP Header의 CheckSum 필드를 통해 최소한의 오류만 검출한다. 흐름제어를 못하기 때문에 패킷이 재대로 전송 되었는지, 오류가 없는지 확인할 수 없다. 빠른 속도를 보여주지만 신뢰성이 없다. 스트리밍같은 서비스에 주로 사용된다.</summary></entry><entry><title type="html">OSI 7 Layer란?</title><link href="http://localhost:4000/network/2019/05/22/OSI-7-Layer/" rel="alternate" type="text/html" title="OSI 7 Layer란?" /><published>2019-05-22T00:00:30+09:00</published><updated>2019-05-22T00:00:30+09:00</updated><id>http://localhost:4000/network/2019/05/22/OSI%207%20Layer</id><content type="html" xml:base="http://localhost:4000/network/2019/05/22/OSI-7-Layer/">&lt;h1 id=&quot;osi-7-layer이란&quot;&gt;OSI 7 Layer이란?&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;개방형 시스템 상호연결(Open System Intercon-nection, OSI) 모델&lt;/li&gt;
  &lt;li&gt;상호 이질적인 네트워크간의 연결에 어려움이 많은데 이러한 호환성의 결여를 막기위해 ISO(국제 표준화 기구)에서는 OSI 참조모델을 제시함&lt;/li&gt;
  &lt;li&gt;네트워크에서 통신이 일어나는 과정을 7단계로 나눈 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;네트워크 통신 과정을 7단계로 나눈 이유는?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;계층을 나눈 이유는 통신이 일어나는 과정이 단계별로 파악할 수 있기 때문이다!&lt;/li&gt;
  &lt;li&gt;문제가 발생하더라도 해당 계층만 고치면 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;osi-7-layer-구조&quot;&gt;OSI 7 Layer 구조&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/osi7layer.png&quot; alt=&quot;web_process&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1단계--물리-계층physical&quot;&gt;1단계 : 물리 계층(Physical)**&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;말 그대로 시스템의 물리적 표현을 나타낸다. (=물리적 장비)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2단계--데이터-링크-계층-data-link&quot;&gt;2단계 : 데이터 링크 계층 (Data Link)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;노드 간 데이터 전송을 제공하며 물리 계층의 오류 수정도 처리한다.&lt;/li&gt;
  &lt;li&gt;주소 값은 물리적으로 할당 받는데, 이는 네트워크 카드가 만들어질 때부터 맥 주소(MAC address)가 정해져 있다는 뜻이다. ex) 이더넷&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3단계--네트워크-계층network&quot;&gt;3단계 : 네트워크 계층(Network)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;여러개의 노드를 거칠때마다 경로를 찾아주는 역할을 하는 계층&lt;/li&gt;
  &lt;li&gt;데이터를 목적지까지 가장 안전하고 빠르게 전달하는 기능(라우팅)&lt;/li&gt;
  &lt;li&gt;보스턴에 있는 컴퓨터가 캘리포니아에 있는 서버에 연결하려고 할 때 그 경로는 수백 만 가지다. 이 계층의 라우터가 이 작업을 효율적으로 처리한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4단계--전송-계층transport&quot;&gt;4단계 : 전송 계층(Transport)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;양 끝단(End to end)의 사용자들이 신뢰성있는 데이터를 주고 받을 수 있도록 해 주어, 상위 계층들이 데이터 전달의 유효성이나 효율성을 생각하지 않도록 해준다.&lt;/li&gt;
  &lt;li&gt;전송 계층은 특정 연결의 유효성을 제어하고, 일부 프로토콜은 상태 개념이 있고(stateful), 연결 기반(connection oriented)이다. 대표적인 예로 TCP가 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5단계--세션-계층session&quot;&gt;5단계 : 세션 계층(Session)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;양 끝단의 응용 프로세스가 통신을 관리하기 위한 방법을 제공한다.&lt;/li&gt;
  &lt;li&gt;TCP/IP 세션을 만들고 없애는 책임을 진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6단계--표현-계층presentation&quot;&gt;6단계 : 표현 계층(Presentation)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;코드 간의 번역을 담당하여 사용자의 명령어를 완성 및 결과 표현한다.&lt;/li&gt;
  &lt;li&gt;데이터를 안전하게 전송하기 위해 암호화/복호화 하는 역할 수행&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;7단계--응용-계층application&quot;&gt;7단계 : 응용 계층(Application)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP, FTP, SMTP, POP3, IMAP, Telnet 등과 같은 프로토콜이 있다.&lt;/li&gt;
  &lt;li&gt;사용자는 용도에 맞는 프로토콜을 선택하고 응용 프로세스와 직접 관계하여 일반적인 응용 서비스를 수행한다. ex) MS Office, Chrome …&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;osi-7-layer-쉽게-외우는-방법&quot;&gt;OSI 7 Layer 쉽게 외우는 방법&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;CIOKorea에 나와있는 재미있는 방법&lt;/li&gt;
  &lt;li&gt;물리 계층에서 응용 계층까지(아래에서 위로)(P-D-N-T-S-P-A)&lt;/li&gt;
  &lt;li&gt;소시지 피자를 버리지 말아 주세요(Please-Do-Not-Throw-Sausage-Pizza-Away)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/WeareSoft/tech-interview/&quot;&gt;https://github.com/WeareSoft/tech-interview/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://shlee0882.tistory.com/110&quot;&gt;https://shlee0882.tistory.com/110&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ciokorea.com/news/36536&quot;&gt;http://www.ciokorea.com/news/36536&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>ChanSu Kim</name></author><category term="Network" /><category term="OSI 7 Layer" /><summary type="html">OSI 7 Layer이란? 개방형 시스템 상호연결(Open System Intercon-nection, OSI) 모델 상호 이질적인 네트워크간의 연결에 어려움이 많은데 이러한 호환성의 결여를 막기위해 ISO(국제 표준화 기구)에서는 OSI 참조모델을 제시함 네트워크에서 통신이 일어나는 과정을 7단계로 나눈 것 네트워크 통신 과정을 7단계로 나눈 이유는? 계층을 나눈 이유는 통신이 일어나는 과정이 단계별로 파악할 수 있기 때문이다! 문제가 발생하더라도 해당 계층만 고치면 된다. OSI 7 Layer 구조 1단계 : 물리 계층(Physical)** 말 그대로 시스템의 물리적 표현을 나타낸다. (=물리적 장비) 2단계 : 데이터 링크 계층 (Data Link) 노드 간 데이터 전송을 제공하며 물리 계층의 오류 수정도 처리한다. 주소 값은 물리적으로 할당 받는데, 이는 네트워크 카드가 만들어질 때부터 맥 주소(MAC address)가 정해져 있다는 뜻이다. ex) 이더넷 3단계 : 네트워크 계층(Network) 여러개의 노드를 거칠때마다 경로를 찾아주는 역할을 하는 계층 데이터를 목적지까지 가장 안전하고 빠르게 전달하는 기능(라우팅) 보스턴에 있는 컴퓨터가 캘리포니아에 있는 서버에 연결하려고 할 때 그 경로는 수백 만 가지다. 이 계층의 라우터가 이 작업을 효율적으로 처리한다. 4단계 : 전송 계층(Transport) 양 끝단(End to end)의 사용자들이 신뢰성있는 데이터를 주고 받을 수 있도록 해 주어, 상위 계층들이 데이터 전달의 유효성이나 효율성을 생각하지 않도록 해준다. 전송 계층은 특정 연결의 유효성을 제어하고, 일부 프로토콜은 상태 개념이 있고(stateful), 연결 기반(connection oriented)이다. 대표적인 예로 TCP가 있다. 5단계 : 세션 계층(Session) 양 끝단의 응용 프로세스가 통신을 관리하기 위한 방법을 제공한다. TCP/IP 세션을 만들고 없애는 책임을 진다. 6단계 : 표현 계층(Presentation) 코드 간의 번역을 담당하여 사용자의 명령어를 완성 및 결과 표현한다. 데이터를 안전하게 전송하기 위해 암호화/복호화 하는 역할 수행 7단계 : 응용 계층(Application) HTTP, FTP, SMTP, POP3, IMAP, Telnet 등과 같은 프로토콜이 있다. 사용자는 용도에 맞는 프로토콜을 선택하고 응용 프로세스와 직접 관계하여 일반적인 응용 서비스를 수행한다. ex) MS Office, Chrome … OSI 7 Layer 쉽게 외우는 방법 CIOKorea에 나와있는 재미있는 방법 물리 계층에서 응용 계층까지(아래에서 위로)(P-D-N-T-S-P-A) 소시지 피자를 버리지 말아 주세요(Please-Do-Not-Throw-Sausage-Pizza-Away) 참고 https://github.com/WeareSoft/tech-interview/ https://shlee0882.tistory.com/110 http://www.ciokorea.com/news/36536</summary></entry><entry><title type="html">HTTP와 REST API, Cookie, Session</title><link href="http://localhost:4000/network/2019/05/21/HTTP%EC%99%80-REST-API/" rel="alternate" type="text/html" title="HTTP와 REST API, Cookie, Session" /><published>2019-05-21T17:00:00+09:00</published><updated>2019-05-21T17:00:00+09:00</updated><id>http://localhost:4000/network/2019/05/21/HTTP%EC%99%80%20REST%20API</id><content type="html" xml:base="http://localhost:4000/network/2019/05/21/HTTP%EC%99%80-REST-API/">&lt;h1 id=&quot;httphypertext-transfer-protocol이란&quot;&gt;HTTP(HyperText Transfer Protocol)이란?&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;인터넷에서 데이터를 주고받을 수 있는 프로토콜로 웹 서버와 클라이언트간 통신하기 위한 규약&lt;/li&gt;
  &lt;li&gt;어느 종류의 데이터든지 전송할 수 있도록 설계되어있다. HTML 뿐만아니라 이미지, 동영상, 오디오, 텍스트 문서 등 종류를 가리지 않는다.&lt;/li&gt;
  &lt;li&gt;이름 그대로 하이퍼텍스트를 기반으로 데이터를 전송하겠다는 말이다. 간단히 말하면 링크기반으로 데이터에 접속하겠다는 의미이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;http-작동-방식&quot;&gt;HTTP 작동 방식&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;TCP/IP를 사용하는 응용 프로토콜이며 HTTP 메세지는 HTTP 서버와 HTTP 클라이언트가 해석한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP는 연결 상태를 유지하지 않는 프로토콜이기 때문에 서버에 연결하고 Request에서 Response를 받으면 연결을 끊어버린다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt; : 수십만명이 웹 서비스를 사용하더라도 접속유지는 최소한으로 할 수 있기 때문에, 더 많은 유저의 요청을 처리 할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;단점&lt;/strong&gt; : 연결을 끊어버리기 때문에 클라이언트의 이전 상태를 알 수 없다. 이를 위해 Cookie를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/network_http.png&quot; alt=&quot;web_process&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;크롬 개발자도구의 네트워크 탭의 정보를 해석해보자.&lt;/li&gt;
  &lt;li&gt;요청한 URL은 &lt;a href=&quot;http://sophia2730.tistory.com&quot;&gt;http://sophia2730.tistory.com&lt;/a&gt; 이며 200 코드로 성공적인 요청이였다는 결과를 받았다.&lt;/li&gt;
  &lt;li&gt;여기서 작동한 Method는 GET이며 POST, PUT(수정) 등의 메소드를 사용하여 클라이언트와 서버가 데이터를 주고받는다.&lt;/li&gt;
  &lt;li&gt;여기서 URI를 자원으로 보고 Method를 동사로 보는 개발 방식이 REST 방식이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;rest-api란&quot;&gt;REST API란?&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;웹의 장점을 최대한 활용할 수 있는 아키텍처 스타일로, 자원을 표현으로 구분하여 해당 자원의 상태(정보)를 주고 받는 모든 것을 의미한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;즉, URI를 통해 자원(Resource)을 명시하고, HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD Operation을 적용하는 것을 의미한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;REST API는 두 가지 특징을 가진다.
    &lt;ol&gt;
      &lt;li&gt;URI는 정보의 자원을 표현해야 한다.  ex) GET /members/delete/1 (X),  DELETE /members/1 (O)&lt;/li&gt;
      &lt;li&gt;자원에 대한 행위는 HTTP Method(GET, POST, PUT, DELETE)로 표현한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이러한 방식으로 확장성과 재사용성을 높여 유지보수 및 운용을 편리하게 할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;cookie와-session&quot;&gt;Cookie와 Session&lt;/h1&gt;
&lt;h2 id=&quot;cookie&quot;&gt;Cookie&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;모든 내용이 클라이언트측에서 저장되며 서버에 요청할 때 마다 HTTP 헤더에 쿠키 내용(&lt;strong&gt;KEY=VALUE&lt;/strong&gt;)을 전달합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/web_cookie.png&quot; alt=&quot;web_process&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;최초 접속일 경우 사용자ID, 로그인시간, IP등을 암호화한 구문을 클라이언트의 쿠키에 &lt;strong&gt;KEY=VALUE&lt;/strong&gt; 된 구문으로 생성해 클라이언트에게 쿠키에 저장하라고 응답합니다. (예 : state=ASKHDNxxu7432keedsa7jhklsadasdmslk )&lt;/li&gt;
  &lt;li&gt;클라이언트는 매번 서버에 요청할 때 위 쿠키를 전달합니다.&lt;/li&gt;
  &lt;li&gt;서버는 로그인상황을 검사하기 위해서 매번 쿠키를 읽습니다. 그리고 위의 키를 찾아 정보를 해독하고, 서버에 있는 사용자 정보와 비교해 일치하면 로그인된 것으로 보고, 일치하지 않으면 불량요청 혹은 로그인하지 않은 사용자로 판별합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;session&quot;&gt;Session&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Session은 서버쪽에 저장되는 쿠키이며 클라이언트가 서버에 Request를 보내면 서버는 클라이언트한테 세션 ID를 제공한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/web_session.png&quot; alt=&quot;web_process&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;로그인 요청이 들어왔을 때 정보가 일치하면 서버는 사용자ID, 로그인시간, IP 등을 저장하는 Session을 생성합니다.&lt;/li&gt;
  &lt;li&gt;클라이언트에 응답할 때 세션을 찾을 수 있는 Session ID를 클라이언트에 전달합니다.(보통 쿠키로 전달)&lt;/li&gt;
  &lt;li&gt;클라이언트는 다음 요청시, Session ID를 함께 요청(쿠키를 사용하든 다른 방법을 사용하든)합니다.&lt;/li&gt;
  &lt;li&gt;서버가 요청을 받은 경우 Session ID를 이용해서 서버에 저장된 세션을 찾아와 로그인을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;cookie와-session의-저장-정보와-위치&quot;&gt;Cookie와 Session의 저장 정보와 위치&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cookie-session.png&quot; alt=&quot;web_process&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://message0412.tistory.com/entry/HTTP-프로토콜-알아보기1&quot;&gt;https://message0412.tistory.com/entry/HTTP-프로토콜-알아보기1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hashcode.co.kr/questions/3243&quot;&gt;https://hashcode.co.kr/questions/3243&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>ChanSu Kim</name></author><category term="Network" /><category term="HTTP" /><category term="REST" /><category term="Cookie" /><category term="Session" /><summary type="html">HTTP(HyperText Transfer Protocol)이란? 인터넷에서 데이터를 주고받을 수 있는 프로토콜로 웹 서버와 클라이언트간 통신하기 위한 규약 어느 종류의 데이터든지 전송할 수 있도록 설계되어있다. HTML 뿐만아니라 이미지, 동영상, 오디오, 텍스트 문서 등 종류를 가리지 않는다. 이름 그대로 하이퍼텍스트를 기반으로 데이터를 전송하겠다는 말이다. 간단히 말하면 링크기반으로 데이터에 접속하겠다는 의미이다. HTTP 작동 방식 TCP/IP를 사용하는 응용 프로토콜이며 HTTP 메세지는 HTTP 서버와 HTTP 클라이언트가 해석한다. HTTP는 연결 상태를 유지하지 않는 프로토콜이기 때문에 서버에 연결하고 Request에서 Response를 받으면 연결을 끊어버린다. 장점 : 수십만명이 웹 서비스를 사용하더라도 접속유지는 최소한으로 할 수 있기 때문에, 더 많은 유저의 요청을 처리 할 수 있다. 단점 : 연결을 끊어버리기 때문에 클라이언트의 이전 상태를 알 수 없다. 이를 위해 Cookie를 사용한다. 크롬 개발자도구의 네트워크 탭의 정보를 해석해보자. 요청한 URL은 http://sophia2730.tistory.com 이며 200 코드로 성공적인 요청이였다는 결과를 받았다. 여기서 작동한 Method는 GET이며 POST, PUT(수정) 등의 메소드를 사용하여 클라이언트와 서버가 데이터를 주고받는다. 여기서 URI를 자원으로 보고 Method를 동사로 보는 개발 방식이 REST 방식이다. REST API란? 웹의 장점을 최대한 활용할 수 있는 아키텍처 스타일로, 자원을 표현으로 구분하여 해당 자원의 상태(정보)를 주고 받는 모든 것을 의미한다. 즉, URI를 통해 자원(Resource)을 명시하고, HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD Operation을 적용하는 것을 의미한다. REST API는 두 가지 특징을 가진다. URI는 정보의 자원을 표현해야 한다. ex) GET /members/delete/1 (X), DELETE /members/1 (O) 자원에 대한 행위는 HTTP Method(GET, POST, PUT, DELETE)로 표현한다. 이러한 방식으로 확장성과 재사용성을 높여 유지보수 및 운용을 편리하게 할 수 있다. Cookie와 Session Cookie 모든 내용이 클라이언트측에서 저장되며 서버에 요청할 때 마다 HTTP 헤더에 쿠키 내용(KEY=VALUE)을 전달합니다. 최초 접속일 경우 사용자ID, 로그인시간, IP등을 암호화한 구문을 클라이언트의 쿠키에 KEY=VALUE 된 구문으로 생성해 클라이언트에게 쿠키에 저장하라고 응답합니다. (예 : state=ASKHDNxxu7432keedsa7jhklsadasdmslk ) 클라이언트는 매번 서버에 요청할 때 위 쿠키를 전달합니다. 서버는 로그인상황을 검사하기 위해서 매번 쿠키를 읽습니다. 그리고 위의 키를 찾아 정보를 해독하고, 서버에 있는 사용자 정보와 비교해 일치하면 로그인된 것으로 보고, 일치하지 않으면 불량요청 혹은 로그인하지 않은 사용자로 판별합니다. Session Session은 서버쪽에 저장되는 쿠키이며 클라이언트가 서버에 Request를 보내면 서버는 클라이언트한테 세션 ID를 제공한다. 로그인 요청이 들어왔을 때 정보가 일치하면 서버는 사용자ID, 로그인시간, IP 등을 저장하는 Session을 생성합니다. 클라이언트에 응답할 때 세션을 찾을 수 있는 Session ID를 클라이언트에 전달합니다.(보통 쿠키로 전달) 클라이언트는 다음 요청시, Session ID를 함께 요청(쿠키를 사용하든 다른 방법을 사용하든)합니다. 서버가 요청을 받은 경우 Session ID를 이용해서 서버에 저장된 세션을 찾아와 로그인을 확인할 수 있습니다. Cookie와 Session의 저장 정보와 위치 참고 https://message0412.tistory.com/entry/HTTP-프로토콜-알아보기1 https://hashcode.co.kr/questions/3243</summary></entry><entry><title type="html">주소창에 www.naver.com을 치면 일어나는 일</title><link href="http://localhost:4000/network/2019/05/21/www.naver.com%EC%9D%84-%EC%B9%98%EB%A9%B4-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%9D%BC/" rel="alternate" type="text/html" title="주소창에 www.naver.com을 치면 일어나는 일" /><published>2019-05-21T14:00:00+09:00</published><updated>2019-05-21T14:00:00+09:00</updated><id>http://localhost:4000/network/2019/05/21/www.naver.com%EC%9D%84%20%EC%B9%98%EB%A9%B4%20%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94%20%EC%9D%BC</id><content type="html" xml:base="http://localhost:4000/network/2019/05/21/www.naver.com%EC%9D%84-%EC%B9%98%EB%A9%B4-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%9D%BC/">&lt;h1 id=&quot;주소창에-wwwnavercom을-치면-일어나는-일&quot;&gt;주소창에 www.naver.com을 치면 일어나는 일&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;주소창에 www.naver.com을 입력하면 어떤 일이 일어날까?&lt;/li&gt;
  &lt;li&gt;면접 질문에서도 종종 나오는 이 방식은 생각보다 간단하다.&lt;/li&gt;
  &lt;li&gt;방식에 대해 이해하기 전에 IP 주소, 도메인에 대한 사전 지식이 필요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;ip-주소&quot;&gt;IP 주소&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;IP 주소란 많은 컴퓨터들이 인터넷 상에서 서로를 인식하기 위해 지정받은 식별용 번호라고 생각하면 된다.&lt;/li&gt;
  &lt;li&gt;현재는 IPv4 버전(32비트)로 구성되어 있으며 한번씩은 들어봤을 법한 127.0.0.1 같은 주소를 말한다.&lt;/li&gt;
  &lt;li&gt;시간이 갈수록 IPv4 주소의 부족으로 IPv6가 생겼는데, 128비트로 구성되어있기 때문에 IP 주소가 부족하지 않다는 특징이 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;도메인-네임domain-name&quot;&gt;도메인 네임(Domain Name)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;IP주소는 12자리의 숫자로 되어있기 때문에 사람이 외우기 힘들다는 단점이 있다.&lt;/li&gt;
  &lt;li&gt;그렇기 때문에 12자리의 IP 주소를 문자로 표현한 주소를 &lt;strong&gt;&lt;em&gt;도메인 네임&lt;/em&gt;&lt;/strong&gt;이라고 한다.&lt;/li&gt;
  &lt;li&gt;다시 말해서, 도메인 네임은 ‘naver.com’처럼 몇 개의 의미있는 문자들과 점(.)의 조합으로 구성된다.&lt;/li&gt;
  &lt;li&gt;도메인 네임은 사람의 편의성을 위해 만든 주소이므로 실제로는 컴퓨터가 이해할 수 있는 IP 주소로 변환하는 작업이 필요하다.&lt;/li&gt;
  &lt;li&gt;이때 사용할 수 있도록 미리 도메인 네임과 함께 해당하는 IP 주소값을 한 쌍으로 저장하고 있는 데이터베이스를 &lt;strong&gt;&lt;em&gt;DNS(Domain Name System)&lt;/em&gt;&lt;/strong&gt; 이라고 부른다.&lt;/li&gt;
  &lt;li&gt;다시 말해 사람이 도메인 네임으로 입력하면 DNS를 이용해 컴퓨터는 IP 주소를 찾아갈 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;web-동작-원리&quot;&gt;WEB 동작 원리&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/web_process.png&quot; alt=&quot;web_process&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;사용자가 브라우저에 도메인 네임(www.naver.com)을 입력한다.&lt;/li&gt;
  &lt;li&gt;사용자가 입력한 URL 주소 중에서 도메인 네임(domain name) 부분을 DNS 서버에서 검색하고, DNS 서버에서 해당 도메인 네임에 해당하는 IP 주소를 찾아 사용자가 입력한 URL 정보와 함께 전달한다.&lt;/li&gt;
  &lt;li&gt;페이지 URL 정보와 전달받은 IP 주소는 HTTP 프로토콜을 사용하여 HTTP 요청 메시지를 생성하고, 이렇게 생성된 HTTP 요청 메시지는 TCP 프로토콜을 사용하여 인터넷을 거쳐 해당 IP 주소의 컴퓨터로 전송된다.&lt;/li&gt;
  &lt;li&gt;이렇게 도착한 HTTP 요청 메시지는 HTTP 프로토콜을 사용하여 웹 페이지 URL 정보로 변환되어 웹 페이지 URL 정보에 해당하는 데이터를 검색한다.&lt;/li&gt;
  &lt;li&gt;검색된 웹 페이지 데이터는 또 다시 HTTP 프로토콜을 사용하여 HTTP 응답 메시지를 생성하고 TCP 프로토콜을 사용하여 인터넷을 거쳐 원래 컴퓨터로 전송된다.&lt;/li&gt;
  &lt;li&gt;도착한 HTTP 응답 메시지는 HTTP 프로토콜을 사용하여 웹 페이지 데이터로 변환되어 웹 브라우저에 의해 출력되어 사용자가 볼 수 있게 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;어려운 개념은 아니니 재미삼아 읽어봐도 좋을 것 같다.&lt;/p&gt;

&lt;p&gt;출처 : &lt;a href=&quot;http://tcpschool.com/webbasic/works&quot;&gt;http://tcpschool.com/webbasic/works&lt;/a&gt;&lt;/p&gt;</content><author><name>ChanSu Kim</name></author><category term="Network" /><category term="IP 주소" /><category term="DNS" /><category term="도메인" /><summary type="html">주소창에 www.naver.com을 치면 일어나는 일 주소창에 www.naver.com을 입력하면 어떤 일이 일어날까? 면접 질문에서도 종종 나오는 이 방식은 생각보다 간단하다. 방식에 대해 이해하기 전에 IP 주소, 도메인에 대한 사전 지식이 필요하다. IP 주소 IP 주소란 많은 컴퓨터들이 인터넷 상에서 서로를 인식하기 위해 지정받은 식별용 번호라고 생각하면 된다. 현재는 IPv4 버전(32비트)로 구성되어 있으며 한번씩은 들어봤을 법한 127.0.0.1 같은 주소를 말한다. 시간이 갈수록 IPv4 주소의 부족으로 IPv6가 생겼는데, 128비트로 구성되어있기 때문에 IP 주소가 부족하지 않다는 특징이 있다. 도메인 네임(Domain Name) IP주소는 12자리의 숫자로 되어있기 때문에 사람이 외우기 힘들다는 단점이 있다. 그렇기 때문에 12자리의 IP 주소를 문자로 표현한 주소를 도메인 네임이라고 한다. 다시 말해서, 도메인 네임은 ‘naver.com’처럼 몇 개의 의미있는 문자들과 점(.)의 조합으로 구성된다. 도메인 네임은 사람의 편의성을 위해 만든 주소이므로 실제로는 컴퓨터가 이해할 수 있는 IP 주소로 변환하는 작업이 필요하다. 이때 사용할 수 있도록 미리 도메인 네임과 함께 해당하는 IP 주소값을 한 쌍으로 저장하고 있는 데이터베이스를 DNS(Domain Name System) 이라고 부른다. 다시 말해 사람이 도메인 네임으로 입력하면 DNS를 이용해 컴퓨터는 IP 주소를 찾아갈 수 있다. WEB 동작 원리 사용자가 브라우저에 도메인 네임(www.naver.com)을 입력한다. 사용자가 입력한 URL 주소 중에서 도메인 네임(domain name) 부분을 DNS 서버에서 검색하고, DNS 서버에서 해당 도메인 네임에 해당하는 IP 주소를 찾아 사용자가 입력한 URL 정보와 함께 전달한다. 페이지 URL 정보와 전달받은 IP 주소는 HTTP 프로토콜을 사용하여 HTTP 요청 메시지를 생성하고, 이렇게 생성된 HTTP 요청 메시지는 TCP 프로토콜을 사용하여 인터넷을 거쳐 해당 IP 주소의 컴퓨터로 전송된다. 이렇게 도착한 HTTP 요청 메시지는 HTTP 프로토콜을 사용하여 웹 페이지 URL 정보로 변환되어 웹 페이지 URL 정보에 해당하는 데이터를 검색한다. 검색된 웹 페이지 데이터는 또 다시 HTTP 프로토콜을 사용하여 HTTP 응답 메시지를 생성하고 TCP 프로토콜을 사용하여 인터넷을 거쳐 원래 컴퓨터로 전송된다. 도착한 HTTP 응답 메시지는 HTTP 프로토콜을 사용하여 웹 페이지 데이터로 변환되어 웹 브라우저에 의해 출력되어 사용자가 볼 수 있게 된다. 어려운 개념은 아니니 재미삼아 읽어봐도 좋을 것 같다. 출처 : http://tcpschool.com/webbasic/works</summary></entry><entry><title type="html">ArrayList와 LinkedList</title><link href="http://localhost:4000/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2019/05/21/ArrayList%EC%99%80-LinkedList/" rel="alternate" type="text/html" title="ArrayList와 LinkedList" /><published>2019-05-21T14:00:00+09:00</published><updated>2019-05-21T14:00:00+09:00</updated><id>http://localhost:4000/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2019/05/21/ArrayList%EC%99%80%20LinkedList</id><content type="html" xml:base="http://localhost:4000/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2019/05/21/ArrayList%EC%99%80-LinkedList/">&lt;h1 id=&quot;arraylist와-linkedlist&quot;&gt;ArrayList와 LinkedList&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;ArrayList와 LinktedList 둘다 모두 Java에서 제공하는 List 인터페이스를 구현한 Collection 구현체이다.&lt;/li&gt;
  &lt;li&gt;하지만 내부적으로 작동하는 방식은 다르다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;First&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;//O(1)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Third&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;//O(1)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Second&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;//O(n)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;//O(n)&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;//O(1)&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;First&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//O(1)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Second&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;//O(1)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addLast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Third&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;//O(1)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pollFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;//O(1)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pollLast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;//O(1)&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;nlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;//O(n)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;arraylist&quot;&gt;ArrayList&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;알고리즘 문제를 풀면서 가장 중요한 ArrayList와 LinkedList의 차이점은 시간복잡도의 차이라고 볼 수 있다.&lt;/li&gt;
  &lt;li&gt;ArrayList는 동적으로 Array를 생성한다고 생각하면 배열과 비슷한 점이 많다.&lt;/li&gt;
  &lt;li&gt;ArrayList는 remove 시에 O(n)의 시간복잡도를 가진다.&lt;/li&gt;
  &lt;li&gt;i번째 배열을 지우고 최대 n만큼 앞으로 이동해야 하기 때문이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt; ArrayList 중간 Insert &amp;gt;
&lt;img src=&quot;/assets/images/ArrayList_insert.png&quot; alt=&quot;11st_result&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt; ArrayList 중간 Remove &amp;gt;
&lt;img src=&quot;/assets/images/ArrayList_insert.png&quot; alt=&quot;11st_result&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;삽입 또한 맨 뒤에삽입과 중간삽입으로 나눌 수 있는데, 중간에 삽입하는 경우 O(n), 맨 뒤에 삽입하는 경우 O(1)의 시간복잡도를 가진다.&lt;/li&gt;
  &lt;li&gt;하지만 get 메소드는 해당 index를 바로 가져오기 때문에 O(1)의 시간복잡도를 가진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linkedlist&quot;&gt;LinkedList&lt;/h2&gt;

&lt;p&gt;&amp;lt; LinkedList 중간 add &amp;gt;
&lt;img src=&quot;/assets/images/LinkedList_add.png&quot; alt=&quot;11st_result&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이에 비해, LinkedList는 Node를 사용하기 때문에 add, poll 시에 O(1)의 시간복잡도를 가진다.&lt;/li&gt;
  &lt;li&gt;하지만 get 메소드 사용시에 앞에서부터 찾기 때문에 O(n)의 시간복잡도를 가진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;정리&quot;&gt;정리&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ArrayList&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;LinkedList&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;삽입&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;add&lt;br /&gt;O(1) or O(n)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;add, addFirst, addLast&lt;br /&gt;O(1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;삭제&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;remove&lt;br /&gt;O(n)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;poll, pollFirst, pollLast&lt;br /&gt;O(1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;접근&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;get&lt;br /&gt;O(1)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;get&lt;br /&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>ChanSu Kim</name></author><category term="자료구조" /><category term="ArrayList" /><category term="LinkedList" /><category term="시간복잡도" /><summary type="html">ArrayList와 LinkedList ArrayList와 LinktedList 둘다 모두 Java에서 제공하는 List 인터페이스를 구현한 Collection 구현체이다. 하지만 내부적으로 작동하는 방식은 다르다. import java.io.*; import java.util.*; public class Main { public static void main(String[] args) throws Exception { ArrayList&amp;lt;String&amp;gt; alist = new ArrayList&amp;lt;&amp;gt;(); alist.add(0,&quot;First&quot;); //O(1) alist.add(&quot;Third&quot;); //O(1) alist.add(1, &quot;Second&quot;); //O(n) alist.remove(1); //O(n) alist.get(1); //O(1) LinkedList&amp;lt;String&amp;gt; nlist = new LinkedList&amp;lt;&amp;gt;(); nlist.addFirst(&quot;First&quot;); //O(1) nlist.add(&quot;Second&quot;); //O(1) nlist.addLast(&quot;Third&quot;); //O(1) nlist.pollFirst(); //O(1) nlist.pollLast(); //O(1) nlist.get(0); //O(n) } } ArrayList 알고리즘 문제를 풀면서 가장 중요한 ArrayList와 LinkedList의 차이점은 시간복잡도의 차이라고 볼 수 있다. ArrayList는 동적으로 Array를 생성한다고 생각하면 배열과 비슷한 점이 많다. ArrayList는 remove 시에 O(n)의 시간복잡도를 가진다. i번째 배열을 지우고 최대 n만큼 앞으로 이동해야 하기 때문이다. &amp;lt; ArrayList 중간 Insert &amp;gt; &amp;lt; ArrayList 중간 Remove &amp;gt; 삽입 또한 맨 뒤에삽입과 중간삽입으로 나눌 수 있는데, 중간에 삽입하는 경우 O(n), 맨 뒤에 삽입하는 경우 O(1)의 시간복잡도를 가진다. 하지만 get 메소드는 해당 index를 바로 가져오기 때문에 O(1)의 시간복잡도를 가진다. LinkedList &amp;lt; LinkedList 중간 add &amp;gt; 이에 비해, LinkedList는 Node를 사용하기 때문에 add, poll 시에 O(1)의 시간복잡도를 가진다. 하지만 get 메소드 사용시에 앞에서부터 찾기 때문에 O(n)의 시간복잡도를 가진다. 정리   ArrayList LinkedList 삽입 addO(1) or O(n) add, addFirst, addLastO(1) 삭제 removeO(n) poll, pollFirst, pollLastO(1) 접근 getO(1) getO(n)</summary></entry><entry><title type="html">기억장치 관리</title><link href="http://localhost:4000/os/2019/05/20/%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98-%EA%B4%80%EB%A6%AC/" rel="alternate" type="text/html" title="기억장치 관리" /><published>2019-05-20T14:00:00+09:00</published><updated>2019-05-20T14:00:00+09:00</updated><id>http://localhost:4000/os/2019/05/20/%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98%20%EA%B4%80%EB%A6%AC</id><content type="html" xml:base="http://localhost:4000/os/2019/05/20/%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98-%EA%B4%80%EB%A6%AC/">&lt;h1 id=&quot;기억장치-배치-전략&quot;&gt;기억장치 배치 전략&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;최초 적합(First Fit) : 가능한 영역 중에서 첫 번째 분할 영역에 배치시키는 방법&lt;/li&gt;
  &lt;li&gt;최적 적합(Best Fit)  : 가능한 영역 중에서 단편화를 가장 작게 남기는 분할 영역에 배치하는 방법&lt;/li&gt;
  &lt;li&gt;최악 적합(Worst Fit) : 가능한 영역 중에서 단편화를 가장 많이 남기는 분할 영역에 배치하는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;영역번호&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;영역크기&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;상태&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5K&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;공백&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;14K&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;공백&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10K&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;사용중&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;12K&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;공백&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;16K&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;공백&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;배치 전략 중 10K 프로그램이 할당 받는 영역의 번호는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;최초 적합(First Fit) : 10K 프로그램이 들어갈 수 있는 첫 번째 영역은 2번이다.&lt;/li&gt;
  &lt;li&gt;최적 적합(Best Fit)  : 10K 프로그램이 들어가고 단편화를 가장 작게 남기는 영역은 4번이다.&lt;/li&gt;
  &lt;li&gt;최악 적합(Worst Fit) : 10K 프로그램이 들어가고 단편화를 가장 많이 남기는 영역은 5번이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;가상기억장치-구현&quot;&gt;가상기억장치 구현&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;보조기억장치(하드디스크)의 일부를 주기억장치처럼 사용하는 것으로 가상기억장치에 저장된 프로그램을 실행하려면 가상기억장치의 주소를 주기억장치의 주소로 바꾸눈 &lt;strong&gt;주소 변환 작업(매핑)&lt;/strong&gt;이 필요하다.&lt;/li&gt;
  &lt;li&gt;페이징 기법 : 프로그램을 동일한 크기로 나눈 단위를 페이지라 하며 이 페이지를 블록으로 활용하는 기법&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;세그먼테이션 기법 : 프로그램을 가변적인 크기로 나눈 단위를 세그먼트라 하며, 이 세그먼트를 블록으로 사용하는 기법&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;내부 단변화 : 프로그램이 할당된 후 남는 빈 공간, 영역 크기 16K &amp;gt; 프로그램 크기 14K 인 경우 내부 단편화 2K 발생&lt;/li&gt;
  &lt;li&gt;외부 단편화 : 영역 크기보다 프로그램 크기가 커서 할당되지 않아 남는 빈 공간, 영억 크기 12K &amp;lt; 프로그램 크기 14K 인 경우 외부 단편화 2K 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;페이징-기법&quot;&gt;페이징 기법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;페이지 : 프로그램을 일정한 크기로 나눈 단위(일반적으로 1~4KB)&lt;/li&gt;
  &lt;li&gt;프레임 : 페이지 크기로 일정하게 나누어진 주기억장치 단위&lt;/li&gt;
  &lt;li&gt;주소 변환을 위해서 페이지의 위치 정보를 가지고 있는 페이지 맵 테이블이 필요하다.&lt;/li&gt;
  &lt;li&gt;외부 단편화는 발생하지 않지만 내부 단편화는 발생할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt; : 여러 개의 프로그램을 동시 실행할 수 있어 다중 프로그래밍 정도가 향상된다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;단점&lt;/strong&gt; : 주소 변환 과정에서 CPU 사용시간이 낭비되고 내부 단편화 문제가 발생한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/paging.png&quot; alt=&quot;paging&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;세그먼테이션-기법&quot;&gt;세그먼테이션 기법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;세그먼트 : 사용자 주소 공간을 논리적인 단위로 나눈 것, 각 세그먼트는 고유한 이름과 크기를 가진다.&lt;/li&gt;
  &lt;li&gt;주소 변환을 위해 세그먼트가 존재하는 위치 정보를 가지고 있는 세그먼트 맵 테이블이 필요하다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt; : 외부단편화에 의한 기억장치 낭비를 줄일 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;단점&lt;/strong&gt; : 세그먼트 크기가 가변적이기 때문에 세그먼트 영역이 다른 세그먼트 영역을 침범하지 않는 기억장치 보호키가 필요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/segment.png&quot; alt=&quot;paging&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;페이지-교체-알고리즘&quot;&gt;페이지 교체 알고리즘&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;페이지 부재가 발생했을 때 가상기억장치의 필요한 페이지를 주기억장치에 적재하는 데 어떤 프레임을 선택해 교체할 지 결정하는 기법&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fifofirst-in-first-out&quot;&gt;FIFO(First In First Out)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;가장 오래 있었던 페이지를 고체하는 기법이다.&lt;/li&gt;
  &lt;li&gt;벨레이디의 모순 현상이 발생한다.(프레임 수가 늘어나면 페이지 부재 수가 줄어들지 않는 현상)&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;참조 페이지&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frame 1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;1&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;4&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;5&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;5&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frame 2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;2&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;1&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;1&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;3&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frame 3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;3&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;2&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;2&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;4&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;페이지 부재&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;위 경우 페이지 부재가 총 9번 발생한다.&lt;/li&gt;
  &lt;li&gt;하지만, Frame 개수가 4개로 늘어나도 페이지 부재는 10번으로 증가한다. =&amp;gt; 벨레이디 모순 현상&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lruleast-recently-used&quot;&gt;LRU(Least Recently Used)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;최근에 가장 오랫동안 사용하지 않은 페이지를 교체하는 기법&lt;/li&gt;
  &lt;li&gt;계수기나 스택같은 별로 하드웨어가 필요하며 시간적인 오버헤드가 발생하고, 실제로 구현하기 어렵다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;참조 페이지&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frame 1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;2&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;2&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;2&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frame 2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;3&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;5&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;5&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frame 3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;1&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;3&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;페이지 부재&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;lfuleast-frequently-used&quot;&gt;LFU(Least Frequently Used)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;사용 빈도가 가장 적은 페이지를 교체하는 기법&lt;/li&gt;
  &lt;li&gt;활발하게 사용되는 페이지는 사용 횟수가 많아 교체되지 않고 사용된다.&lt;/li&gt;
  &lt;li&gt;초기에 많이 사용된 페이지가 그 후루도 사용되지 않을 경우 프레임을 계속 차지할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;참조 페이지&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frame 1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;2&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;2&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frame 2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;3&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;3&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frame 3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;1&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;1&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frame 4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;4&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;5&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;페이지 부재&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;가상기억창치-관리&quot;&gt;가상기억창치 관리&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;페이지 크기
    &lt;ul&gt;
      &lt;li&gt;페이지 크기가 작을 경우
        &lt;ul&gt;
          &lt;li&gt;페이지 단편화가 가모되고 볼필요한 내용이 주기억장치에 적재될 확률이 적다.&lt;/li&gt;
          &lt;li&gt;페이지 정보를 가지는 페이지 맵 테이블 크기가 커지고 매핑 속도가 늦어진다.&lt;/li&gt;
          &lt;li&gt;디스크 접근 횟수가 많아져 전체적인 입출력 시간이 증가한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;페이지 크기가 클 경우
        &lt;ul&gt;
          &lt;li&gt;페이지 정보를 갖는 맵 테이블의 크기가 작아지고, 매핑 속도가 빨라진다.&lt;/li&gt;
          &lt;li&gt;디스크 접근 횟수가 줄어들어 전체적인 입출력 시간이 감소한다.&lt;/li&gt;
          &lt;li&gt;페이지 단편화가 증가되고, 한 개의 페이지를 주기억장치로 이동하는 시간이 늘어난다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;구역성(Locality)
    &lt;ul&gt;
      &lt;li&gt;어느 순간 특정 페이지만 집중적으로 참조하는 것&lt;/li&gt;
      &lt;li&gt;시간 구역성
        &lt;ul&gt;
          &lt;li&gt;하나의 페이지를 일정 시간 동안 집중적으로 엑세스하는 현상&lt;/li&gt;
          &lt;li&gt;한번 참조한 페이지는 가까운 시간 내에 계속 참조할 가능성이 높다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;공간 구역성
        &lt;ul&gt;
          &lt;li&gt;어느 하나의 페이지를 참조하면 그 근처의 페이지를 참조할 가능성이 높다.&lt;/li&gt;
          &lt;li&gt;프로세스 실행 시 일정 위치의 페이지를 집중적으로 액세스하는 현상&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;워킹 셋(Working Set)
    &lt;ul&gt;
      &lt;li&gt;프로세스가 일정 시간 동안 자주 참조하는 페이지들의 집합&lt;/li&gt;
      &lt;li&gt;자주 참조되는 워킹 셋을 주기억장치에 상주시킴으로써 페이지 부재 및 교체 현상이 줄어들어 사용이 안정화된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스레싱(Thrashing)
    &lt;ul&gt;
      &lt;li&gt;프로세스 처리 시간보다 페이지 교체에 소요되는 시간이 더 많아지는 현상&lt;/li&gt;
      &lt;li&gt;어떤 프로세스가 실제로 사용하는 프레임 수만큼의 프레임을 갖지 못한 경우 발생&lt;/li&gt;
      &lt;li&gt;방지 방법 : 다중 프로그래밍 정도 완화, Working Set 이용&lt;/li&gt;
      &lt;li&gt;cf) 다중 프로그래밍 정도 : 얼마나 많은 프로그램을 동시에 수행하는 정도&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;디스크-스케줄링&quot;&gt;디스크 스케줄링&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;사용할 데이터가 디스크 상의 여러 곳에 저장되어 있을 경우 디스크 헤드가 움직으는 경로를 결정하는 기법&lt;/li&gt;
  &lt;li&gt;목적 : 처리량 최대화, 응답 시간 최소화, 응답 시간 편차의 최소화&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fcfsfirst-come-first-service&quot;&gt;FCFS(First Come First Service)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;디스크 대기 큐에 가장 먼저 들어온 트랙에 대한 요청을 먼저 서비스하는 기법&lt;/li&gt;
  &lt;li&gt;더 높은 우선순위의 요청이 입력되어도 순사가 바뀌지 않아 공평성이 보장된다.&lt;/li&gt;
  &lt;li&gt;디스크 오버헤드가 적을 때 효율적이며, 오버헤드가 커지면 응답 시간이 길어진다.&lt;/li&gt;
  &lt;li&gt;디스크 대기 큐 : 53,98,183,37,122,14,124,65,67&lt;/li&gt;
  &lt;li&gt;이동 순서 : 53 -&amp;gt; 98 -&amp;gt; 183 -&amp;gt; 37 -&amp;gt; 122 -&amp;gt; 14 -&amp;gt; 124 -&amp;gt; 65 -&amp;gt; 67&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sstfshortest-seek-time-first&quot;&gt;SSTF(Shortest Seek Time First)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;탐색 거리가 가장 짧은 트랙에 대한 요청을 먼저 서비스하는 기법&lt;/li&gt;
  &lt;li&gt;현재 헤드 위치에서 가장 가까운 거리에 있는 트랙으로 헤드를 이동한다.&lt;/li&gt;
  &lt;li&gt;현재 헤드 위치에 가장 가까운 트랙에 대한 요청이 계속 발생하는 경우 먼 거리의 서비스는 무한정 기다리는 기아 상태가 발생할 수 있다.&lt;/li&gt;
  &lt;li&gt;디스크 대기 큐 : 53,98,183,37,122,14,124,65,67&lt;/li&gt;
  &lt;li&gt;이동 순서 : 53 -&amp;gt; 65 -&amp;gt; 67 -&amp;gt; 37 -&amp;gt; 14 -&amp;gt; 98 -&amp;gt; 122 -&amp;gt; 124 -&amp;gt; 183&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scan&quot;&gt;SCAN&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;SSTF가 갖는 탐색 시간의 편차를 해소하기 위한 기법&lt;/li&gt;
  &lt;li&gt;현재 헤드 위치에서 진행 방향이 결정되면 탐색 거리가 짧은 순서에 따라 그 방향의 모든 요청을 서비스 후 역방향의 요청 사항을 서비스한다.&lt;/li&gt;
  &lt;li&gt;오버헤드가 적을 경우 가장 효율적인 기법이다.&lt;/li&gt;
  &lt;li&gt;디스크 대기 큐 : 53,98,183,37,122,14,124,65,67&lt;/li&gt;
  &lt;li&gt;이동 순서 : 53 -&amp;gt; 65 -&amp;gt; 67 -&amp;gt; 98 -&amp;gt; 122 -&amp;gt; 124 -&amp;gt; 183 -&amp;gt; 199 -&amp;gt; 37 -&amp;gt; 14&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;c-scancircular-scan&quot;&gt;C-SCAN(Circular SCAN)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;항상 바깥쪽에서 안쪽으로 한 방향으로만 움직이며 가장 짧은 탐색 거리를 갖는 요청을 서비스하는 기법&lt;/li&gt;
  &lt;li&gt;처음가 마지막을 인접시킨 것과 같은 원형 형태로 디스크를 처리한다.&lt;/li&gt;
  &lt;li&gt;디스크 대기 큐 : 53,98,183,37,122,14,124,65,67&lt;/li&gt;
  &lt;li&gt;이동 순서 : 53 -&amp;gt; 37 -&amp;gt; 14 -&amp;gt; 0 -&amp;gt; 199 -&amp;gt; 183 -&amp;gt; 124 -&amp;gt; 122 -&amp;gt; 98 -&amp;gt; 67 -&amp;gt; 65&lt;/li&gt;
&lt;/ul&gt;</content><author><name>ChanSu Kim</name></author><category term="OS" /><category term="기억장치" /><category term="메모리 할당" /><category term="페이징" /><category term="세그먼테이션" /><category term="디스크 스케쥴링" /><summary type="html">기억장치 배치 전략 최초 적합(First Fit) : 가능한 영역 중에서 첫 번째 분할 영역에 배치시키는 방법 최적 적합(Best Fit) : 가능한 영역 중에서 단편화를 가장 작게 남기는 분할 영역에 배치하는 방법 최악 적합(Worst Fit) : 가능한 영역 중에서 단편화를 가장 많이 남기는 분할 영역에 배치하는 방법 영역번호 영역크기 상태 1 5K 공백 2 14K 공백 3 10K 사용중 4 12K 공백 5 16K 공백 배치 전략 중 10K 프로그램이 할당 받는 영역의 번호는 다음과 같다. 최초 적합(First Fit) : 10K 프로그램이 들어갈 수 있는 첫 번째 영역은 2번이다. 최적 적합(Best Fit) : 10K 프로그램이 들어가고 단편화를 가장 작게 남기는 영역은 4번이다. 최악 적합(Worst Fit) : 10K 프로그램이 들어가고 단편화를 가장 많이 남기는 영역은 5번이다. 가상기억장치 구현 보조기억장치(하드디스크)의 일부를 주기억장치처럼 사용하는 것으로 가상기억장치에 저장된 프로그램을 실행하려면 가상기억장치의 주소를 주기억장치의 주소로 바꾸눈 주소 변환 작업(매핑)이 필요하다. 페이징 기법 : 프로그램을 동일한 크기로 나눈 단위를 페이지라 하며 이 페이지를 블록으로 활용하는 기법 세그먼테이션 기법 : 프로그램을 가변적인 크기로 나눈 단위를 세그먼트라 하며, 이 세그먼트를 블록으로 사용하는 기법 내부 단변화 : 프로그램이 할당된 후 남는 빈 공간, 영역 크기 16K &amp;gt; 프로그램 크기 14K 인 경우 내부 단편화 2K 발생 외부 단편화 : 영역 크기보다 프로그램 크기가 커서 할당되지 않아 남는 빈 공간, 영억 크기 12K &amp;lt; 프로그램 크기 14K 인 경우 외부 단편화 2K 발생 페이징 기법 페이지 : 프로그램을 일정한 크기로 나눈 단위(일반적으로 1~4KB) 프레임 : 페이지 크기로 일정하게 나누어진 주기억장치 단위 주소 변환을 위해서 페이지의 위치 정보를 가지고 있는 페이지 맵 테이블이 필요하다. 외부 단편화는 발생하지 않지만 내부 단편화는 발생할 수 있다. 장점 : 여러 개의 프로그램을 동시 실행할 수 있어 다중 프로그래밍 정도가 향상된다. 단점 : 주소 변환 과정에서 CPU 사용시간이 낭비되고 내부 단편화 문제가 발생한다. 세그먼테이션 기법 세그먼트 : 사용자 주소 공간을 논리적인 단위로 나눈 것, 각 세그먼트는 고유한 이름과 크기를 가진다. 주소 변환을 위해 세그먼트가 존재하는 위치 정보를 가지고 있는 세그먼트 맵 테이블이 필요하다. 장점 : 외부단편화에 의한 기억장치 낭비를 줄일 수 있다. 단점 : 세그먼트 크기가 가변적이기 때문에 세그먼트 영역이 다른 세그먼트 영역을 침범하지 않는 기억장치 보호키가 필요하다. 페이지 교체 알고리즘 페이지 부재가 발생했을 때 가상기억장치의 필요한 페이지를 주기억장치에 적재하는 데 어떤 프레임을 선택해 교체할 지 결정하는 기법 FIFO(First In First Out) 가장 오래 있었던 페이지를 고체하는 기법이다. 벨레이디의 모순 현상이 발생한다.(프레임 수가 늘어나면 페이지 부재 수가 줄어들지 않는 현상) 참조 페이지 1 2 3 4 1 2 5 1 2 3 4 5 Frame 1 1 1 1 4 4 4 5 5 5 5 5 5 Frame 2   2 2 2 1 1 1 1 1 3 3 3 Frame 3     3 3 3 2 2 2 2 2 4 4 페이지 부재 O O O O O O O     O O   위 경우 페이지 부재가 총 9번 발생한다. 하지만, Frame 개수가 4개로 늘어나도 페이지 부재는 10번으로 증가한다. =&amp;gt; 벨레이디 모순 현상 LRU(Least Recently Used) 최근에 가장 오랫동안 사용하지 않은 페이지를 교체하는 기법 계수기나 스택같은 별로 하드웨어가 필요하며 시간적인 오버헤드가 발생하고, 실제로 구현하기 어렵다. 참조 페이지 2 3 2 1 5 2 3 5 Frame 1 2 2 2 2 2 2 2 2 Frame 2   3 3 3 5 5 5 5 Frame 3       1 1 1 3 3 페이지 부재 O O   O O   O   LFU(Least Frequently Used) 사용 빈도가 가장 적은 페이지를 교체하는 기법 활발하게 사용되는 페이지는 사용 횟수가 많아 교체되지 않고 사용된다. 초기에 많이 사용된 페이지가 그 후루도 사용되지 않을 경우 프레임을 계속 차지할 수 있다. 참조 페이지 2 3 1 3 1 2 4 5 Frame 1 2 2 2 2 2 2 2 2 Frame 2   3 3 3 3 3 3 3 Frame 3     1 1 1 1 1 1 Frame 4             4 5 페이지 부재 O O O       O O 가상기억창치 관리 페이지 크기 페이지 크기가 작을 경우 페이지 단편화가 가모되고 볼필요한 내용이 주기억장치에 적재될 확률이 적다. 페이지 정보를 가지는 페이지 맵 테이블 크기가 커지고 매핑 속도가 늦어진다. 디스크 접근 횟수가 많아져 전체적인 입출력 시간이 증가한다. 페이지 크기가 클 경우 페이지 정보를 갖는 맵 테이블의 크기가 작아지고, 매핑 속도가 빨라진다. 디스크 접근 횟수가 줄어들어 전체적인 입출력 시간이 감소한다. 페이지 단편화가 증가되고, 한 개의 페이지를 주기억장치로 이동하는 시간이 늘어난다. 구역성(Locality) 어느 순간 특정 페이지만 집중적으로 참조하는 것 시간 구역성 하나의 페이지를 일정 시간 동안 집중적으로 엑세스하는 현상 한번 참조한 페이지는 가까운 시간 내에 계속 참조할 가능성이 높다. 공간 구역성 어느 하나의 페이지를 참조하면 그 근처의 페이지를 참조할 가능성이 높다. 프로세스 실행 시 일정 위치의 페이지를 집중적으로 액세스하는 현상 워킹 셋(Working Set) 프로세스가 일정 시간 동안 자주 참조하는 페이지들의 집합 자주 참조되는 워킹 셋을 주기억장치에 상주시킴으로써 페이지 부재 및 교체 현상이 줄어들어 사용이 안정화된다. 스레싱(Thrashing) 프로세스 처리 시간보다 페이지 교체에 소요되는 시간이 더 많아지는 현상 어떤 프로세스가 실제로 사용하는 프레임 수만큼의 프레임을 갖지 못한 경우 발생 방지 방법 : 다중 프로그래밍 정도 완화, Working Set 이용 cf) 다중 프로그래밍 정도 : 얼마나 많은 프로그램을 동시에 수행하는 정도 디스크 스케줄링 사용할 데이터가 디스크 상의 여러 곳에 저장되어 있을 경우 디스크 헤드가 움직으는 경로를 결정하는 기법 목적 : 처리량 최대화, 응답 시간 최소화, 응답 시간 편차의 최소화 FCFS(First Come First Service) 디스크 대기 큐에 가장 먼저 들어온 트랙에 대한 요청을 먼저 서비스하는 기법 더 높은 우선순위의 요청이 입력되어도 순사가 바뀌지 않아 공평성이 보장된다. 디스크 오버헤드가 적을 때 효율적이며, 오버헤드가 커지면 응답 시간이 길어진다. 디스크 대기 큐 : 53,98,183,37,122,14,124,65,67 이동 순서 : 53 -&amp;gt; 98 -&amp;gt; 183 -&amp;gt; 37 -&amp;gt; 122 -&amp;gt; 14 -&amp;gt; 124 -&amp;gt; 65 -&amp;gt; 67 SSTF(Shortest Seek Time First) 탐색 거리가 가장 짧은 트랙에 대한 요청을 먼저 서비스하는 기법 현재 헤드 위치에서 가장 가까운 거리에 있는 트랙으로 헤드를 이동한다. 현재 헤드 위치에 가장 가까운 트랙에 대한 요청이 계속 발생하는 경우 먼 거리의 서비스는 무한정 기다리는 기아 상태가 발생할 수 있다. 디스크 대기 큐 : 53,98,183,37,122,14,124,65,67 이동 순서 : 53 -&amp;gt; 65 -&amp;gt; 67 -&amp;gt; 37 -&amp;gt; 14 -&amp;gt; 98 -&amp;gt; 122 -&amp;gt; 124 -&amp;gt; 183 SCAN SSTF가 갖는 탐색 시간의 편차를 해소하기 위한 기법 현재 헤드 위치에서 진행 방향이 결정되면 탐색 거리가 짧은 순서에 따라 그 방향의 모든 요청을 서비스 후 역방향의 요청 사항을 서비스한다. 오버헤드가 적을 경우 가장 효율적인 기법이다. 디스크 대기 큐 : 53,98,183,37,122,14,124,65,67 이동 순서 : 53 -&amp;gt; 65 -&amp;gt; 67 -&amp;gt; 98 -&amp;gt; 122 -&amp;gt; 124 -&amp;gt; 183 -&amp;gt; 199 -&amp;gt; 37 -&amp;gt; 14 C-SCAN(Circular SCAN) 항상 바깥쪽에서 안쪽으로 한 방향으로만 움직이며 가장 짧은 탐색 거리를 갖는 요청을 서비스하는 기법 처음가 마지막을 인접시킨 것과 같은 원형 형태로 디스크를 처리한다. 디스크 대기 큐 : 53,98,183,37,122,14,124,65,67 이동 순서 : 53 -&amp;gt; 37 -&amp;gt; 14 -&amp;gt; 0 -&amp;gt; 199 -&amp;gt; 183 -&amp;gt; 124 -&amp;gt; 122 -&amp;gt; 98 -&amp;gt; 67 -&amp;gt; 65</summary></entry></feed>